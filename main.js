/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to2, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to2, key) && key !== except)
        __defProp(to2, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to2;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => LinearPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/SettingsTab.ts
var import_obsidian = require("obsidian");
var LinearSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Linear Settings" });
    new import_obsidian.Setting(containerEl).setName("API Key").setDesc("Your Linear API key").addText((text) => text.setPlaceholder("Enter your API key").setValue(this.plugin.settings.apiKey).onChange(async (value) => {
      this.plugin.settings.apiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Debug Mode").setDesc("Enable debug logging in the console").addToggle((toggle) => toggle.setValue(this.plugin.settings.debugMode).onChange(async (value) => {
      this.plugin.settings.debugMode = value;
      await this.plugin.saveSettings();
    }));
  }
};

// src/settings.ts
var DEFAULT_SETTINGS = {
  apiKey: "",
  debugMode: false
};

// src/processors/LinearProcessor.ts
var import_obsidian3 = require("obsidian");

// node_modules/@linear/sdk/dist/index-es.min.js
var import_stream = __toESM(require("stream"));
var import_http = __toESM(require("http"));
var import_url = __toESM(require("url"));
var import_https = __toESM(require("https"));
var import_zlib = __toESM(require("zlib"));
var import_crypto = __toESM(require("crypto"));
var l;
var r;
var m;
var o;
var s;
var u;
var k;
var v;
var p;
var c;
var N;
var h;
var f;
var b;
var S;
var y;
var g;
var D;
var V;
var _;
var F;
var A;
var T;
var w;
var I;
var q;
var C;
var P;
var j;
var O;
var U;
var x;
var B;
var R;
var E;
var L;
var z;
var M;
var H;
var W;
var G;
var K;
var J;
var $;
var Z;
var Y;
var Q;
var X;
!function(e2) {
  e2.Android = "android", e2.Desktop = "desktop", e2.Ios = "ios", e2.Web = "web";
}(l || (l = {})), function(e2) {
  e2.ActiveCycle = "activeCycle", e2.ActiveIssues = "activeIssues", e2.Backlog = "backlog", e2.Triage = "triage", e2.UpcomingCycle = "upcomingCycle";
}(r || (r = {})), function(e2) {
  e2.Active = "active", e2.Inactive = "inactive";
}(m || (m = {})), function(e2) {
  e2.After = "after", e2.Before = "before", e2.During = "during";
}(o || (o = {})), function(e2) {
  e2.HalfYear = "halfYear", e2.Month = "month", e2.Quarter = "quarter", e2.Year = "year";
}(s || (s = {})), function(e2) {
  e2.Friday = "Friday", e2.Monday = "Monday", e2.Saturday = "Saturday", e2.Sunday = "Sunday", e2.Thursday = "Thursday", e2.Tuesday = "Tuesday", e2.Wednesday = "Wednesday";
}(u || (u = {})), function(e2) {
  e2.Feed = "feed", e2.Projects = "projects", e2.TeamIssues = "teamIssues";
}(k || (k = {})), function(e2) {
  e2.Daily = "daily", e2.Never = "never", e2.Weekly = "weekly";
}(v || (v = {})), function(e2) {
  e2.Daily = "daily", e2.Weekly = "weekly";
}(p || (p = {})), function(e2) {
  e2.Draft = "draft", e2.Merge = "merge", e2.Mergeable = "mergeable", e2.Review = "review", e2.Start = "start";
}(c || (c = {})), function(e2) {
  e2.Closes = "closes", e2.Contributes = "contributes", e2.Links = "links";
}(N || (N = {})), function(e2) {
  e2.Organization = "organization", e2.User = "user";
}(h || (h = {})), function(e2) {
  e2.Active = "Active", e2.Completed = "Completed", e2.Planned = "Planned";
}(f || (f = {})), function(e2) {
  e2.Overview = "overview", e2.Projects = "projects";
}(b || (b = {})), function(e2) {
  e2.AtRisk = "atRisk", e2.OffTrack = "offTrack", e2.OnTrack = "onTrack";
}(S || (S = {})), function(e2) {
  e2.Airbyte = "airbyte", e2.Discord = "discord", e2.Email = "email", e2.Figma = "figma", e2.FigmaPlugin = "figmaPlugin", e2.Front = "front", e2.Github = "github", e2.GithubCommit = "githubCommit", e2.GithubEnterpriseServer = "githubEnterpriseServer", e2.GithubImport = "githubImport", e2.GithubPersonal = "githubPersonal", e2.Gitlab = "gitlab", e2.GoogleCalendarPersonal = "googleCalendarPersonal", e2.GoogleSheets = "googleSheets", e2.Intercom = "intercom", e2.Jira = "jira", e2.JiraPersonal = "jiraPersonal", e2.LaunchDarkly = "launchDarkly", e2.LaunchDarklyPersonal = "launchDarklyPersonal", e2.Loom = "loom", e2.Notion = "notion", e2.Opsgenie = "opsgenie", e2.PagerDuty = "pagerDuty", e2.Salesforce = "salesforce", e2.Sentry = "sentry", e2.Slack = "slack", e2.SlackAsks = "slackAsks", e2.SlackCustomViewNotifications = "slackCustomViewNotifications", e2.SlackInitiativePost = "slackInitiativePost", e2.SlackOrgInitiativeUpdatesPost = "slackOrgInitiativeUpdatesPost", e2.SlackOrgProjectUpdatesPost = "slackOrgProjectUpdatesPost", e2.SlackPersonal = "slackPersonal", e2.SlackPost = "slackPost", e2.SlackProjectPost = "slackProjectPost", e2.SlackProjectUpdatesPost = "slackProjectUpdatesPost", e2.Zendesk = "zendesk";
}(y || (y = {})), function(e2) {
  e2.Blocks = "blocks", e2.Duplicate = "duplicate", e2.Related = "related", e2.Similar = "similar";
}(g || (g = {})), function(e2) {
  e2.AppsAndIntegrations = "appsAndIntegrations", e2.Assignments = "assignments", e2.CommentsAndReplies = "commentsAndReplies", e2.Customers = "customers", e2.DocumentChanges = "documentChanges", e2.Mentions = "mentions", e2.PostsAndUpdates = "postsAndUpdates", e2.Reactions = "reactions", e2.Reminders = "reminders", e2.Reviews = "reviews", e2.StatusChanges = "statusChanges", e2.Subscriptions = "subscriptions", e2.System = "system", e2.Triage = "triage";
}(D || (D = {})), function(e2) {
  e2.Desktop = "desktop", e2.Email = "email", e2.Mobile = "mobile", e2.Slack = "slack";
}(V || (V = {})), function(e2) {
  e2.Approved = "approved", e2.Denied = "denied", e2.Requested = "requested";
}(_ || (_ = {})), function(e2) {
  e2.General = "general", e2.Saml = "saml";
}(F || (F = {})), function(e2) {
  e2.Accepted = "accepted", e2.Expired = "expired", e2.Pending = "pending";
}(A || (A = {})), function(e2) {
  e2.First = "first", e2.Last = "last";
}(T || (T = {})), function(e2) {
  e2.CreatedAt = "createdAt", e2.UpdatedAt = "updatedAt";
}(w || (w = {})), function(e2) {
  e2.Ascending = "Ascending", e2.Descending = "Descending";
}(I || (I = {})), function(e2) {
  e2.Summary = "summary", e2.Update = "update";
}(q || (q = {})), function(e2) {
  e2.None = "none", e2.Team = "team", e2.TeamHierarchy = "teamHierarchy", e2.Workspace = "workspace";
}(C || (C = {})), function(e2) {
  e2.Done = "done", e2.Next = "next", e2.Overdue = "overdue", e2.Unstarted = "unstarted";
}(P || (P = {})), function(e2) {
  e2.Backlog = "backlog", e2.Canceled = "canceled", e2.Completed = "completed", e2.Paused = "paused", e2.Planned = "planned", e2.Started = "started";
}(j || (j = {})), function(e2) {
  e2.Customers = "customers", e2.Documents = "documents", e2.Issues = "issues";
}(O || (O = {})), function(e2) {
  e2.AtRisk = "atRisk", e2.OffTrack = "offTrack", e2.OnTrack = "onTrack";
}(U || (U = {})), function(e2) {
  e2.Month = "month", e2.Never = "never", e2.TwoWeeks = "twoWeeks", e2.Week = "week";
}(x || (x = {})), function(e2) {
  e2.Graphite = "graphite", e2.Source = "source";
}(B || (B = {})), function(e2) {
  e2.Approved = "approved", e2.Closed = "closed", e2.Draft = "draft", e2.InReview = "inReview", e2.Merged = "merged", e2.Open = "open";
}(R || (R = {})), function(e2) {
  e2.Apple = "apple", e2.AppleDevelopment = "appleDevelopment", e2.Firebase = "firebase", e2.Web = "web";
}(E || (E = {})), function(e2) {
  e2.Beta = "beta", e2.Development = "development", e2.Internal = "internal", e2.PreRelease = "preRelease", e2.Public = "public";
}(L || (L = {})), function(e2) {
  e2.All = "all", e2.OnlyBusinessDays = "onlyBusinessDays";
}(z || (z = {})), function(e2) {
  e2.Document = "document", e2.Initiative = "initiative", e2.Issue = "issue", e2.Project = "project";
}(M || (M = {})), function(e2) {
  e2.Desktop = "desktop", e2.DesktopAndPush = "desktopAndPush", e2.DesktopThenPush = "desktopThenPush", e2.Push = "push";
}(H || (H = {})), function(e2) {
  e2.Breached = "Breached", e2.Completed = "Completed", e2.Failed = "Failed", e2.HighRisk = "HighRisk", e2.LowRisk = "LowRisk", e2.MediumRisk = "MediumRisk";
}(W || (W = {})), function(e2) {
  e2.DirectMessage = "DirectMessage", e2.MultiPersonDirectMessage = "MultiPersonDirectMessage", e2.Private = "Private", e2.Public = "Public";
}(G || (G = {})), function(e2) {
  e2.Assign = "assign", e2.Notify = "notify";
}(K || (K = {})), function(e2) {
  e2.Assigned = "assigned";
}(J || (J = {})), function(e2) {
  e2.All = "all", e2.AnalyticsWelcomeDismissed = "analyticsWelcomeDismissed", e2.CanPlaySnake = "canPlaySnake", e2.CanPlayTetris = "canPlayTetris", e2.CommandMenuClearShortcutTip = "commandMenuClearShortcutTip", e2.CompletedOnboarding = "completedOnboarding", e2.CycleWelcomeDismissed = "cycleWelcomeDismissed", e2.DesktopDownloadToastDismissed = "desktopDownloadToastDismissed", e2.DesktopInstalled = "desktopInstalled", e2.DesktopTabsOnboardingDismissed = "desktopTabsOnboardingDismissed", e2.DueDateShortcutMigration = "dueDateShortcutMigration", e2.EditorSlashCommandUsed = "editorSlashCommandUsed", e2.EmptyActiveIssuesDismissed = "emptyActiveIssuesDismissed", e2.EmptyBacklogDismissed = "emptyBacklogDismissed", e2.EmptyCustomViewsDismissed = "emptyCustomViewsDismissed", e2.EmptyMyIssuesDismissed = "emptyMyIssuesDismissed", e2.EmptyParagraphSlashCommandTip = "emptyParagraphSlashCommandTip", e2.FigmaPluginBannerDismissed = "figmaPluginBannerDismissed", e2.FigmaPromptDismissed = "figmaPromptDismissed", e2.HelpIslandFeatureInsightsDismissed = "helpIslandFeatureInsightsDismissed", e2.ImportBannerDismissed = "importBannerDismissed", e2.InitiativesBannerDismissed = "initiativesBannerDismissed", e2.InsightsHelpDismissed = "insightsHelpDismissed", e2.InsightsWelcomeDismissed = "insightsWelcomeDismissed", e2.IssueLabelSuggestionUsed = "issueLabelSuggestionUsed", e2.IssueMovePromptCompleted = "issueMovePromptCompleted", e2.JoinTeamIntroductionDismissed = "joinTeamIntroductionDismissed", e2.ListSelectionTip = "listSelectionTip", e2.MigrateThemePreference = "migrateThemePreference", e2.MilestoneOnboardingIsSeenAndDismissed = "milestoneOnboardingIsSeenAndDismissed", e2.ProjectBacklogWelcomeDismissed = "projectBacklogWelcomeDismissed", e2.ProjectBoardOnboardingIsSeenAndDismissed = "projectBoardOnboardingIsSeenAndDismissed", e2.ProjectUpdatesWelcomeDismissed = "projectUpdatesWelcomeDismissed", e2.ProjectWelcomeDismissed = "projectWelcomeDismissed", e2.PulseWelcomeDismissed = "pulseWelcomeDismissed", e2.RewindBannerDismissed = "rewindBannerDismissed", e2.SlackCommentReactionTipShown = "slackCommentReactionTipShown", e2.TeamsPageIntroductionDismissed = "teamsPageIntroductionDismissed", e2.ThreadedCommentsNudgeIsSeen = "threadedCommentsNudgeIsSeen", e2.TriageWelcomeDismissed = "triageWelcomeDismissed", e2.TryCyclesDismissed = "tryCyclesDismissed", e2.TryGithubDismissed = "tryGithubDismissed", e2.TryInvitePeopleDismissed = "tryInvitePeopleDismissed", e2.TryRoadmapsDismissed = "tryRoadmapsDismissed", e2.TryTriageDismissed = "tryTriageDismissed", e2.UpdatedSlackThreadSyncIntegration = "updatedSlackThreadSyncIntegration";
}($ || ($ = {})), function(e2) {
  e2.Clear = "clear", e2.Decr = "decr", e2.Incr = "incr", e2.Lock = "lock";
}(Z || (Z = {})), function(e2) {
  e2.Admin = "admin", e2.App = "app", e2.Guest = "guest", e2.User = "user";
}(Y || (Y = {})), function(e2) {
  e2.Organization = "organization", e2.User = "user";
}(Q || (Q = {})), function(e2) {
  e2.ActiveIssues = "activeIssues", e2.AllIssues = "allIssues", e2.Archive = "archive", e2.Backlog = "backlog", e2.Board = "board", e2.CompletedCycle = "completedCycle", e2.CustomRoadmap = "customRoadmap", e2.CustomView = "customView", e2.CustomViews = "customViews", e2.Customer = "customer", e2.Customers = "customers", e2.Cycle = "cycle", e2.EmbeddedCustomerNeeds = "embeddedCustomerNeeds", e2.FeedAll = "feedAll", e2.FeedCreated = "feedCreated", e2.FeedFollowing = "feedFollowing", e2.FeedPopular = "feedPopular", e2.Inbox = "inbox", e2.Initiative = "initiative", e2.InitiativeOverview = "initiativeOverview", e2.InitiativeOverviewSubInitiatives = "initiativeOverviewSubInitiatives", e2.Initiatives = "initiatives", e2.InitiativesCompleted = "initiativesCompleted", e2.InitiativesPlanned = "initiativesPlanned", e2.IssueIdentifiers = "issueIdentifiers", e2.Label = "label", e2.MyIssues = "myIssues", e2.MyIssuesActivity = "myIssuesActivity", e2.MyIssuesCreatedByMe = "myIssuesCreatedByMe", e2.MyIssuesSubscribedTo = "myIssuesSubscribedTo", e2.MyReviews = "myReviews", e2.Project = "project", e2.ProjectCustomerNeeds = "projectCustomerNeeds", e2.ProjectDocuments = "projectDocuments", e2.ProjectLabel = "projectLabel", e2.Projects = "projects", e2.ProjectsAll = "projectsAll", e2.ProjectsBacklog = "projectsBacklog", e2.ProjectsClosed = "projectsClosed", e2.QuickView = "quickView", e2.Reviews = "reviews", e2.Roadmap = "roadmap", e2.RoadmapAll = "roadmapAll", e2.RoadmapBacklog = "roadmapBacklog", e2.RoadmapClosed = "roadmapClosed", e2.Roadmaps = "roadmaps", e2.Search = "search", e2.SplitSearch = "splitSearch", e2.SubIssues = "subIssues", e2.Teams = "teams", e2.Triage = "triage", e2.UserProfile = "userProfile", e2.UserProfileCreatedByUser = "userProfileCreatedByUser", e2.WorkspaceMembers = "workspaceMembers";
}(X || (X = {}));
var ee = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomerNeedArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var ie = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CycleArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CycleArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var ne = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DeletePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DeletePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entityId" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var ae = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var te = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var de = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeUpdateArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var le = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var re = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ActorBot" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ActorBot" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "avatarUrl" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "userDisplayName" } }, { kind: "Field", name: { kind: "Name", value: "subType" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
var me = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentNotification" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "commentId" } }, { kind: "Field", name: { kind: "Name", value: "documentId" } }, { kind: "Field", name: { kind: "Name", value: "parentCommentId" } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "externalUserActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "emailedAt" } }, { kind: "Field", name: { kind: "Name", value: "readAt" } }, { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
var oe = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeNotification" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "commentId" } }, { kind: "Field", name: { kind: "Name", value: "initiativeId" } }, { kind: "Field", name: { kind: "Name", value: "initiativeUpdateId" } }, { kind: "Field", name: { kind: "Name", value: "parentCommentId" } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "externalUserActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "emailedAt" } }, { kind: "Field", name: { kind: "Name", value: "readAt" } }, { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
var se = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationSubscription" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscription" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "customView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "label" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "customer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "userContextViewType" } }, { kind: "Field", name: { kind: "Name", value: "contextViewType" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "subscriber" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "active" } }] } }] };
var ue = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueNotification" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "commentId" } }, { kind: "Field", name: { kind: "Name", value: "issueId" } }, { kind: "Field", name: { kind: "Name", value: "parentCommentId" } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "comment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "externalUserActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "parentComment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "subscriptions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscription" } }] } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "emailedAt" } }, { kind: "Field", name: { kind: "Name", value: "readAt" } }, { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
var ke = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OauthClientApproval" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthClientApproval" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "requesterId" } }, { kind: "Field", name: { kind: "Name", value: "responderId" } }, { kind: "Field", name: { kind: "Name", value: "requestReason" } }, { kind: "Field", name: { kind: "Name", value: "denyReason" } }, { kind: "Field", name: { kind: "Name", value: "scopes" } }, { kind: "Field", name: { kind: "Name", value: "status" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "oauthClientId" } }] } }] };
var ve = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OauthClientApprovalNotification" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthClientApprovalNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "oauthClientApprovalId" } }, { kind: "Field", name: { kind: "Name", value: "oauthClientApproval" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OauthClientApproval" } }] } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "externalUserActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "emailedAt" } }, { kind: "Field", name: { kind: "Name", value: "readAt" } }, { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
var pe = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectNotification" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "reactionEmoji" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "commentId" } }, { kind: "Field", name: { kind: "Name", value: "parentCommentId" } }, { kind: "Field", name: { kind: "Name", value: "projectId" } }, { kind: "Field", name: { kind: "Name", value: "projectMilestoneId" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdateId" } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "comment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "document" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "externalUserActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiativeUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "parentComment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "projectUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "emailedAt" } }, { kind: "Field", name: { kind: "Name", value: "readAt" } }, { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
var ce = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Notification" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Notification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "externalUserActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "emailedAt" } }, { kind: "Field", name: { kind: "Name", value: "readAt" } }, { kind: "Field", name: { kind: "Name", value: "unsnoozedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentNotification" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeNotification" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueNotification" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OauthClientApprovalNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OauthClientApprovalNotification" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectNotification" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectNotification" } }] } }] } }] };
var Ne = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var he = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var fe = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectStatusArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var be = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectUpdateArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var Se = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "RoadmapArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var ye = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TeamArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var ge = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "WorkflowStateArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var De = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationIpRestriction" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationIpRestriction" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "range" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "enabled" } }] } }] };
var Ve = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectStatus" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatus" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "position" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "indefinite" } }] } }] };
var _e = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "PaidSubscription" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PaidSubscription" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "collectionMethod" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cancelAt" } }, { kind: "Field", name: { kind: "Name", value: "canceledAt" } }, { kind: "Field", name: { kind: "Name", value: "nextBillingAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "seatsMaximum" } }, { kind: "Field", name: { kind: "Name", value: "seatsMinimum" } }, { kind: "Field", name: { kind: "Name", value: "seats" } }, { kind: "Field", name: { kind: "Name", value: "pendingChangeType" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
var Fe = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Organization" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Organization" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "allowedAuthServices" } }, { kind: "Field", name: { kind: "Name", value: "customersConfiguration" } }, { kind: "Field", name: { kind: "Name", value: "defaultFeedSummarySchedule" } }, { kind: "Field", name: { kind: "Name", value: "gitBranchFormat" } }, { kind: "Field", name: { kind: "Name", value: "ipRestrictions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationIpRestriction" } }] } }, { kind: "Field", name: { kind: "Name", value: "userCount" } }, { kind: "Field", name: { kind: "Name", value: "customerCount" } }, { kind: "Field", name: { kind: "Name", value: "createdIssueCount" } }, { kind: "Field", name: { kind: "Name", value: "previousUrlKeys" } }, { kind: "Field", name: { kind: "Name", value: "periodUploadVolume" } }, { kind: "Field", name: { kind: "Name", value: "initiativeUpdateRemindersDay" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdateRemindersDay" } }, { kind: "Field", name: { kind: "Name", value: "releaseChannel" } }, { kind: "Field", name: { kind: "Name", value: "initiativeUpdateRemindersHour" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdateRemindersHour" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "fiscalYearStartMonth" } }, { kind: "Field", name: { kind: "Name", value: "initiativeUpdateReminderFrequencyInWeeks" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdateReminderFrequencyInWeeks" } }, { kind: "Field", name: { kind: "Name", value: "logoUrl" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "projectStatuses" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatus" } }] } }, { kind: "Field", name: { kind: "Name", value: "subscription" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PaidSubscription" } }] } }, { kind: "Field", name: { kind: "Name", value: "urlKey" } }, { kind: "Field", name: { kind: "Name", value: "deletionRequestedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "trialEndsAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "samlEnabled" } }, { kind: "Field", name: { kind: "Name", value: "scimEnabled" } }, { kind: "Field", name: { kind: "Name", value: "allowMembersToInvite" } }, { kind: "Field", name: { kind: "Name", value: "restrictTeamCreationToAdmins" } }, { kind: "Field", name: { kind: "Name", value: "gitLinkbackMessagesEnabled" } }, { kind: "Field", name: { kind: "Name", value: "gitPublicLinkbackMessagesEnabled" } }, { kind: "Field", name: { kind: "Name", value: "feedEnabled" } }, { kind: "Field", name: { kind: "Name", value: "customersEnabled" } }, { kind: "Field", name: { kind: "Name", value: "roadmapEnabled" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdatesReminderFrequency" } }, { kind: "Field", name: { kind: "Name", value: "slaDayCount" } }] } }] };
var Ae = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuthenticationSessionResponse" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthenticationSessionResponse" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "client" } }, { kind: "Field", name: { kind: "Name", value: "countryCodes" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "location" } }, { kind: "Field", name: { kind: "Name", value: "ip" } }, { kind: "Field", name: { kind: "Name", value: "isCurrentSession" } }, { kind: "Field", name: { kind: "Name", value: "locationCity" } }, { kind: "Field", name: { kind: "Name", value: "locationCountryCode" } }, { kind: "Field", name: { kind: "Name", value: "locationCountry" } }, { kind: "Field", name: { kind: "Name", value: "locationRegionCode" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "operatingSystem" } }, { kind: "Field", name: { kind: "Name", value: "service" } }, { kind: "Field", name: { kind: "Name", value: "userAgent" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "browserType" } }, { kind: "Field", name: { kind: "Name", value: "lastActiveAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
var Te = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UserAuthorizedApplication" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserAuthorizedApplication" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "approvalErrorCode" } }, { kind: "Field", name: { kind: "Name", value: "imageUrl" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "developer" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "clientId" } }, { kind: "Field", name: { kind: "Name", value: "developerUrl" } }, { kind: "Field", name: { kind: "Name", value: "webhooksEnabled" } }, { kind: "Field", name: { kind: "Name", value: "createdByLinear" } }, { kind: "Field", name: { kind: "Name", value: "isAuthorized" } }] } }] };
var we = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Application" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Application" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "imageUrl" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "developer" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "clientId" } }, { kind: "Field", name: { kind: "Name", value: "developerUrl" } }] } }] };
var Ie = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntegrationsSettings" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationsSettings" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "contextViewType" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueNewComment" } }, { kind: "Field", name: { kind: "Name", value: "slackInitiativeUpdateCreated" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueAddedToTriage" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueCreated" } }, { kind: "Field", name: { kind: "Name", value: "slackProjectUpdateCreated" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueSlaHighRisk" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueSlaBreached" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueAddedToView" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueStatusChangedDone" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueStatusChangedAll" } }, { kind: "Field", name: { kind: "Name", value: "slackProjectUpdateCreatedToTeam" } }, { kind: "Field", name: { kind: "Name", value: "slackProjectUpdateCreatedToWorkspace" } }] } }] };
var qe = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var Ce = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeToProjectPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeToProjectPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "initiativeToProject" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var Pe = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "end" } }, { kind: "Field", name: { kind: "Name", value: "start" } }] } }] };
var je = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationDeliveryPreferencesSchedule" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationDeliveryPreferencesSchedule" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "friday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }, { kind: "Field", name: { kind: "Name", value: "monday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }, { kind: "Field", name: { kind: "Name", value: "saturday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }, { kind: "Field", name: { kind: "Name", value: "sunday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }, { kind: "Field", name: { kind: "Name", value: "thursday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }, { kind: "Field", name: { kind: "Name", value: "tuesday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }, { kind: "Field", name: { kind: "Name", value: "wednesday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }, { kind: "Field", name: { kind: "Name", value: "disabled" } }] } }] };
var Oe = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationDeliveryPreferencesChannel" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationDeliveryPreferencesChannel" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "schedule" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesSchedule" } }] } }, { kind: "Field", name: { kind: "Name", value: "notificationsDisabled" } }] } }] };
var Ue = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationDeliveryPreferences" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationDeliveryPreferences" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "mobile" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesChannel" } }] } }] } }] };
var xe = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationChannelPreferences" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationChannelPreferences" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "slack" } }, { kind: "Field", name: { kind: "Name", value: "desktop" } }, { kind: "Field", name: { kind: "Name", value: "email" } }, { kind: "Field", name: { kind: "Name", value: "mobile" } }] } }] };
var Be = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationCategoryPreferences" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationCategoryPreferences" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "customers" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "appsAndIntegrations" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "assignments" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "commentsAndReplies" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "documentChanges" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "mentions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "postsAndUpdates" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "reactions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "reminders" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "reviews" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "statusChanges" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "subscriptions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "system" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "triage" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }] } }] };
var Re = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UserSettings" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettings" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "calendarHash" } }, { kind: "Field", name: { kind: "Name", value: "unsubscribedFrom" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "notificationDeliveryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "notificationCategoryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationCategoryPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "notificationChannelPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "subscribedToDPA" } }, { kind: "Field", name: { kind: "Name", value: "subscribedToChangelog" } }, { kind: "Field", name: { kind: "Name", value: "subscribedToInviteAccepted" } }, { kind: "Field", name: { kind: "Name", value: "subscribedToPrivacyLegalUpdates" } }, { kind: "Field", name: { kind: "Name", value: "autoAssignToSelf" } }, { kind: "Field", name: { kind: "Name", value: "showFullUserNames" } }] } }] };
var Ee = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueImportJqlCheckPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImportJqlCheckPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "error" } }, { kind: "Field", name: { kind: "Name", value: "count" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var Le = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueImportSyncCheckPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImportSyncCheckPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "error" } }, { kind: "Field", name: { kind: "Name", value: "canSync" } }] } }] };
var ze = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ApiKey" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ApiKey" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "scope" } }, { kind: "Field", name: { kind: "Name", value: "label" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "requestedSyncGroups" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
var Me = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "PageInfo" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PageInfo" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "startCursor" } }, { kind: "Field", name: { kind: "Name", value: "endCursor" } }, { kind: "Field", name: { kind: "Name", value: "hasPreviousPage" } }, { kind: "Field", name: { kind: "Name", value: "hasNextPage" } }] } }] };
var He = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ApiKeyConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ApiKeyConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ApiKey" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var We = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "SlackAsksTeamSettings" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SlackAsksTeamSettings" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "hasDefaultAsk" } }] } }] };
var Ge = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "SlackChannelNameMapping" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SlackChannelNameMapping" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "autoCreateTemplateId" } }, { kind: "Field", name: { kind: "Name", value: "autoCreateOnBotMention" } }, { kind: "Field", name: { kind: "Name", value: "postCancellationUpdates" } }, { kind: "Field", name: { kind: "Name", value: "postCompletionUpdates" } }, { kind: "Field", name: { kind: "Name", value: "postAcceptedFromTriageUpdates" } }, { kind: "Field", name: { kind: "Name", value: "botAdded" } }, { kind: "Field", name: { kind: "Name", value: "isPrivate" } }, { kind: "Field", name: { kind: "Name", value: "isShared" } }, { kind: "Field", name: { kind: "Name", value: "aiTitles" } }, { kind: "Field", name: { kind: "Name", value: "autoCreateOnMessage" } }, { kind: "Field", name: { kind: "Name", value: "autoCreateOnEmoji" } }, { kind: "Field", name: { kind: "Name", value: "teams" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackAsksTeamSettings" } }] } }] } }] };
var Ke = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AsksChannelConnectPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AsksChannelConnectPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "integration" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "mapping" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackChannelNameMapping" } }] } }, { kind: "Field", name: { kind: "Name", value: "addBot" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var Je = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Attachment" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Attachment" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "sourceType" } }, { kind: "Field", name: { kind: "Name", value: "subtitle" } }, { kind: "Field", name: { kind: "Name", value: "title" } }, { kind: "Field", name: { kind: "Name", value: "metadata" } }, { kind: "Field", name: { kind: "Name", value: "groupBySource" } }, { kind: "Field", name: { kind: "Name", value: "source" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "bodyData" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "externalUserCreator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
var $e = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AttachmentConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AttachmentConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Attachment" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var Ze = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AttachmentPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AttachmentPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "attachment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var Ye = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuditEntry" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuditEntry" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "requestInformation" } }, { kind: "Field", name: { kind: "Name", value: "metadata" } }, { kind: "Field", name: { kind: "Name", value: "countryCode" } }, { kind: "Field", name: { kind: "Name", value: "ip" } }, { kind: "Field", name: { kind: "Name", value: "actorId" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "type" } }] } }] };
var Qe = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuditEntryConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuditEntryConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuditEntry" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var Xe = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuditEntryType" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuditEntryType" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "type" } }] } }] };
var ei = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuthOrganization" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthOrganization" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "allowedAuthServices" } }, { kind: "Field", name: { kind: "Name", value: "previousUrlKeys" } }, { kind: "Field", name: { kind: "Name", value: "serviceId" } }, { kind: "Field", name: { kind: "Name", value: "releaseChannel" } }, { kind: "Field", name: { kind: "Name", value: "logoUrl" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "urlKey" } }, { kind: "Field", name: { kind: "Name", value: "region" } }, { kind: "Field", name: { kind: "Name", value: "deletionRequestedAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "samlEnabled" } }, { kind: "Field", name: { kind: "Name", value: "scimEnabled" } }, { kind: "Field", name: { kind: "Name", value: "enabled" } }, { kind: "Field", name: { kind: "Name", value: "userCount" } }] } }] };
var ii = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuthUser" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthUser" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "avatarUrl" } }, { kind: "Field", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthOrganization" } }] } }, { kind: "Field", name: { kind: "Name", value: "displayName" } }, { kind: "Field", name: { kind: "Name", value: "email" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "userAccountId" } }, { kind: "Field", name: { kind: "Name", value: "active" } }, { kind: "Field", name: { kind: "Name", value: "role" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
var ni = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuthResolverResponse" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthResolverResponse" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "token" } }, { kind: "Field", name: { kind: "Name", value: "email" } }, { kind: "Field", name: { kind: "Name", value: "lastUsedOrganizationId" } }, { kind: "Field", name: { kind: "Name", value: "users" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthUser" } }] } }, { kind: "Field", name: { kind: "Name", value: "lockedUsers" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthUser" } }] } }, { kind: "Field", name: { kind: "Name", value: "lockedOrganizations" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthOrganization" } }] } }, { kind: "Field", name: { kind: "Name", value: "availableOrganizations" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthOrganization" } }] } }, { kind: "Field", name: { kind: "Name", value: "allowDomainAccess" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
var ai = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Reaction" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Reaction" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "emoji" } }, { kind: "Field", name: { kind: "Name", value: "comment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "externalUser" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiativeUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
var ti = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentContent" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentContent" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "content" } }, { kind: "Field", name: { kind: "Name", value: "contentState" } }, { kind: "Field", name: { kind: "Name", value: "document" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "projectMilestone" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "restoredAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
var di = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "SyncedExternalThread" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SyncedExternalThread" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "displayName" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "subType" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "isPersonalIntegrationRequired" } }, { kind: "Field", name: { kind: "Name", value: "isPersonalIntegrationConnected" } }, { kind: "Field", name: { kind: "Name", value: "isConnected" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
var li = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Comment" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Comment" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "reactionData" } }, { kind: "Field", name: { kind: "Name", value: "reactions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }] } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "body" } }, { kind: "Field", name: { kind: "Name", value: "resolvingComment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "documentContent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }] } }, { kind: "Field", name: { kind: "Name", value: "externalThread" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SyncedExternalThread" } }] } }, { kind: "Field", name: { kind: "Name", value: "externalUser" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiativeUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "parent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "projectUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "quotedText" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "resolvedAt" } }, { kind: "Field", name: { kind: "Name", value: "editedAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "resolvingUser" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
var ri = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CommentConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CommentConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Comment" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var mi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CommentPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CommentPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "comment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var oi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ContactPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ContactPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var si = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CreateCsvExportReportPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CreateCsvExportReportPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var ui = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthOrganization" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthUser" } }] } }] } }] };
var ki = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ViewPreferencesValues" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferencesValues" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "issueGrouping" } }, { kind: "Field", name: { kind: "Name", value: "viewOrdering" } }, { kind: "Field", name: { kind: "Name", value: "showCompletedIssues" } }] } }] };
var vi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ViewPreferences" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferences" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "preferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesValues" } }] } }, { kind: "Field", name: { kind: "Name", value: "viewType" } }] } }] };
var pi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomView" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomView" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "viewPreferencesValues" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesValues" } }] } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "userViewPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "feedItemFilterData" } }, { kind: "Field", name: { kind: "Name", value: "filterData" } }, { kind: "Field", name: { kind: "Name", value: "projectFilterData" } }, { kind: "Field", name: { kind: "Name", value: "filters" } }, { kind: "Field", name: { kind: "Name", value: "icon" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "modelName" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "organizationViewPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedBy" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "owner" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "shared" } }] } }] };
var ci = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomViewConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomView" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var Ni = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomViewHasSubscribersPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewHasSubscribersPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "hasSubscribers" } }] } }] };
var hi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomViewPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "customView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var fi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Customer" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Customer" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "slackChannelId" } }, { kind: "Field", name: { kind: "Name", value: "mainSourceId" } }, { kind: "Field", name: { kind: "Name", value: "revenue" } }, { kind: "Field", name: { kind: "Name", value: "approximateNeedCount" } }, { kind: "Field", name: { kind: "Name", value: "status" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "logoUrl" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "domains" } }, { kind: "Field", name: { kind: "Name", value: "externalIds" } }, { kind: "Field", name: { kind: "Name", value: "integration" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "size" } }, { kind: "Field", name: { kind: "Name", value: "tier" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "owner" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
var bi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomerConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Customer" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var Si = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomerNeed" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeed" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "attachment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "comment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "customer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "body" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "priority" } }] } }] };
var yi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomerNeedConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeed" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var gi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomerNeedPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "need" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var Di = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomerPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "customer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var Vi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomerStatus" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerStatus" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "position" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
var _i = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomerStatusConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerStatusConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerStatus" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var Fi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomerTier" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerTier" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "displayName" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "position" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
var Ai = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomerTierConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerTierConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerTier" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var Ti = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomerTierPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerTierPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "tier" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var wi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Cycle" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Cycle" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "completedAt" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "inheritedFrom" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "endsAt" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "completedScopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "completedIssueCountHistory" } }, { kind: "Field", name: { kind: "Name", value: "inProgressScopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "number" } }, { kind: "Field", name: { kind: "Name", value: "progress" } }, { kind: "Field", name: { kind: "Name", value: "startsAt" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "scopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "issueCountHistory" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
var Ii = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CycleConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CycleConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Cycle" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var qi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CyclePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CyclePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var Ci = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Document" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Document" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "trashed" } }, { kind: "Field", name: { kind: "Name", value: "documentContentId" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "title" } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "content" } }, { kind: "Field", name: { kind: "Name", value: "icon" } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastAppliedTemplate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "hiddenAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedBy" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
var Pi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Document" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var ji = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentContentHistoryType" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentContentHistoryType" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "actorIds" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "contentDataSnapshotAt" } }] } }] };
var Oi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentContentHistoryPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentContentHistoryPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "history" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContentHistoryType" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var Ui = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "document" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var xi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ArchiveResponse" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ArchiveResponse" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "archive" } }, { kind: "Field", name: { kind: "Name", value: "totalCount" } }, { kind: "Field", name: { kind: "Name", value: "databaseVersion" } }, { kind: "Field", name: { kind: "Name", value: "includesDependencies" } }] } }] };
var Bi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentSearchResult" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentSearchResult" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "trashed" } }, { kind: "Field", name: { kind: "Name", value: "metadata" } }, { kind: "Field", name: { kind: "Name", value: "documentContentId" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "title" } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "content" } }, { kind: "Field", name: { kind: "Name", value: "icon" } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastAppliedTemplate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "hiddenAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedBy" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
var Ri = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DocumentSearchPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentSearchPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "archivePayload" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }] } }, { kind: "Field", name: { kind: "Name", value: "totalCount" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentSearchResult" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var Ei = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Draft" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Draft" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "data" } }, { kind: "Field", name: { kind: "Name", value: "parentComment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "customerNeed" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiativeUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "projectUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "bodyData" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "isAutogenerated" } }] } }] };
var Li = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "DraftConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DraftConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Draft" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var zi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "EmailIntakeAddress" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmailIntakeAddress" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "template" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "address" } }, { kind: "Field", name: { kind: "Name", value: "repliesEnabled" } }, { kind: "Field", name: { kind: "Name", value: "customerRequestsEnabled" } }, { kind: "Field", name: { kind: "Name", value: "enabled" } }] } }] };
var Mi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "EmailIntakeAddressPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmailIntakeAddressPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "emailIntakeAddress" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailIntakeAddress" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var Hi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "EmailUnsubscribePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmailUnsubscribePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var Wi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "EmailUserAccountAuthChallengeResponse" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmailUserAccountAuthChallengeResponse" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "authType" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var Gi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Emoji" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Emoji" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "source" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
var Ki = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "EmojiConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmojiConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Emoji" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var Ji = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "EmojiPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EmojiPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "emoji" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var $i = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "EntityExternalLink" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EntityExternalLink" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "label" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
var Zi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "EntityExternalLinkConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EntityExternalLinkConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EntityExternalLink" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var Yi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "EntityExternalLinkPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "EntityExternalLinkPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "entityExternalLink" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var Qi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ExternalUser" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ExternalUser" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "avatarUrl" } }, { kind: "Field", name: { kind: "Name", value: "displayName" } }, { kind: "Field", name: { kind: "Name", value: "email" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "lastSeen" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
var Xi = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ExternalUserConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ExternalUserConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ExternalUser" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var en = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Favorite" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Favorite" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "customView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "customer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "document" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "label" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "roadmap" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "folderName" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "owner" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "parent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiativeTab" } }, { kind: "Field", name: { kind: "Name", value: "projectTab" } }, { kind: "Field", name: { kind: "Name", value: "predefinedViewTeam" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "predefinedViewType" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "projectTeam" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
var nn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "FavoriteConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FavoriteConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Favorite" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var an = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "FavoritePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FavoritePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "favorite" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var tn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "FrontAttachmentPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "FrontAttachmentPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "attachment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var dn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "GitAutomationTargetBranch" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationTargetBranch" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "branchPattern" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "isRegex" } }] } }] };
var ln = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "GitAutomationState" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationState" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "state" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "event" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "targetBranch" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationTargetBranch" } }] } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "branchPattern" } }] } }] };
var rn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "GitAutomationStateConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationStateConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationState" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var mn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "GitAutomationStatePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationStatePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "gitAutomationState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationState" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var on = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "GitAutomationTargetBranchPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationTargetBranchPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "targetBranch" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationTargetBranch" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var sn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "GitHubCommitIntegrationPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitHubCommitIntegrationPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "integration" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "webhookSecret" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var un = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "GitHubEnterpriseServerInstallVerificationPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitHubEnterpriseServerInstallVerificationPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var kn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "GitHubEnterpriseServerPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitHubEnterpriseServerPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "installUrl" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "integration" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "setupUrl" } }, { kind: "Field", name: { kind: "Name", value: "webhookSecret" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var vn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "GitLabIntegrationCreatePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GitLabIntegrationCreatePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "integration" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "webhookSecret" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var pn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ImageUploadFromUrlPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ImageUploadFromUrlPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var cn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Initiative" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Initiative" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "trashed" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "integrationsSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updateRemindersDay" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "targetDate" } }, { kind: "Field", name: { kind: "Name", value: "updateReminderFrequency" } }, { kind: "Field", name: { kind: "Name", value: "health" } }, { kind: "Field", name: { kind: "Name", value: "updateRemindersHour" } }, { kind: "Field", name: { kind: "Name", value: "icon" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "content" } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "lastUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "updateReminderFrequencyInWeeks" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "targetDateResolution" } }, { kind: "Field", name: { kind: "Name", value: "frequencyResolution" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "status" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "healthUpdatedAt" } }, { kind: "Field", name: { kind: "Name", value: "startedAt" } }, { kind: "Field", name: { kind: "Name", value: "completedAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "owner" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
var Nn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Initiative" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var hn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeHistory" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeHistory" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entries" } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
var fn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeHistoryConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeHistoryConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeHistory" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var bn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeRelation" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeRelation" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "relatedInitiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
var Sn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeRelationConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeRelationConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeRelation" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var yn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeRelationPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeRelationPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "initiativeRelation" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeRelation" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var gn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeToProject" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeToProject" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
var Dn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeToProjectConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeToProjectConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeToProject" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var Vn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeUpdate" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdate" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "reactionData" } }, { kind: "Field", name: { kind: "Name", value: "reactions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }] } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "diffMarkdown" } }, { kind: "Field", name: { kind: "Name", value: "diff" } }, { kind: "Field", name: { kind: "Name", value: "health" } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "editedAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "body" } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "isDiffHidden" } }, { kind: "Field", name: { kind: "Name", value: "isStale" } }] } }] };
var _n = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeUpdateConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdate" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var Fn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeUpdatePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdatePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "initiativeUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var An = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeUpdateReminderPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateReminderPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var Tn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Integration" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Integration" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "service" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
var wn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntegrationConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Integration" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var In = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntegrationHasScopesPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationHasScopesPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "missingScopes" } }, { kind: "Field", name: { kind: "Name", value: "hasAllScopes" } }] } }] };
var qn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntegrationPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "integration" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var Cn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntegrationRequestPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationRequestPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var Pn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntegrationTemplate" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationTemplate" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "foreignEntityId" } }, { kind: "Field", name: { kind: "Name", value: "integration" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "template" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
var jn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntegrationTemplateConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationTemplateConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationTemplate" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var On = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntegrationTemplatePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationTemplatePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "integrationTemplate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var Un = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IntegrationsSettingsPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IntegrationsSettingsPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "integrationsSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var xn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Issue" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Issue" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "trashed" } }, { kind: "Field", name: { kind: "Name", value: "reactionData" } }, { kind: "Field", name: { kind: "Name", value: "labelIds" } }, { kind: "Field", name: { kind: "Name", value: "integrationSourceType" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "identifier" } }, { kind: "Field", name: { kind: "Name", value: "priorityLabel" } }, { kind: "Field", name: { kind: "Name", value: "previousIdentifiers" } }, { kind: "Field", name: { kind: "Name", value: "reactions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }] } }, { kind: "Field", name: { kind: "Name", value: "customerTicketCount" } }, { kind: "Field", name: { kind: "Name", value: "branchName" } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "sourceComment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "dueDate" } }, { kind: "Field", name: { kind: "Name", value: "estimate" } }, { kind: "Field", name: { kind: "Name", value: "externalUserCreator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "title" } }, { kind: "Field", name: { kind: "Name", value: "number" } }, { kind: "Field", name: { kind: "Name", value: "lastAppliedTemplate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "boardOrder" } }, { kind: "Field", name: { kind: "Name", value: "prioritySortOrder" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "subIssueSortOrder" } }, { kind: "Field", name: { kind: "Name", value: "parent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "priority" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "projectMilestone" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "recurringIssueTemplate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "startedTriageAt" } }, { kind: "Field", name: { kind: "Name", value: "triagedAt" } }, { kind: "Field", name: { kind: "Name", value: "addedToCycleAt" } }, { kind: "Field", name: { kind: "Name", value: "addedToProjectAt" } }, { kind: "Field", name: { kind: "Name", value: "addedToTeamAt" } }, { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } }, { kind: "Field", name: { kind: "Name", value: "autoClosedAt" } }, { kind: "Field", name: { kind: "Name", value: "canceledAt" } }, { kind: "Field", name: { kind: "Name", value: "completedAt" } }, { kind: "Field", name: { kind: "Name", value: "startedAt" } }, { kind: "Field", name: { kind: "Name", value: "slaStartedAt" } }, { kind: "Field", name: { kind: "Name", value: "slaBreachesAt" } }, { kind: "Field", name: { kind: "Name", value: "slaHighRiskAt" } }, { kind: "Field", name: { kind: "Name", value: "slaMediumRiskAt" } }, { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "slaType" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "assignee" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "snoozedBy" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "favorite" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "state" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
var Bn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueBatchPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueBatchPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "issues" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var Rn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var En = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueFilterSuggestionPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueFilterSuggestionPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "filter" } }, { kind: "Field", name: { kind: "Name", value: "logId" } }] } }] };
var Ln = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueRelationHistoryPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationHistoryPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "identifier" } }, { kind: "Field", name: { kind: "Name", value: "type" } }] } }] };
var zn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "User" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "User" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "statusUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "avatarUrl" } }, { kind: "Field", name: { kind: "Name", value: "createdIssueCount" } }, { kind: "Field", name: { kind: "Name", value: "disableReason" } }, { kind: "Field", name: { kind: "Name", value: "avatarBackgroundColor" } }, { kind: "Field", name: { kind: "Name", value: "statusEmoji" } }, { kind: "Field", name: { kind: "Name", value: "initials" } }, { kind: "Field", name: { kind: "Name", value: "statusLabel" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "lastSeen" } }, { kind: "Field", name: { kind: "Name", value: "timezone" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "displayName" } }, { kind: "Field", name: { kind: "Name", value: "email" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "inviteHash" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "active" } }, { kind: "Field", name: { kind: "Name", value: "guest" } }, { kind: "Field", name: { kind: "Name", value: "app" } }, { kind: "Field", name: { kind: "Name", value: "admin" } }, { kind: "Field", name: { kind: "Name", value: "isMe" } }, { kind: "Field", name: { kind: "Name", value: "calendarHash" } }] } }] };
var Mn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueImport" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImport" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "progress" } }, { kind: "Field", name: { kind: "Name", value: "errorMetadata" } }, { kind: "Field", name: { kind: "Name", value: "csvFileUrl" } }, { kind: "Field", name: { kind: "Name", value: "serviceMetadata" } }, { kind: "Field", name: { kind: "Name", value: "teamName" } }, { kind: "Field", name: { kind: "Name", value: "mapping" } }, { kind: "Field", name: { kind: "Name", value: "displayName" } }, { kind: "Field", name: { kind: "Name", value: "creatorId" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "service" } }, { kind: "Field", name: { kind: "Name", value: "status" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "error" } }] } }] };
var Hn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueLabel" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueLabel" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "inheritedFrom" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "parent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "isGroup" } }] } }] };
var Wn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueHistory" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueHistory" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "relationChanges" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationHistoryPayload" } }] } }, { kind: "Field", name: { kind: "Name", value: "addedLabelIds" } }, { kind: "Field", name: { kind: "Name", value: "removedLabelIds" } }, { kind: "Field", name: { kind: "Name", value: "actor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "descriptionUpdatedBy" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }] } }, { kind: "Field", name: { kind: "Name", value: "actors" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }] } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "fromCycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "toCycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "attachmentId" } }, { kind: "Field", name: { kind: "Name", value: "customerNeedId" } }, { kind: "Field", name: { kind: "Name", value: "toCycleId" } }, { kind: "Field", name: { kind: "Name", value: "toParentId" } }, { kind: "Field", name: { kind: "Name", value: "toConvertedProjectId" } }, { kind: "Field", name: { kind: "Name", value: "toProjectId" } }, { kind: "Field", name: { kind: "Name", value: "toStateId" } }, { kind: "Field", name: { kind: "Name", value: "fromCycleId" } }, { kind: "Field", name: { kind: "Name", value: "fromParentId" } }, { kind: "Field", name: { kind: "Name", value: "fromProjectId" } }, { kind: "Field", name: { kind: "Name", value: "fromStateId" } }, { kind: "Field", name: { kind: "Name", value: "fromTeamId" } }, { kind: "Field", name: { kind: "Name", value: "toTeamId" } }, { kind: "Field", name: { kind: "Name", value: "fromAssigneeId" } }, { kind: "Field", name: { kind: "Name", value: "toAssigneeId" } }, { kind: "Field", name: { kind: "Name", value: "actorId" } }, { kind: "Field", name: { kind: "Name", value: "issueImport" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImport" } }] } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "addedLabels" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabel" } }] } }, { kind: "Field", name: { kind: "Name", value: "removedLabels" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabel" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "attachment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "toConvertedProject" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "fromParent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "toParent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "fromProject" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "toProject" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "fromState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "toState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "fromTeam" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "toTeam" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "toAssignee" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "fromAssignee" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "triageResponsibilityNotifiedUsers" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }] } }, { kind: "Field", name: { kind: "Name", value: "fromDueDate" } }, { kind: "Field", name: { kind: "Name", value: "toDueDate" } }, { kind: "Field", name: { kind: "Name", value: "fromEstimate" } }, { kind: "Field", name: { kind: "Name", value: "toEstimate" } }, { kind: "Field", name: { kind: "Name", value: "fromPriority" } }, { kind: "Field", name: { kind: "Name", value: "toPriority" } }, { kind: "Field", name: { kind: "Name", value: "fromTitle" } }, { kind: "Field", name: { kind: "Name", value: "toTitle" } }, { kind: "Field", name: { kind: "Name", value: "archived" } }, { kind: "Field", name: { kind: "Name", value: "autoArchived" } }, { kind: "Field", name: { kind: "Name", value: "autoClosed" } }, { kind: "Field", name: { kind: "Name", value: "trashed" } }, { kind: "Field", name: { kind: "Name", value: "updatedDescription" } }] } }] };
var Gn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueHistoryConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueHistoryConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueHistory" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var Kn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueImportCheckPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImportCheckPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var Jn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueImportDeletePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImportDeletePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "issueImport" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImport" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var $n = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueImportPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueImportPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "issueImport" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImport" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var Zn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueLabelConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabel" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var Yn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueLabelPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "issueLabel" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var Qn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssuePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssuePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var Xn = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssuePriorityValue" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssuePriorityValue" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "label" } }, { kind: "Field", name: { kind: "Name", value: "priority" } }] } }] };
var ea = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueRelation" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelation" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "issue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "relatedIssue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
var ia = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueRelationConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelation" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var na = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueRelationPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "issueRelation" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var aa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueSearchResult" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueSearchResult" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "trashed" } }, { kind: "Field", name: { kind: "Name", value: "reactionData" } }, { kind: "Field", name: { kind: "Name", value: "labelIds" } }, { kind: "Field", name: { kind: "Name", value: "integrationSourceType" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "identifier" } }, { kind: "Field", name: { kind: "Name", value: "priorityLabel" } }, { kind: "Field", name: { kind: "Name", value: "metadata" } }, { kind: "Field", name: { kind: "Name", value: "previousIdentifiers" } }, { kind: "Field", name: { kind: "Name", value: "reactions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }] } }, { kind: "Field", name: { kind: "Name", value: "customerTicketCount" } }, { kind: "Field", name: { kind: "Name", value: "branchName" } }, { kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }, { kind: "Field", name: { kind: "Name", value: "sourceComment" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "dueDate" } }, { kind: "Field", name: { kind: "Name", value: "estimate" } }, { kind: "Field", name: { kind: "Name", value: "externalUserCreator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "title" } }, { kind: "Field", name: { kind: "Name", value: "number" } }, { kind: "Field", name: { kind: "Name", value: "lastAppliedTemplate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "boardOrder" } }, { kind: "Field", name: { kind: "Name", value: "prioritySortOrder" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "subIssueSortOrder" } }, { kind: "Field", name: { kind: "Name", value: "parent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "priority" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "projectMilestone" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "recurringIssueTemplate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "startedTriageAt" } }, { kind: "Field", name: { kind: "Name", value: "triagedAt" } }, { kind: "Field", name: { kind: "Name", value: "addedToCycleAt" } }, { kind: "Field", name: { kind: "Name", value: "addedToProjectAt" } }, { kind: "Field", name: { kind: "Name", value: "addedToTeamAt" } }, { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } }, { kind: "Field", name: { kind: "Name", value: "autoClosedAt" } }, { kind: "Field", name: { kind: "Name", value: "canceledAt" } }, { kind: "Field", name: { kind: "Name", value: "completedAt" } }, { kind: "Field", name: { kind: "Name", value: "startedAt" } }, { kind: "Field", name: { kind: "Name", value: "slaStartedAt" } }, { kind: "Field", name: { kind: "Name", value: "slaBreachesAt" } }, { kind: "Field", name: { kind: "Name", value: "slaHighRiskAt" } }, { kind: "Field", name: { kind: "Name", value: "slaMediumRiskAt" } }, { kind: "Field", name: { kind: "Name", value: "snoozedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "slaType" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "assignee" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "snoozedBy" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "favorite" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "state" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
var ta = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueSearchPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueSearchPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "archivePayload" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }] } }, { kind: "Field", name: { kind: "Name", value: "totalCount" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueSearchResult" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var da = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "IssueTitleSuggestionFromCustomerRequestPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueTitleSuggestionFromCustomerRequestPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "title" } }] } }] };
var la = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "LogoutResponse" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "LogoutResponse" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var ra = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationBatchActionPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationBatchActionPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "notifications" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var ma = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var oa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "notification" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var sa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationSubscriptionConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscriptionConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscription" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var ua = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "NotificationSubscriptionPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscriptionPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "notificationSubscription" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscription" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var ka = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationCancelDeletePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationCancelDeletePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var va = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationDeletePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationDeletePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var pa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationExistsPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationExistsPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }, { kind: "Field", name: { kind: "Name", value: "exists" } }] } }] };
var ca = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationInvite" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInvite" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "metadata" } }, { kind: "Field", name: { kind: "Name", value: "external" } }, { kind: "Field", name: { kind: "Name", value: "email" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "acceptedAt" } }, { kind: "Field", name: { kind: "Name", value: "expiresAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "role" } }, { kind: "Field", name: { kind: "Name", value: "inviter" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "invitee" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
var Na = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationInviteConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInviteConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInvite" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var ha = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationInvitePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInvitePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "organizationInvite" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var fa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var ba = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationStartTrialPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationStartTrialPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var Sa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Project" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Project" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "trashed" } }, { kind: "Field", name: { kind: "Name", value: "labelIds" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "integrationsSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "documentContent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }] } }, { kind: "Field", name: { kind: "Name", value: "updateRemindersDay" } }, { kind: "Field", name: { kind: "Name", value: "targetDate" } }, { kind: "Field", name: { kind: "Name", value: "startDate" } }, { kind: "Field", name: { kind: "Name", value: "updateReminderFrequency" } }, { kind: "Field", name: { kind: "Name", value: "health" } }, { kind: "Field", name: { kind: "Name", value: "updateRemindersHour" } }, { kind: "Field", name: { kind: "Name", value: "icon" } }, { kind: "Field", name: { kind: "Name", value: "lastUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastAppliedTemplate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "updateReminderFrequencyInWeeks" } }, { kind: "Field", name: { kind: "Name", value: "completedScopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "completedIssueCountHistory" } }, { kind: "Field", name: { kind: "Name", value: "inProgressScopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "progress" } }, { kind: "Field", name: { kind: "Name", value: "scope" } }, { kind: "Field", name: { kind: "Name", value: "priorityLabel" } }, { kind: "Field", name: { kind: "Name", value: "priority" } }, { kind: "Field", name: { kind: "Name", value: "lead" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "convertedFromIssue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "content" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "targetDateResolution" } }, { kind: "Field", name: { kind: "Name", value: "startDateResolution" } }, { kind: "Field", name: { kind: "Name", value: "frequencyResolution" } }, { kind: "Field", name: { kind: "Name", value: "prioritySortOrder" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "status" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "healthUpdatedAt" } }, { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } }, { kind: "Field", name: { kind: "Name", value: "canceledAt" } }, { kind: "Field", name: { kind: "Name", value: "completedAt" } }, { kind: "Field", name: { kind: "Name", value: "startedAt" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdateRemindersPausedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "scopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "issueCountHistory" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "favorite" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "slackIssueComments" } }, { kind: "Field", name: { kind: "Name", value: "slackNewIssue" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueStatuses" } }, { kind: "Field", name: { kind: "Name", value: "state" } }] } }] };
var ya = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Project" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var ga = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectFilterSuggestionPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilterSuggestionPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "filter" } }, { kind: "Field", name: { kind: "Name", value: "logId" } }] } }] };
var Da = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectHistory" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectHistory" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "entries" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
var Va = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectHistoryConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectHistoryConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectHistory" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var _a = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectMilestone" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestone" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "documentContent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "targetDate" } }, { kind: "Field", name: { kind: "Name", value: "progress" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "status" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
var Fa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectMilestoneConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestone" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var Aa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectMilestonePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestonePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "projectMilestone" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var Ta = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var wa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectRelation" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectRelation" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "projectMilestone" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "relatedProjectMilestone" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "relatedProject" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "anchorType" } }, { kind: "Field", name: { kind: "Name", value: "relatedAnchorType" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
var Ia = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectRelationConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectRelationConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectRelation" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var qa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectRelationPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectRelationPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "projectRelation" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var Ca = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectSearchResult" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectSearchResult" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "trashed" } }, { kind: "Field", name: { kind: "Name", value: "labelIds" } }, { kind: "Field", name: { kind: "Name", value: "metadata" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "integrationsSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "documentContent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }] } }, { kind: "Field", name: { kind: "Name", value: "updateRemindersDay" } }, { kind: "Field", name: { kind: "Name", value: "targetDate" } }, { kind: "Field", name: { kind: "Name", value: "startDate" } }, { kind: "Field", name: { kind: "Name", value: "updateReminderFrequency" } }, { kind: "Field", name: { kind: "Name", value: "health" } }, { kind: "Field", name: { kind: "Name", value: "updateRemindersHour" } }, { kind: "Field", name: { kind: "Name", value: "icon" } }, { kind: "Field", name: { kind: "Name", value: "lastUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastAppliedTemplate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "updateReminderFrequencyInWeeks" } }, { kind: "Field", name: { kind: "Name", value: "completedScopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "completedIssueCountHistory" } }, { kind: "Field", name: { kind: "Name", value: "inProgressScopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "progress" } }, { kind: "Field", name: { kind: "Name", value: "scope" } }, { kind: "Field", name: { kind: "Name", value: "priorityLabel" } }, { kind: "Field", name: { kind: "Name", value: "priority" } }, { kind: "Field", name: { kind: "Name", value: "lead" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "convertedFromIssue" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "content" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "targetDateResolution" } }, { kind: "Field", name: { kind: "Name", value: "startDateResolution" } }, { kind: "Field", name: { kind: "Name", value: "frequencyResolution" } }, { kind: "Field", name: { kind: "Name", value: "prioritySortOrder" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "status" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "healthUpdatedAt" } }, { kind: "Field", name: { kind: "Name", value: "autoArchivedAt" } }, { kind: "Field", name: { kind: "Name", value: "canceledAt" } }, { kind: "Field", name: { kind: "Name", value: "completedAt" } }, { kind: "Field", name: { kind: "Name", value: "startedAt" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdateRemindersPausedUntilAt" } }, { kind: "Field", name: { kind: "Name", value: "scopeHistory" } }, { kind: "Field", name: { kind: "Name", value: "issueCountHistory" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "favorite" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "slackIssueComments" } }, { kind: "Field", name: { kind: "Name", value: "slackNewIssue" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueStatuses" } }, { kind: "Field", name: { kind: "Name", value: "state" } }] } }] };
var Pa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectSearchPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectSearchPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "archivePayload" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }] } }, { kind: "Field", name: { kind: "Name", value: "totalCount" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectSearchResult" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var ja = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectStatusConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatus" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var Oa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectStatusPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "status" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var Ua = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectUpdate" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdate" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "reactionData" } }, { kind: "Field", name: { kind: "Name", value: "reactions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }] } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "diffMarkdown" } }, { kind: "Field", name: { kind: "Name", value: "diff" } }, { kind: "Field", name: { kind: "Name", value: "health" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "editedAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "body" } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "isDiffHidden" } }, { kind: "Field", name: { kind: "Name", value: "isStale" } }] } }] };
var xa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectUpdateConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdate" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var Ba = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectUpdatePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdatePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "projectUpdate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var Ra = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectUpdateReminderPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateReminderPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var Ea = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "PushSubscription" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PushSubscription" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
var La = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "PushSubscriptionPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PushSubscriptionPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "entity" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscription" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var za = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "PushSubscriptionTestPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PushSubscriptionTestPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var Ma = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "RateLimitResultPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RateLimitResultPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "period" } }, { kind: "Field", name: { kind: "Name", value: "remainingAmount" } }, { kind: "Field", name: { kind: "Name", value: "requestedAmount" } }, { kind: "Field", name: { kind: "Name", value: "reset" } }, { kind: "Field", name: { kind: "Name", value: "allowedAmount" } }, { kind: "Field", name: { kind: "Name", value: "type" } }] } }] };
var Ha = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "RateLimitPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RateLimitPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "identifier" } }, { kind: "Field", name: { kind: "Name", value: "kind" } }, { kind: "Field", name: { kind: "Name", value: "limits" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RateLimitResultPayload" } }] } }] } }] };
var Wa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ReactionPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ReactionPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "reaction" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Reaction" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var Ga = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Roadmap" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Roadmap" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "slugId" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "owner" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
var Ka = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "RoadmapConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Roadmap" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var Ja = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "RoadmapPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "roadmap" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var $a = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "RoadmapToProject" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProject" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "roadmap" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
var Za = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "RoadmapToProjectConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProjectConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProject" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var Ya = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "RoadmapToProjectPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProjectPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "roadmapToProject" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var Qa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "SlackChannelConnectPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SlackChannelConnectPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "integration" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "nudgeToConnectMainSlackIntegration" } }, { kind: "Field", name: { kind: "Name", value: "nudgeToUpdateMainSlackIntegration" } }, { kind: "Field", name: { kind: "Name", value: "addBot" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var Xa = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "SsoUrlFromEmailResponse" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SsoUrlFromEmailResponse" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "samlSsoUrl" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var et = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "SuccessPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SuccessPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var it = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Team" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Team" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "cycleIssueAutoAssignCompleted" } }, { kind: "Field", name: { kind: "Name", value: "cycleLockToActive" } }, { kind: "Field", name: { kind: "Name", value: "cycleIssueAutoAssignStarted" } }, { kind: "Field", name: { kind: "Name", value: "cycleCalenderUrl" } }, { kind: "Field", name: { kind: "Name", value: "upcomingCycleCount" } }, { kind: "Field", name: { kind: "Name", value: "issueCount" } }, { kind: "Field", name: { kind: "Name", value: "autoArchivePeriod" } }, { kind: "Field", name: { kind: "Name", value: "autoClosePeriod" } }, { kind: "Field", name: { kind: "Name", value: "integrationsSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "activeCycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "triageResponsibility" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "scimGroupName" } }, { kind: "Field", name: { kind: "Name", value: "autoCloseStateId" } }, { kind: "Field", name: { kind: "Name", value: "cycleCooldownTime" } }, { kind: "Field", name: { kind: "Name", value: "cycleStartDay" } }, { kind: "Field", name: { kind: "Name", value: "defaultTemplateForMembers" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "defaultTemplateForNonMembers" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "defaultProjectTemplate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "defaultIssueState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycleDuration" } }, { kind: "Field", name: { kind: "Name", value: "icon" } }, { kind: "Field", name: { kind: "Name", value: "defaultTemplateForMembersId" } }, { kind: "Field", name: { kind: "Name", value: "defaultTemplateForNonMembersId" } }, { kind: "Field", name: { kind: "Name", value: "issueEstimationType" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "displayName" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "key" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "timezone" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "mergeWorkflowState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "draftWorkflowState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "startWorkflowState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "mergeableWorkflowState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "reviewWorkflowState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "markedAsDuplicateWorkflowState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "triageIssueState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "inviteHash" } }, { kind: "Field", name: { kind: "Name", value: "defaultIssueEstimate" } }, { kind: "Field", name: { kind: "Name", value: "setIssueSortOrderOnStateChange" } }, { kind: "Field", name: { kind: "Name", value: "requirePriorityToLeaveTriage" } }, { kind: "Field", name: { kind: "Name", value: "autoCloseChildIssues" } }, { kind: "Field", name: { kind: "Name", value: "autoCloseParentIssues" } }, { kind: "Field", name: { kind: "Name", value: "scimManaged" } }, { kind: "Field", name: { kind: "Name", value: "private" } }, { kind: "Field", name: { kind: "Name", value: "inheritIssueEstimation" } }, { kind: "Field", name: { kind: "Name", value: "inheritWorkflowStatuses" } }, { kind: "Field", name: { kind: "Name", value: "cyclesEnabled" } }, { kind: "Field", name: { kind: "Name", value: "issueEstimationExtended" } }, { kind: "Field", name: { kind: "Name", value: "issueEstimationAllowZero" } }, { kind: "Field", name: { kind: "Name", value: "aiThreadSummariesEnabled" } }, { kind: "Field", name: { kind: "Name", value: "groupIssueHistory" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueComments" } }, { kind: "Field", name: { kind: "Name", value: "slackNewIssue" } }, { kind: "Field", name: { kind: "Name", value: "slackIssueStatuses" } }, { kind: "Field", name: { kind: "Name", value: "triageEnabled" } }, { kind: "Field", name: { kind: "Name", value: "issueOrderingNoPriorityFirst" } }, { kind: "Field", name: { kind: "Name", value: "issueSortOrderDefaultToBottom" } }] } }] };
var nt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TeamConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Team" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var at = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TeamMembership" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamMembership" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "owner" } }] } }] };
var tt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TeamMembershipConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembership" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var dt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TeamMembershipPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "teamMembership" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var lt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TeamPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var rt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Template" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Template" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "templateData" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "inheritedFrom" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastUpdatedBy" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
var mt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TemplateConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TemplateConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Template" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var ot = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TemplatePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TemplatePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "template" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var st = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TimeScheduleEntry" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TimeScheduleEntry" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "userId" } }, { kind: "Field", name: { kind: "Name", value: "userEmail" } }, { kind: "Field", name: { kind: "Name", value: "endsAt" } }, { kind: "Field", name: { kind: "Name", value: "startsAt" } }] } }] };
var ut = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TimeSchedule" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TimeSchedule" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "externalUrl" } }, { kind: "Field", name: { kind: "Name", value: "integration" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "externalId" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "entries" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeScheduleEntry" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
var kt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TimeScheduleConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TimeScheduleConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeSchedule" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var vt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TimeSchedulePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TimeSchedulePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }, { kind: "Field", name: { kind: "Name", value: "timeSchedule" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
var pt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TriageResponsibilityManualSelection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TriageResponsibilityManualSelection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "userIds" } }] } }] };
var ct = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TriageResponsibility" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TriageResponsibility" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "manualSelection" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibilityManualSelection" } }] } }, { kind: "Field", name: { kind: "Name", value: "action" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "timeSchedule" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "currentUser" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
var Nt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TriageResponsibilityConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TriageResponsibilityConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibility" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var ht = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TriageResponsibilityPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TriageResponsibilityPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }, { kind: "Field", name: { kind: "Name", value: "triageResponsibility" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] };
var ft = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UploadFileHeader" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UploadFileHeader" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "key" } }, { kind: "Field", name: { kind: "Name", value: "value" } }] } }] };
var bt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UploadFile" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UploadFile" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "assetUrl" } }, { kind: "Field", name: { kind: "Name", value: "contentType" } }, { kind: "Field", name: { kind: "Name", value: "filename" } }, { kind: "Field", name: { kind: "Name", value: "uploadUrl" } }, { kind: "Field", name: { kind: "Name", value: "size" } }, { kind: "Field", name: { kind: "Name", value: "headers" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UploadFileHeader" } }] } }, { kind: "Field", name: { kind: "Name", value: "metaData" } }] } }] };
var St = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UploadPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UploadPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "uploadFile" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UploadFile" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var yt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UserAdminPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserAdminPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var gt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UserConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var Dt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UserPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var Vt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UserSettingsFlagPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsFlagPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "flag" } }, { kind: "Field", name: { kind: "Name", value: "value" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var _t = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UserSettingsFlagsResetPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsFlagsResetPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var Ft = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UserSettingsPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var At = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ViewPreferencesPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferencesPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "viewPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferences" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var Tt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Webhook" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Webhook" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "secret" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "resourceTypes" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "label" } }, { kind: "Field", name: { kind: "Name", value: "allPublicTeams" } }, { kind: "Field", name: { kind: "Name", value: "enabled" } }] } }] };
var wt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "WebhookConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WebhookConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Webhook" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var It = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "WebhookPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WebhookPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "webhook" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var qt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "WorkflowState" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowState" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "position" } }, { kind: "Field", name: { kind: "Name", value: "inheritedFrom" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "type" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] };
var Ct = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "WorkflowStateConnection" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateConnection" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "nodes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowState" } }] } }, { kind: "Field", name: { kind: "Name", value: "pageInfo" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PageInfo" } }] } }] } }] };
var Pt = { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "WorkflowStatePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStatePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "workflowState" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] };
var jt = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "administrableTeams" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "administrableTeams" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }] } }] } }, ...nt.definitions, ...it.definitions, ...Me.definitions] };
var Ot = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "apiKeys" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "apiKeys" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ApiKeyConnection" } }] } }] } }, ...He.definitions, ...ze.definitions, ...Me.definitions] };
var Ut = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "applicationInfo" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "clientId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "applicationInfo" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "clientId" }, value: { kind: "Variable", name: { kind: "Name", value: "clientId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Application" } }] } }] } }, ...we.definitions] };
var xt = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "applicationWithAuthorization" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "actor" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "clientId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "scope" } }, type: { kind: "NonNullType", type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "applicationWithAuthorization" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "actor" }, value: { kind: "Variable", name: { kind: "Name", value: "actor" } } }, { kind: "Argument", name: { kind: "Name", value: "clientId" }, value: { kind: "Variable", name: { kind: "Name", value: "clientId" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }, { kind: "Argument", name: { kind: "Name", value: "scope" }, value: { kind: "Variable", name: { kind: "Name", value: "scope" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAuthorizedApplication" } }] } }] } }, ...Te.definitions] };
var Bt = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachment" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachment" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Attachment" } }] } }] } }, ...Je.definitions] };
var Rt = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentIssue" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }] } }] } }, ...xn.definitions, ...ai.definitions, ...re.definitions] };
var Et = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentIssue_attachments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }] } }] } }] } }, ...$e.definitions, ...Je.definitions, ...Me.definitions] };
var Lt = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentIssue_botActor" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }] } }] } }, ...re.definitions] };
var zt = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentIssue_children" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "children" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Rn.definitions, ...xn.definitions, ...ai.definitions, ...re.definitions, ...Me.definitions] };
var Mt = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentIssue_comments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }] } }] } }] } }, ...ri.definitions, ...li.definitions, ...ai.definitions, ...re.definitions, ...ti.definitions, ...di.definitions, ...Me.definitions] };
var Ht = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentIssue_history" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "history" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueHistoryConnection" } }] } }] } }] } }, ...Gn.definitions, ...Wn.definitions, ...Ln.definitions, ...zn.definitions, ...re.definitions, ...Mn.definitions, ...Hn.definitions, ...Me.definitions] };
var Wt = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentIssue_inverseRelations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "inverseRelations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }] } }] } }] } }, ...ia.definitions, ...ea.definitions, ...Me.definitions] };
var Gt = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentIssue_labels" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "labels" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }] } }] } }] } }, ...Zn.definitions, ...Hn.definitions, ...Me.definitions] };
var Kt = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentIssue_needs" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "needs" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedConnection" } }] } }] } }] } }, ...yi.definitions, ...Si.definitions, ...Me.definitions] };
var Jt = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentIssue_relations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "relations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }] } }] } }] } }, ...ia.definitions, ...ea.definitions, ...Me.definitions] };
var $t = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentIssue_subscribers" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "subscribers" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeDisabled" }, value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }] } }] } }] } }, ...gt.definitions, ...zn.definitions, ...Me.definitions] };
var Zt = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }] } }] } }, ...$e.definitions, ...Je.definitions, ...Me.definitions] };
var Yt = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "attachmentsForURL" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "url" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentsForURL" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "url" }, value: { kind: "Variable", name: { kind: "Name", value: "url" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }] } }] } }, ...$e.definitions, ...Je.definitions, ...Me.definitions] };
var Qt = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "auditEntries" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "AuditEntryFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "auditEntries" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuditEntryConnection" } }] } }] } }, ...Qe.definitions, ...Ye.definitions, ...Me.definitions] };
var Xt = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "auditEntryTypes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "auditEntryTypes" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuditEntryType" } }] } }] } }, ...Xe.definitions] };
var ed = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "authenticationSessions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "authenticationSessions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthenticationSessionResponse" } }] } }] } }, ...Ae.definitions] };
var id = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "availableUsers" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "availableUsers" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }] } }] } }, ...ni.definitions, ...ii.definitions, ...ei.definitions] };
var nd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "comment" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "hash" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comment" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "hash" }, value: { kind: "Variable", name: { kind: "Name", value: "hash" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Comment" } }] } }] } }, ...li.definitions, ...ai.definitions, ...re.definitions, ...ti.definitions, ...di.definitions] };
var ad = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "comment_botActor" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "hash" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comment" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "hash" }, value: { kind: "Variable", name: { kind: "Name", value: "hash" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }] } }] } }, ...re.definitions] };
var td = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "comment_children" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "hash" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comment" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "hash" }, value: { kind: "Variable", name: { kind: "Name", value: "hash" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "children" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }] } }] } }] } }, ...ri.definitions, ...li.definitions, ...ai.definitions, ...re.definitions, ...ti.definitions, ...di.definitions, ...Me.definitions] };
var dd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "comment_documentContent" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "hash" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comment" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "hash" }, value: { kind: "Variable", name: { kind: "Name", value: "hash" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documentContent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }] } }] } }] } }, ...ti.definitions] };
var ld = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "comment_externalThread" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "hash" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comment" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "hash" }, value: { kind: "Variable", name: { kind: "Name", value: "hash" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "externalThread" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SyncedExternalThread" } }] } }] } }] } }, ...di.definitions] };
var rd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "comments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }] } }] } }, ...ri.definitions, ...li.definitions, ...ai.definitions, ...re.definitions, ...ti.definitions, ...di.definitions, ...Me.definitions] };
var md = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customView" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customView" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomView" } }] } }] } }, ...pi.definitions, ...ki.definitions, ...vi.definitions] };
var od = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customView_issues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "sort" } }, type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueSortInput" } } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customView" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "sort" }, value: { kind: "Variable", name: { kind: "Name", value: "sort" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Rn.definitions, ...xn.definitions, ...ai.definitions, ...re.definitions, ...Me.definitions] };
var sd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customView_organizationViewPreferences" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customView" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationViewPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferences" } }] } }] } }] } }, ...vi.definitions, ...ki.definitions] };
var ud = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customView_organizationViewPreferences_preferences" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customView" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationViewPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "preferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesValues" } }] } }] } }] } }] } }, ...ki.definitions] };
var kd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customView_projects" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customView" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projects" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }] } }] } }] } }, ...ya.definitions, ...Sa.definitions, ...ti.definitions, ...Me.definitions] };
var vd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customView_userViewPreferences" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customView" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userViewPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferences" } }] } }] } }] } }, ...vi.definitions, ...ki.definitions] };
var pd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customView_userViewPreferences_preferences" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customView" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userViewPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "preferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesValues" } }] } }] } }] } }] } }, ...ki.definitions] };
var cd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customView_viewPreferencesValues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customView" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "viewPreferencesValues" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesValues" } }] } }] } }] } }, ...ki.definitions] };
var Nd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customViewHasSubscribers" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customViewHasSubscribers" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomViewHasSubscribersPayload" } }] } }] } }, ...Ni.definitions] };
var hd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customViews" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customViews" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomViewConnection" } }] } }] } }, ...ci.definitions, ...pi.definitions, ...ki.definitions, ...vi.definitions, ...Me.definitions] };
var fd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customer" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customer" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Customer" } }] } }] } }, ...fi.definitions] };
var bd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customerNeed" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "hash" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerNeed" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "hash" }, value: { kind: "Variable", name: { kind: "Name", value: "hash" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeed" } }] } }] } }, ...Si.definitions] };
var Sd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customerNeeds" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerNeeds" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedConnection" } }] } }] } }, ...yi.definitions, ...Si.definitions, ...Me.definitions] };
var yd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customerStatus" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerStatus" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerStatus" } }] } }] } }, ...Vi.definitions] };
var gd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customerStatuses" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerStatuses" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerStatusConnection" } }] } }] } }, ..._i.definitions, ...Vi.definitions, ...Me.definitions] };
var Dd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customerTier" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerTier" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerTier" } }] } }] } }, ...Fi.definitions] };
var Vd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customerTiers" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerTiers" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerTierConnection" } }] } }] } }, ...Ai.definitions, ...Fi.definitions, ...Me.definitions] };
var _d = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "customers" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CustomerFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "sorts" } }, type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CustomerSortInput" } } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customers" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "sorts" }, value: { kind: "Variable", name: { kind: "Name", value: "sorts" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerConnection" } }] } }] } }, ...bi.definitions, ...fi.definitions, ...Me.definitions] };
var Fd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "cycle" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "cycle" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Cycle" } }] } }] } }, ...wi.definitions] };
var Ad = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "cycle_issues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "cycle" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Rn.definitions, ...xn.definitions, ...ai.definitions, ...re.definitions, ...Me.definitions] };
var Td = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "cycle_uncompletedIssuesUponClose" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "cycle" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "uncompletedIssuesUponClose" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Rn.definitions, ...xn.definitions, ...ai.definitions, ...re.definitions, ...Me.definitions] };
var wd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "cycles" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CycleFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "cycles" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CycleConnection" } }] } }] } }, ...Ii.definitions, ...wi.definitions, ...Me.definitions] };
var Id = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "document" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "document" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Document" } }] } }] } }, ...Ci.definitions] };
var qd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "document_comments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "document" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }] } }] } }] } }, ...ri.definitions, ...li.definitions, ...ai.definitions, ...re.definitions, ...ti.definitions, ...di.definitions, ...Me.definitions] };
var Cd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "documentContentHistory" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documentContentHistory" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContentHistoryPayload" } }] } }] } }, ...Oi.definitions, ...ji.definitions] };
var Pd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "documents" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "DocumentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documents" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentConnection" } }] } }] } }, ...Pi.definitions, ...Ci.definitions, ...Me.definitions] };
var jd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "emoji" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emoji" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Emoji" } }] } }] } }, ...Gi.definitions] };
var Od = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "emojis" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emojis" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmojiConnection" } }] } }] } }, ...Ki.definitions, ...Gi.definitions, ...Me.definitions] };
var Ud = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "entityExternalLink" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "entityExternalLink" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EntityExternalLink" } }] } }] } }, ...$i.definitions] };
var xd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "externalUser" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "externalUser" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ExternalUser" } }] } }] } }, ...Qi.definitions] };
var Bd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "externalUsers" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "externalUsers" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ExternalUserConnection" } }] } }] } }, ...Xi.definitions, ...Qi.definitions, ...Me.definitions] };
var Rd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "favorite" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "favorite" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Favorite" } }] } }] } }, ...en.definitions] };
var Ed = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "favorite_children" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "favorite" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "children" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoriteConnection" } }] } }] } }] } }, ...nn.definitions, ...en.definitions, ...Me.definitions] };
var Ld = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "favorites" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "favorites" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoriteConnection" } }] } }] } }, ...nn.definitions, ...en.definitions, ...Me.definitions] };
var zd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "initiative" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiative" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Initiative" } }] } }] } }, ...cn.definitions] };
var Md = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "initiative_history" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiative" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "history" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeHistoryConnection" } }] } }] } }] } }, ...fn.definitions, ...hn.definitions, ...Me.definitions] };
var Hd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "initiative_links" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiative" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "links" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EntityExternalLinkConnection" } }] } }] } }] } }, ...Zi.definitions, ...$i.definitions, ...Me.definitions] };
var Wd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "initiative_projects" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiative" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projects" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }] } }] } }] } }, ...ya.definitions, ...Sa.definitions, ...ti.definitions, ...Me.definitions] };
var Gd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "initiativeRelation" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeRelation" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectRelation" } }] } }] } }, ...wa.definitions] };
var Kd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "initiativeRelations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeRelations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeRelationConnection" } }] } }] } }, ...Sn.definitions, ...bn.definitions, ...Me.definitions] };
var Jd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "initiativeToProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeToProject" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeToProject" } }] } }] } }, ...gn.definitions] };
var $d = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "initiativeToProjects" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeToProjects" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeToProjectConnection" } }] } }] } }, ...Dn.definitions, ...gn.definitions, ...Me.definitions] };
var Zd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "initiativeUpdate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdate" } }] } }] } }, ...Vn.definitions, ...ai.definitions] };
var Yd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "initiativeUpdate_comments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }] } }] } }] } }, ...ri.definitions, ...li.definitions, ...ai.definitions, ...re.definitions, ...ti.definitions, ...di.definitions, ...Me.definitions] };
var Qd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "initiativeUpdates" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeUpdates" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdateConnection" } }] } }] } }, ..._n.definitions, ...Vn.definitions, ...ai.definitions, ...Me.definitions] };
var Xd = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "initiatives" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiatives" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeConnection" } }] } }] } }, ...Nn.definitions, ...cn.definitions, ...Me.definitions] };
var el = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "integration" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integration" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Integration" } }] } }] } }, ...Tn.definitions] };
var il = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "integrationHasScopes" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "integrationId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "scopes" } }, type: { kind: "NonNullType", type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationHasScopes" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "integrationId" }, value: { kind: "Variable", name: { kind: "Name", value: "integrationId" } } }, { kind: "Argument", name: { kind: "Name", value: "scopes" }, value: { kind: "Variable", name: { kind: "Name", value: "scopes" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationHasScopesPayload" } }] } }] } }, ...In.definitions] };
var nl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "integrationTemplate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationTemplate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationTemplate" } }] } }] } }, ...Pn.definitions] };
var al = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "integrationTemplates" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationTemplates" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationTemplateConnection" } }] } }] } }, ...jn.definitions, ...Pn.definitions, ...Me.definitions] };
var tl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "integrations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationConnection" } }] } }] } }, ...wn.definitions, ...Tn.definitions, ...Me.definitions] };
var dl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "integrationsSettings" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationsSettings" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationsSettings" } }] } }] } }, ...Ie.definitions] };
var ll = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }] } }] } }, ...xn.definitions, ...ai.definitions, ...re.definitions] };
var rl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_attachments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }] } }] } }] } }, ...$e.definitions, ...Je.definitions, ...Me.definitions] };
var ml = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_botActor" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }] } }] } }, ...re.definitions] };
var ol = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_children" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "children" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Rn.definitions, ...xn.definitions, ...ai.definitions, ...re.definitions, ...Me.definitions] };
var sl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_comments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }] } }] } }] } }, ...ri.definitions, ...li.definitions, ...ai.definitions, ...re.definitions, ...ti.definitions, ...di.definitions, ...Me.definitions] };
var ul = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_history" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "history" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueHistoryConnection" } }] } }] } }] } }, ...Gn.definitions, ...Wn.definitions, ...Ln.definitions, ...zn.definitions, ...re.definitions, ...Mn.definitions, ...Hn.definitions, ...Me.definitions] };
var kl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_inverseRelations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "inverseRelations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }] } }] } }] } }, ...ia.definitions, ...ea.definitions, ...Me.definitions] };
var vl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_labels" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "labels" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }] } }] } }] } }, ...Zn.definitions, ...Hn.definitions, ...Me.definitions] };
var pl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_needs" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "needs" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedConnection" } }] } }] } }] } }, ...yi.definitions, ...Si.definitions, ...Me.definitions] };
var cl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_relations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "relations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }] } }] } }] } }, ...ia.definitions, ...ea.definitions, ...Me.definitions] };
var Nl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issue_subscribers" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "subscribers" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeDisabled" }, value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }] } }] } }] } }, ...gt.definitions, ...zn.definitions, ...Me.definitions] };
var hl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueFigmaFileKeySearch" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "fileKey" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueFigmaFileKeySearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "fileKey" }, value: { kind: "Variable", name: { kind: "Name", value: "fileKey" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }, ...Rn.definitions, ...xn.definitions, ...ai.definitions, ...re.definitions, ...Me.definitions] };
var fl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueFilterSuggestion" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "projectId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "prompt" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueFilterSuggestion" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "projectId" }, value: { kind: "Variable", name: { kind: "Name", value: "projectId" } } }, { kind: "Argument", name: { kind: "Name", value: "prompt" }, value: { kind: "Variable", name: { kind: "Name", value: "prompt" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueFilterSuggestionPayload" } }] } }] } }, ...En.definitions] };
var bl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueImportCheckCSV" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "csvUrl" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "service" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportCheckCSV" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "csvUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "csvUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "service" }, value: { kind: "Variable", name: { kind: "Name", value: "service" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportCheckPayload" } }] } }] } }, ...Kn.definitions] };
var Sl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueImportCheckSync" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportCheckSync" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "issueImportId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportSyncCheckPayload" } }] } }] } }, ...Le.definitions] };
var yl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueImportJqlCheck" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraProject" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jql" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportJqlCheck" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "jiraEmail" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } } }, { kind: "Argument", name: { kind: "Name", value: "jiraHostname" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } } }, { kind: "Argument", name: { kind: "Name", value: "jiraProject" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraProject" } } }, { kind: "Argument", name: { kind: "Name", value: "jiraToken" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } } }, { kind: "Argument", name: { kind: "Name", value: "jql" }, value: { kind: "Variable", name: { kind: "Name", value: "jql" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportJqlCheckPayload" } }] } }] } }, ...Ee.definitions] };
var gl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueLabel" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueLabel" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabel" } }] } }] } }, ...Hn.definitions] };
var Dl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueLabel_children" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueLabel" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "children" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }] } }] } }] } }, ...Zn.definitions, ...Hn.definitions, ...Me.definitions] };
var Vl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueLabel_issues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueLabel" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Rn.definitions, ...xn.definitions, ...ai.definitions, ...re.definitions, ...Me.definitions] };
var _l = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueLabels" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueLabels" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }] } }] } }, ...Zn.definitions, ...Hn.definitions, ...Me.definitions] };
var Fl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issuePriorityValues" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issuePriorityValues" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePriorityValue" } }] } }] } }, ...Xn.definitions] };
var Al = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueRelation" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueRelation" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelation" } }] } }] } }, ...ea.definitions] };
var Tl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueRelations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueRelations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }] } }] } }, ...ia.definitions, ...ea.definitions, ...Me.definitions] };
var wl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueSearch" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "query" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "query" }, value: { kind: "Variable", name: { kind: "Name", value: "query" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }, ...Rn.definitions, ...xn.definitions, ...ai.definitions, ...re.definitions, ...Me.definitions] };
var Il = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueTitleSuggestionFromCustomerRequest" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "request" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueTitleSuggestionFromCustomerRequest" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "request" }, value: { kind: "Variable", name: { kind: "Name", value: "request" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueTitleSuggestionFromCustomerRequestPayload" } }] } }] } }, ...da.definitions] };
var ql = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueVcsBranchSearch" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueVcsBranchSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "branchName" }, value: { kind: "Variable", name: { kind: "Name", value: "branchName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Issue" } }] } }] } }, ...xn.definitions, ...ai.definitions, ...re.definitions] };
var Cl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueVcsBranchSearch_attachments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueVcsBranchSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "branchName" }, value: { kind: "Variable", name: { kind: "Name", value: "branchName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentConnection" } }] } }] } }] } }, ...$e.definitions, ...Je.definitions, ...Me.definitions] };
var Pl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueVcsBranchSearch_botActor" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueVcsBranchSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "branchName" }, value: { kind: "Variable", name: { kind: "Name", value: "branchName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "botActor" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ActorBot" } }] } }] } }] } }, ...re.definitions] };
var jl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueVcsBranchSearch_children" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueVcsBranchSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "branchName" }, value: { kind: "Variable", name: { kind: "Name", value: "branchName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "children" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Rn.definitions, ...xn.definitions, ...ai.definitions, ...re.definitions, ...Me.definitions] };
var Ol = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueVcsBranchSearch_comments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueVcsBranchSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "branchName" }, value: { kind: "Variable", name: { kind: "Name", value: "branchName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }] } }] } }] } }, ...ri.definitions, ...li.definitions, ...ai.definitions, ...re.definitions, ...ti.definitions, ...di.definitions, ...Me.definitions] };
var Ul = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueVcsBranchSearch_history" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueVcsBranchSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "branchName" }, value: { kind: "Variable", name: { kind: "Name", value: "branchName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "history" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueHistoryConnection" } }] } }] } }] } }, ...Gn.definitions, ...Wn.definitions, ...Ln.definitions, ...zn.definitions, ...re.definitions, ...Mn.definitions, ...Hn.definitions, ...Me.definitions] };
var xl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueVcsBranchSearch_inverseRelations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueVcsBranchSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "branchName" }, value: { kind: "Variable", name: { kind: "Name", value: "branchName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "inverseRelations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }] } }] } }] } }, ...ia.definitions, ...ea.definitions, ...Me.definitions] };
var Bl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueVcsBranchSearch_labels" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueVcsBranchSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "branchName" }, value: { kind: "Variable", name: { kind: "Name", value: "branchName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "labels" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }] } }] } }] } }, ...Zn.definitions, ...Hn.definitions, ...Me.definitions] };
var Rl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueVcsBranchSearch_needs" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueVcsBranchSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "branchName" }, value: { kind: "Variable", name: { kind: "Name", value: "branchName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "needs" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedConnection" } }] } }] } }] } }, ...yi.definitions, ...Si.definitions, ...Me.definitions] };
var El = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueVcsBranchSearch_relations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueVcsBranchSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "branchName" }, value: { kind: "Variable", name: { kind: "Name", value: "branchName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "relations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationConnection" } }] } }] } }] } }, ...ia.definitions, ...ea.definitions, ...Me.definitions] };
var Ll = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issueVcsBranchSearch_subscribers" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "branchName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueVcsBranchSearch" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "branchName" }, value: { kind: "Variable", name: { kind: "Name", value: "branchName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "subscribers" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeDisabled" }, value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }] } }] } }] } }, ...gt.definitions, ...zn.definitions, ...Me.definitions] };
var zl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "issues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "sort" } }, type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueSortInput" } } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "sort" }, value: { kind: "Variable", name: { kind: "Name", value: "sort" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }, ...Rn.definitions, ...xn.definitions, ...ai.definitions, ...re.definitions, ...Me.definitions] };
var Ml = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "notification" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notification" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Notification" } }] } }] } }, ...ce.definitions, ...re.definitions, ...me.definitions, ...oe.definitions, ...ue.definitions, ...se.definitions, ...ve.definitions, ...ke.definitions, ...pe.definitions] };
var Hl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "notificationSubscription" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationSubscription" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscription" } }] } }] } }, ...se.definitions] };
var Wl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "notificationSubscriptions" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationSubscriptions" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscriptionConnection" } }] } }] } }, ...sa.definitions, ...se.definitions, ...Me.definitions] };
var Gl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "notifications" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "NotificationFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notifications" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationConnection" } }] } }] } }, ...ma.definitions, ...ce.definitions, ...re.definitions, ...me.definitions, ...oe.definitions, ...ue.definitions, ...se.definitions, ...ve.definitions, ...ke.definitions, ...pe.definitions, ...Me.definitions] };
var Kl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Organization" } }] } }] } }, ...Fe.definitions, ...De.definitions, ...Ve.definitions, ..._e.definitions] };
var Jl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organization_integrations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationConnection" } }] } }] } }] } }, ...wn.definitions, ...Tn.definitions, ...Me.definitions] };
var $l = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organization_labels" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "labels" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }] } }] } }] } }, ...Zn.definitions, ...Hn.definitions, ...Me.definitions] };
var Zl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organization_subscription" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "subscription" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PaidSubscription" } }] } }] } }] } }, ..._e.definitions] };
var Yl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organization_teams" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teams" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }] } }] } }] } }, ...nt.definitions, ...it.definitions, ...Me.definitions] };
var Ql = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organization_templates" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "NullableTemplateFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "templates" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplateConnection" } }] } }] } }] } }, ...mt.definitions, ...rt.definitions, ...Me.definitions] };
var Xl = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organization_users" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organization" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "users" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeDisabled" }, value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }] } }] } }] } }, ...gt.definitions, ...zn.definitions, ...Me.definitions] };
var er = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organizationExists" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "urlKey" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationExists" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "urlKey" }, value: { kind: "Variable", name: { kind: "Name", value: "urlKey" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationExistsPayload" } }] } }] } }, ...pa.definitions] };
var ir = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organizationInvite" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationInvite" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInvite" } }] } }] } }, ...ca.definitions] };
var nr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "organizationInvites" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationInvites" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInviteConnection" } }] } }] } }, ...Na.definitions, ...ca.definitions, ...Me.definitions] };
var ar = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Project" } }] } }] } }, ...Sa.definitions, ...ti.definitions] };
var tr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_comments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }] } }] } }] } }, ...ri.definitions, ...li.definitions, ...ai.definitions, ...re.definitions, ...ti.definitions, ...di.definitions, ...Me.definitions] };
var dr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_documentContent" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documentContent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }] } }] } }] } }, ...ti.definitions] };
var lr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_documents" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "DocumentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documents" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentConnection" } }] } }] } }] } }, ...Pi.definitions, ...Ci.definitions, ...Me.definitions] };
var rr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_externalLinks" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "externalLinks" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EntityExternalLinkConnection" } }] } }] } }] } }, ...Zi.definitions, ...$i.definitions, ...Me.definitions] };
var mr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_history" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "history" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectHistoryConnection" } }] } }] } }] } }, ...Va.definitions, ...Da.definitions, ...Me.definitions] };
var or = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_initiatives" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiatives" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeConnection" } }] } }] } }] } }, ...Nn.definitions, ...cn.definitions, ...Me.definitions] };
var sr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_inverseRelations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "inverseRelations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectRelationConnection" } }] } }] } }] } }, ...Ia.definitions, ...wa.definitions, ...Me.definitions] };
var ur = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_issues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Rn.definitions, ...xn.definitions, ...ai.definitions, ...re.definitions, ...Me.definitions] };
var kr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_members" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "members" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeDisabled" }, value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }] } }] } }] } }, ...gt.definitions, ...zn.definitions, ...Me.definitions] };
var vr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_needs" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "needs" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedConnection" } }] } }] } }] } }, ...yi.definitions, ...Si.definitions, ...Me.definitions] };
var pr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_projectMilestones" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectMilestones" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestoneConnection" } }] } }] } }] } }, ...Fa.definitions, ..._a.definitions, ...ti.definitions, ...Me.definitions] };
var cr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_projectUpdates" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdates" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateConnection" } }] } }] } }] } }, ...xa.definitions, ...Ua.definitions, ...ai.definitions, ...Me.definitions] };
var Nr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_relations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "relations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectRelationConnection" } }] } }] } }] } }, ...Ia.definitions, ...wa.definitions, ...Me.definitions] };
var hr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "project_teams" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "project" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teams" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }] } }] } }] } }, ...nt.definitions, ...it.definitions, ...Me.definitions] };
var fr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectFilterSuggestion" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "prompt" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectFilterSuggestion" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "prompt" }, value: { kind: "Variable", name: { kind: "Name", value: "prompt" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectFilterSuggestionPayload" } }] } }] } }, ...ga.definitions] };
var br = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectMilestone" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectMilestone" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestone" } }] } }] } }, ..._a.definitions, ...ti.definitions] };
var Sr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectMilestone_documentContent" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectMilestone" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documentContent" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentContent" } }] } }] } }] } }, ...ti.definitions] };
var yr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectMilestone_issues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectMilestone" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Rn.definitions, ...xn.definitions, ...ai.definitions, ...re.definitions, ...Me.definitions] };
var gr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectMilestones" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectMilestones" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestoneConnection" } }] } }] } }, ...Fa.definitions, ..._a.definitions, ...ti.definitions, ...Me.definitions] };
var Dr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectRelation" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectRelation" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectRelation" } }] } }] } }, ...wa.definitions] };
var Vr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectRelations" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectRelations" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectRelationConnection" } }] } }] } }, ...Ia.definitions, ...wa.definitions, ...Me.definitions] };
var _r = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectStatus" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectStatus" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatus" } }] } }] } }, ...Ve.definitions] };
var Fr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectStatuses" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectStatuses" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatusConnection" } }] } }] } }, ...ja.definitions, ...Ve.definitions, ...Me.definitions] };
var Ar = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectUpdate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdate" } }] } }] } }, ...Ua.definitions, ...ai.definitions] };
var Tr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectUpdate_comments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CommentFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "comments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentConnection" } }] } }] } }] } }, ...ri.definitions, ...li.definitions, ...ai.definitions, ...re.definitions, ...ti.definitions, ...di.definitions, ...Me.definitions] };
var wr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projectUpdates" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdates" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateConnection" } }] } }] } }, ...xa.definitions, ...Ua.definitions, ...ai.definitions, ...Me.definitions] };
var Ir = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "projects" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projects" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }] } }] } }, ...ya.definitions, ...Sa.definitions, ...ti.definitions, ...Me.definitions] };
var qr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "pushSubscriptionTest" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "sendStrategy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "SendStrategy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "targetMobile" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "pushSubscriptionTest" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "sendStrategy" }, value: { kind: "Variable", name: { kind: "Name", value: "sendStrategy" } } }, { kind: "Argument", name: { kind: "Name", value: "targetMobile" }, value: { kind: "Variable", name: { kind: "Name", value: "targetMobile" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscriptionTestPayload" } }] } }] } }, ...za.definitions] };
var Cr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "rateLimitStatus" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "rateLimitStatus" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RateLimitPayload" } }] } }] } }, ...Ha.definitions, ...Ma.definitions] };
var Pr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "roadmap" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmap" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Roadmap" } }] } }] } }, ...Ga.definitions] };
var jr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "roadmap_projects" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmap" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projects" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }] } }] } }] } }, ...ya.definitions, ...Sa.definitions, ...ti.definitions, ...Me.definitions] };
var Or = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "roadmapToProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapToProject" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProject" } }] } }] } }, ...$a.definitions] };
var Ur = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "roadmapToProjects" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapToProjects" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProjectConnection" } }] } }] } }, ...Za.definitions, ...$a.definitions, ...Me.definitions] };
var xr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "roadmaps" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmaps" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapConnection" } }] } }] } }, ...Ka.definitions, ...Ga.definitions, ...Me.definitions] };
var Br = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "searchDocuments" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "term" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "searchDocuments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeComments" }, value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "term" }, value: { kind: "Variable", name: { kind: "Name", value: "term" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentSearchPayload" } }] } }] } }, ...Ri.definitions, ...xi.definitions, ...Bi.definitions, ...Me.definitions] };
var Rr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "searchDocuments_archivePayload" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "term" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "searchDocuments" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeComments" }, value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "term" }, value: { kind: "Variable", name: { kind: "Name", value: "term" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "archivePayload" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }] } }] } }] } }, ...xi.definitions] };
var Er = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "searchIssues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "term" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "searchIssues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeComments" }, value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "term" }, value: { kind: "Variable", name: { kind: "Name", value: "term" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueSearchPayload" } }] } }] } }, ...ta.definitions, ...xi.definitions, ...aa.definitions, ...ai.definitions, ...re.definitions, ...Me.definitions] };
var Lr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "searchIssues_archivePayload" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "term" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "searchIssues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeComments" }, value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "term" }, value: { kind: "Variable", name: { kind: "Name", value: "term" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "archivePayload" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }] } }] } }] } }, ...xi.definitions] };
var zr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "searchProjects" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "term" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "searchProjects" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeComments" }, value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "term" }, value: { kind: "Variable", name: { kind: "Name", value: "term" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectSearchPayload" } }] } }] } }, ...Pa.definitions, ...xi.definitions, ...Ca.definitions, ...ti.definitions, ...Me.definitions] };
var Mr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "searchProjects_archivePayload" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeComments" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "term" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "searchProjects" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeComments" }, value: { kind: "Variable", name: { kind: "Name", value: "includeComments" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "term" }, value: { kind: "Variable", name: { kind: "Name", value: "term" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "archivePayload" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ArchiveResponse" } }] } }] } }] } }, ...xi.definitions] };
var Hr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "ssoUrlFromEmail" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "email" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "isDesktop" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "ssoUrlFromEmail" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "email" }, value: { kind: "Variable", name: { kind: "Name", value: "email" } } }, { kind: "Argument", name: { kind: "Name", value: "isDesktop" }, value: { kind: "Variable", name: { kind: "Name", value: "isDesktop" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SsoUrlFromEmailResponse" } }] } }] } }, ...Xa.definitions] };
var Wr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Team" } }] } }] } }, ...it.definitions] };
var Gr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_cycles" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "CycleFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "cycles" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CycleConnection" } }] } }] } }] } }, ...Ii.definitions, ...wi.definitions, ...Me.definitions] };
var Kr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_gitAutomationStates" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "gitAutomationStates" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationStateConnection" } }] } }] } }] } }, ...rn.definitions, ...ln.definitions, ...dn.definitions, ...Me.definitions] };
var Jr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_issues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeSubTeams" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeSubTeams" }, value: { kind: "Variable", name: { kind: "Name", value: "includeSubTeams" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Rn.definitions, ...xn.definitions, ...ai.definitions, ...re.definitions, ...Me.definitions] };
var $r = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_labels" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "labels" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelConnection" } }] } }] } }] } }, ...Zn.definitions, ...Hn.definitions, ...Me.definitions] };
var Zr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_members" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "members" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeDisabled" }, value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }] } }] } }] } }, ...gt.definitions, ...zn.definitions, ...Me.definitions] };
var Yr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_memberships" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "memberships" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }] } }] } }] } }, ...tt.definitions, ...at.definitions, ...Me.definitions] };
var Qr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_projects" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "ProjectFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeSubTeams" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projects" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeSubTeams" }, value: { kind: "Variable", name: { kind: "Name", value: "includeSubTeams" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectConnection" } }] } }] } }] } }, ...ya.definitions, ...Sa.definitions, ...ti.definitions, ...Me.definitions] };
var Xr = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_states" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "states" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStateConnection" } }] } }] } }] } }, ...Ct.definitions, ...qt.definitions, ...Me.definitions] };
var em = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_templates" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "NullableTemplateFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "templates" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplateConnection" } }] } }] } }] } }, ...mt.definitions, ...rt.definitions, ...Me.definitions] };
var im = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "team_webhooks" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "team" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "webhooks" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookConnection" } }] } }] } }] } }, ...wt.definitions, ...Tt.definitions, ...Me.definitions] };
var nm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "teamMembership" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamMembership" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembership" } }] } }] } }, ...at.definitions] };
var am = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "teamMemberships" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamMemberships" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }] } }] } }, ...tt.definitions, ...at.definitions, ...Me.definitions] };
var tm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "teams" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teams" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }] } }] } }, ...nt.definitions, ...it.definitions, ...Me.definitions] };
var dm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "template" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "template" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Template" } }] } }] } }, ...rt.definitions] };
var lm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "templates" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "templates" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Template" } }] } }] } }, ...rt.definitions] };
var rm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "templatesForIntegration" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "integrationType" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "templatesForIntegration" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "integrationType" }, value: { kind: "Variable", name: { kind: "Name", value: "integrationType" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Template" } }] } }] } }, ...rt.definitions] };
var mm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "timeSchedule" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "timeSchedule" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeSchedule" } }] } }] } }, ...ut.definitions, ...st.definitions] };
var om = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "timeSchedules" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "timeSchedules" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeScheduleConnection" } }] } }] } }, ...kt.definitions, ...ut.definitions, ...st.definitions, ...Me.definitions] };
var sm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "triageResponsibilities" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "triageResponsibilities" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibilityConnection" } }] } }] } }, ...Nt.definitions, ...ct.definitions, ...pt.definitions, ...Me.definitions] };
var um = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "triageResponsibility" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "triageResponsibility" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibility" } }] } }] } }, ...ct.definitions, ...pt.definitions] };
var km = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "triageResponsibility_manualSelection" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "triageResponsibility" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "manualSelection" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibilityManualSelection" } }] } }] } }] } }, ...pt.definitions] };
var vm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "user" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "user" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }] } }] } }, ...zn.definitions] };
var pm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "user_assignedIssues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "user" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "assignedIssues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Rn.definitions, ...xn.definitions, ...ai.definitions, ...re.definitions, ...Me.definitions] };
var cm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "user_createdIssues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "user" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "createdIssues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Rn.definitions, ...xn.definitions, ...ai.definitions, ...re.definitions, ...Me.definitions] };
var Nm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "user_drafts" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "user" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "drafts" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DraftConnection" } }] } }] } }] } }, ...Li.definitions, ...Ei.definitions, ...Me.definitions] };
var hm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "user_teamMemberships" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "user" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamMemberships" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }] } }] } }] } }, ...tt.definitions, ...at.definitions, ...Me.definitions] };
var fm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "user_teams" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "user" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teams" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }] } }] } }] } }, ...nt.definitions, ...it.definitions, ...Me.definitions] };
var bm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettings" } }] } }] } }, ...Re.definitions, ...Ue.definitions, ...Oe.definitions, ...je.definitions, ...Pe.definitions, ...Be.definitions, ...xe.definitions] };
var Sm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationCategoryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationCategoryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationCategoryPreferences" } }] } }] } }] } }, ...Be.definitions, ...xe.definitions] };
var ym = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_appsAndIntegrations" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationCategoryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "appsAndIntegrations" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }] } }] } }] } }, ...xe.definitions] };
var gm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_assignments" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationCategoryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "assignments" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }] } }] } }] } }, ...xe.definitions] };
var Dm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_commentsAndReplies" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationCategoryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "commentsAndReplies" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }] } }] } }] } }, ...xe.definitions] };
var Vm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_customers" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationCategoryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customers" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }] } }] } }] } }, ...xe.definitions] };
var _m = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_documentChanges" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationCategoryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documentChanges" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }] } }] } }] } }, ...xe.definitions] };
var Fm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_mentions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationCategoryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "mentions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }] } }] } }] } }, ...xe.definitions] };
var Am = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_postsAndUpdates" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationCategoryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "postsAndUpdates" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }] } }] } }] } }, ...xe.definitions] };
var Tm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_reactions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationCategoryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "reactions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }] } }] } }] } }, ...xe.definitions] };
var wm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_reminders" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationCategoryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "reminders" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }] } }] } }] } }, ...xe.definitions] };
var Im = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_reviews" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationCategoryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "reviews" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }] } }] } }] } }, ...xe.definitions] };
var qm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_statusChanges" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationCategoryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "statusChanges" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }] } }] } }] } }, ...xe.definitions] };
var Cm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_subscriptions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationCategoryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "subscriptions" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }] } }] } }] } }, ...xe.definitions] };
var Pm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_system" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationCategoryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "system" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }] } }] } }] } }, ...xe.definitions] };
var jm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationCategoryPreferences_triage" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationCategoryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "triage" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }] } }] } }] } }, ...xe.definitions] };
var Om = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationChannelPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationChannelPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationChannelPreferences" } }] } }] } }] } }, ...xe.definitions] };
var Um = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationDeliveryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferences" } }] } }] } }] } }, ...Ue.definitions, ...Oe.definitions, ...je.definitions, ...Pe.definitions] };
var xm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationDeliveryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "mobile" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesChannel" } }] } }] } }] } }] } }, ...Oe.definitions, ...je.definitions, ...Pe.definitions] };
var Bm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationDeliveryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "mobile" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "schedule" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesSchedule" } }] } }] } }] } }] } }] } }, ...je.definitions, ...Pe.definitions] };
var Rm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_friday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationDeliveryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "mobile" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "schedule" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "friday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }] } }] } }] } }] } }] } }, ...Pe.definitions] };
var Em = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_monday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationDeliveryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "mobile" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "schedule" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "monday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }] } }] } }] } }] } }] } }, ...Pe.definitions] };
var Lm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_saturday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationDeliveryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "mobile" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "schedule" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "saturday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }] } }] } }] } }] } }] } }, ...Pe.definitions] };
var zm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_sunday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationDeliveryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "mobile" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "schedule" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "sunday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }] } }] } }] } }] } }] } }, ...Pe.definitions] };
var Mm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_thursday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationDeliveryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "mobile" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "schedule" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "thursday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }] } }] } }] } }] } }] } }, ...Pe.definitions] };
var Hm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_tuesday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationDeliveryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "mobile" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "schedule" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "tuesday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }] } }] } }] } }] } }] } }, ...Pe.definitions] };
var Wm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "userSettings_notificationDeliveryPreferences_mobile_schedule_wednesday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettings" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationDeliveryPreferences" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "mobile" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "schedule" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "wednesday" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationDeliveryPreferencesDay" } }] } }] } }] } }] } }] } }] } }, ...Pe.definitions] };
var Gm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "users" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "UserFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "users" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "includeDisabled" }, value: { kind: "Variable", name: { kind: "Name", value: "includeDisabled" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserConnection" } }] } }] } }, ...gt.definitions, ...zn.definitions, ...Me.definitions] };
var Km = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "verifyGitHubEnterpriseServerInstallation" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "verifyGitHubEnterpriseServerInstallation" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitHubEnterpriseServerInstallVerificationPayload" } }] } }] } }, ...un.definitions] };
var Jm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "viewer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "viewer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "User" } }] } }] } }, ...zn.definitions] };
var $m = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "viewer_assignedIssues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "viewer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "assignedIssues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Rn.definitions, ...xn.definitions, ...ai.definitions, ...re.definitions, ...Me.definitions] };
var Zm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "viewer_createdIssues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "viewer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "createdIssues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Rn.definitions, ...xn.definitions, ...ai.definitions, ...re.definitions, ...Me.definitions] };
var Ym = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "viewer_drafts" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "viewer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "drafts" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DraftConnection" } }] } }] } }] } }, ...Li.definitions, ...Ei.definitions, ...Me.definitions] };
var Qm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "viewer_teamMemberships" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "viewer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamMemberships" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipConnection" } }] } }] } }] } }, ...tt.definitions, ...at.definitions, ...Me.definitions] };
var Xm = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "viewer_teams" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "TeamFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "viewer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teams" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamConnection" } }] } }] } }] } }, ...nt.definitions, ...it.definitions, ...Me.definitions] };
var eo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "webhook" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "webhook" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "Webhook" } }] } }] } }, ...Tt.definitions] };
var io = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "webhooks" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "webhooks" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookConnection" } }] } }] } }, ...wt.definitions, ...Tt.definitions, ...Me.definitions] };
var no = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "workflowState" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "workflowState" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowState" } }] } }] } }, ...qt.definitions] };
var ao = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "workflowState_issues" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "IssueFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "workflowState" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issues" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueConnection" } }] } }] } }] } }, ...Rn.definitions, ...xn.definitions, ...ai.definitions, ...re.definitions, ...Me.definitions] };
var to = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "query", name: { kind: "Name", value: "workflowStates" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "after" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "before" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filter" } }, type: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateFilter" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "first" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "last" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "orderBy" } }, type: { kind: "NamedType", name: { kind: "Name", value: "PaginationOrderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "workflowStates" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "after" }, value: { kind: "Variable", name: { kind: "Name", value: "after" } } }, { kind: "Argument", name: { kind: "Name", value: "before" }, value: { kind: "Variable", name: { kind: "Name", value: "before" } } }, { kind: "Argument", name: { kind: "Name", value: "filter" }, value: { kind: "Variable", name: { kind: "Name", value: "filter" } } }, { kind: "Argument", name: { kind: "Name", value: "first" }, value: { kind: "Variable", name: { kind: "Name", value: "first" } } }, { kind: "Argument", name: { kind: "Name", value: "includeArchived" }, value: { kind: "Variable", name: { kind: "Name", value: "includeArchived" } } }, { kind: "Argument", name: { kind: "Name", value: "last" }, value: { kind: "Variable", name: { kind: "Name", value: "last" } } }, { kind: "Argument", name: { kind: "Name", value: "orderBy" }, value: { kind: "Variable", name: { kind: "Name", value: "orderBy" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStateConnection" } }] } }] } }, ...Ct.definitions, ...qt.definitions, ...Me.definitions] };
var lo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "airbyteIntegrationConnect" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "AirbyteConfigurationInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "airbyteIntegrationConnect" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...qn.definitions] };
var ro = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createAttachment" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...Ze.definitions] };
var mo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteAttachment" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var oo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkDiscord" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "channelId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "messageId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "title" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "url" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkDiscord" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "channelId" }, value: { kind: "Variable", name: { kind: "Name", value: "channelId" } } }, { kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }, { kind: "Argument", name: { kind: "Name", value: "messageId" }, value: { kind: "Variable", name: { kind: "Name", value: "messageId" } } }, { kind: "Argument", name: { kind: "Name", value: "title" }, value: { kind: "Variable", name: { kind: "Name", value: "title" } } }, { kind: "Argument", name: { kind: "Name", value: "url" }, value: { kind: "Variable", name: { kind: "Name", value: "url" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...Ze.definitions] };
var so = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkFront" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "conversationId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "title" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkFront" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "conversationId" }, value: { kind: "Variable", name: { kind: "Name", value: "conversationId" } } }, { kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }, { kind: "Argument", name: { kind: "Name", value: "title" }, value: { kind: "Variable", name: { kind: "Name", value: "title" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FrontAttachmentPayload" } }] } }] } }, ...tn.definitions] };
var uo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkGitHubIssue" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "title" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "url" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkGitHubIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }, { kind: "Argument", name: { kind: "Name", value: "title" }, value: { kind: "Variable", name: { kind: "Name", value: "title" } } }, { kind: "Argument", name: { kind: "Name", value: "url" }, value: { kind: "Variable", name: { kind: "Name", value: "url" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...Ze.definitions] };
var ko = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkGitHubPR" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "linkKind" } }, type: { kind: "NamedType", name: { kind: "Name", value: "GitLinkKind" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "title" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "url" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkGitHubPR" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }, { kind: "Argument", name: { kind: "Name", value: "linkKind" }, value: { kind: "Variable", name: { kind: "Name", value: "linkKind" } } }, { kind: "Argument", name: { kind: "Name", value: "title" }, value: { kind: "Variable", name: { kind: "Name", value: "title" } } }, { kind: "Argument", name: { kind: "Name", value: "url" }, value: { kind: "Variable", name: { kind: "Name", value: "url" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...Ze.definitions] };
var vo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkGitLabMR" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "number" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Float" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "projectPathWithNamespace" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "title" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "url" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkGitLabMR" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }, { kind: "Argument", name: { kind: "Name", value: "number" }, value: { kind: "Variable", name: { kind: "Name", value: "number" } } }, { kind: "Argument", name: { kind: "Name", value: "projectPathWithNamespace" }, value: { kind: "Variable", name: { kind: "Name", value: "projectPathWithNamespace" } } }, { kind: "Argument", name: { kind: "Name", value: "title" }, value: { kind: "Variable", name: { kind: "Name", value: "title" } } }, { kind: "Argument", name: { kind: "Name", value: "url" }, value: { kind: "Variable", name: { kind: "Name", value: "url" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...Ze.definitions] };
var po = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkIntercom" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "conversationId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "partId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "title" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkIntercom" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "conversationId" }, value: { kind: "Variable", name: { kind: "Name", value: "conversationId" } } }, { kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }, { kind: "Argument", name: { kind: "Name", value: "partId" }, value: { kind: "Variable", name: { kind: "Name", value: "partId" } } }, { kind: "Argument", name: { kind: "Name", value: "title" }, value: { kind: "Variable", name: { kind: "Name", value: "title" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...Ze.definitions] };
var co = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkJiraIssue" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraIssueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "title" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "url" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkJiraIssue" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }, { kind: "Argument", name: { kind: "Name", value: "jiraIssueId" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraIssueId" } } }, { kind: "Argument", name: { kind: "Name", value: "title" }, value: { kind: "Variable", name: { kind: "Name", value: "title" } } }, { kind: "Argument", name: { kind: "Name", value: "url" }, value: { kind: "Variable", name: { kind: "Name", value: "url" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...Ze.definitions] };
var No = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkSlack" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "syncToCommentThread" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "title" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "url" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkSlack" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }, { kind: "Argument", name: { kind: "Name", value: "syncToCommentThread" }, value: { kind: "Variable", name: { kind: "Name", value: "syncToCommentThread" } } }, { kind: "Argument", name: { kind: "Name", value: "title" }, value: { kind: "Variable", name: { kind: "Name", value: "title" } } }, { kind: "Argument", name: { kind: "Name", value: "url" }, value: { kind: "Variable", name: { kind: "Name", value: "url" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...Ze.definitions] };
var ho = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkURL" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "title" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "url" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkURL" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }, { kind: "Argument", name: { kind: "Name", value: "title" }, value: { kind: "Variable", name: { kind: "Name", value: "title" } } }, { kind: "Argument", name: { kind: "Name", value: "url" }, value: { kind: "Variable", name: { kind: "Name", value: "url" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...Ze.definitions] };
var fo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentLinkZendesk" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "ticketId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "title" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "url" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentLinkZendesk" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "createAsUser" }, value: { kind: "Variable", name: { kind: "Name", value: "createAsUser" } } }, { kind: "Argument", name: { kind: "Name", value: "displayIconUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "displayIconUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "issueId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueId" } } }, { kind: "Argument", name: { kind: "Name", value: "ticketId" }, value: { kind: "Variable", name: { kind: "Name", value: "ticketId" } } }, { kind: "Argument", name: { kind: "Name", value: "title" }, value: { kind: "Variable", name: { kind: "Name", value: "title" } } }, { kind: "Argument", name: { kind: "Name", value: "url" }, value: { kind: "Variable", name: { kind: "Name", value: "url" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...Ze.definitions] };
var bo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "attachmentSyncToSlack" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentSyncToSlack" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...Ze.definitions] };
var So = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateAttachment" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "AttachmentUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "attachmentUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AttachmentPayload" } }] } }] } }, ...Ze.definitions] };
var yo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createComment" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CommentCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "commentCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentPayload" } }] } }] } }, ...mi.definitions] };
var go = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteComment" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "commentDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var Do = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "commentResolve" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "resolvingCommentId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "commentResolve" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "resolvingCommentId" }, value: { kind: "Variable", name: { kind: "Name", value: "resolvingCommentId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentPayload" } }] } }] } }, ...mi.definitions] };
var Vo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "commentUnresolve" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "commentUnresolve" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentPayload" } }] } }] } }, ...mi.definitions] };
var _o = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateComment" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CommentUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "commentUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CommentPayload" } }] } }] } }, ...mi.definitions] };
var Fo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createContact" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ContactCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "contactCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ContactPayload" } }] } }] } }, ...oi.definitions] };
var Ao = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createCsvExportReport" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includePrivateTeamIds" } }, type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "createCsvExportReport" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "includePrivateTeamIds" }, value: { kind: "Variable", name: { kind: "Name", value: "includePrivateTeamIds" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CreateCsvExportReportPayload" } }] } }] } }, ...si.definitions] };
var To = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createInitiativeUpdateReminder" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "initiativeId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "userId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "createInitiativeUpdateReminder" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "initiativeId" }, value: { kind: "Variable", name: { kind: "Name", value: "initiativeId" } } }, { kind: "Argument", name: { kind: "Name", value: "userId" }, value: { kind: "Variable", name: { kind: "Name", value: "userId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdateReminderPayload" } }] } }] } }, ...An.definitions] };
var wo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createOrganizationFromOnboarding" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CreateOrganizationInput" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "survey" } }, type: { kind: "NamedType", name: { kind: "Name", value: "OnboardingCustomerSurvey" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "createOrganizationFromOnboarding" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }, { kind: "Argument", name: { kind: "Name", value: "survey" }, value: { kind: "Variable", name: { kind: "Name", value: "survey" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } }] } }] } }, ...ui.definitions, ...ei.definitions, ...ii.definitions] };
var Io = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createProjectUpdateReminder" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "projectId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "userId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "createProjectUpdateReminder" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "projectId" }, value: { kind: "Variable", name: { kind: "Name", value: "projectId" } } }, { kind: "Argument", name: { kind: "Name", value: "userId" }, value: { kind: "Variable", name: { kind: "Name", value: "userId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateReminderPayload" } }] } }] } }, ...Ra.definitions] };
var qo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createCustomView" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CustomViewCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customViewCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomViewPayload" } }] } }] } }, ...hi.definitions] };
var Co = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteCustomView" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customViewDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var Po = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateCustomView" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CustomViewUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customViewUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomViewPayload" } }] } }] } }, ...hi.definitions] };
var jo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createCustomer" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CustomerCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerPayload" } }] } }] } }, ...Di.definitions] };
var Oo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteCustomer" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var Uo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "customerMerge" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "sourceCustomerId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "targetCustomerId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerMerge" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "sourceCustomerId" }, value: { kind: "Variable", name: { kind: "Name", value: "sourceCustomerId" } } }, { kind: "Argument", name: { kind: "Name", value: "targetCustomerId" }, value: { kind: "Variable", name: { kind: "Name", value: "targetCustomerId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerPayload" } }] } }] } }, ...Di.definitions] };
var xo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveCustomerNeed" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerNeedArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedArchivePayload" } }] } }] } }, ...ee.definitions] };
var Bo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createCustomerNeed" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerNeedCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedPayload" } }] } }] } }, ...gi.definitions] };
var Ro = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "customerNeedCreateFromAttachment" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedCreateFromAttachmentInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerNeedCreateFromAttachment" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedPayload" } }] } }] } }, ...gi.definitions] };
var Eo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteCustomerNeed" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "keepAttachment" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerNeedDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "keepAttachment" }, value: { kind: "Variable", name: { kind: "Name", value: "keepAttachment" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var Lo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "unarchiveCustomerNeed" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerNeedUnarchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedArchivePayload" } }] } }] } }, ...ee.definitions] };
var zo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateCustomerNeed" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerNeedUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedPayload" } }] } }] } }, ...gi.definitions] };
var Mo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createCustomerTier" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CustomerTierCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerTierCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerTierPayload" } }] } }] } }, ...Ti.definitions] };
var Ho = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteCustomerTier" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerTierDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var Wo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateCustomerTier" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CustomerTierUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerTierUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerTierPayload" } }] } }] } }, ...Ti.definitions] };
var Go = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateCustomer" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CustomerUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerPayload" } }] } }] } }, ...Di.definitions] };
var Ko = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "customerUpsert" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CustomerUpsertInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "customerUpsert" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerPayload" } }] } }] } }, ...Di.definitions] };
var Jo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveCycle" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "cycleArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CycleArchivePayload" } }] } }] } }, ...ie.definitions] };
var $o = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createCycle" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CycleCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "cycleCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CyclePayload" } }] } }] } }, ...qi.definitions] };
var Zo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "cycleShiftAll" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CycleShiftAllInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "cycleShiftAll" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CyclePayload" } }] } }] } }, ...qi.definitions] };
var Yo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "cycleStartUpcomingCycleToday" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "cycleStartUpcomingCycleToday" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CyclePayload" } }] } }] } }, ...qi.definitions] };
var Qo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateCycle" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "CycleUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "cycleUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CyclePayload" } }] } }] } }, ...qi.definitions] };
var Xo = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createDocument" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DocumentCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documentCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentPayload" } }] } }] } }, ...Ui.definitions] };
var es = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteDocument" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documentDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentArchivePayload" } }] } }] } }, ...ae.definitions] };
var is = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "unarchiveDocument" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documentUnarchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentArchivePayload" } }] } }] } }, ...ae.definitions] };
var ns = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateDocument" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DocumentUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "documentUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentPayload" } }] } }] } }, ...Ui.definitions] };
var as = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createEmailIntakeAddress" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "EmailIntakeAddressCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emailIntakeAddressCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailIntakeAddressPayload" } }] } }] } }, ...Mi.definitions, ...zi.definitions] };
var ts = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteEmailIntakeAddress" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emailIntakeAddressDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var ds = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "emailIntakeAddressRotate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emailIntakeAddressRotate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailIntakeAddressPayload" } }] } }] } }, ...Mi.definitions, ...zi.definitions] };
var ls = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateEmailIntakeAddress" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "EmailIntakeAddressUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emailIntakeAddressUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailIntakeAddressPayload" } }] } }] } }, ...Mi.definitions, ...zi.definitions] };
var rs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "emailTokenUserAccountAuth" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TokenUserAccountAuthInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emailTokenUserAccountAuth" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }] } }] } }, ...ni.definitions, ...ii.definitions, ...ei.definitions] };
var ms = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "emailUnsubscribe" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "EmailUnsubscribeInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emailUnsubscribe" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailUnsubscribePayload" } }] } }] } }, ...Hi.definitions] };
var os = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "emailUserAccountAuthChallenge" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "EmailUserAccountAuthChallengeInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emailUserAccountAuthChallenge" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmailUserAccountAuthChallengeResponse" } }] } }] } }, ...Wi.definitions] };
var ss = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createEmoji" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "EmojiCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emojiCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EmojiPayload" } }] } }] } }, ...Ji.definitions] };
var us = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteEmoji" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "emojiDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var ks = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createEntityExternalLink" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "EntityExternalLinkCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "entityExternalLinkCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EntityExternalLinkPayload" } }] } }] } }, ...Yi.definitions] };
var vs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteEntityExternalLink" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "entityExternalLinkDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var ps = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateEntityExternalLink" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "EntityExternalLinkUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "entityExternalLinkUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "EntityExternalLinkPayload" } }] } }] } }, ...Yi.definitions] };
var cs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createFavorite" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "FavoriteCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "favoriteCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoritePayload" } }] } }] } }, ...an.definitions] };
var Ns = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteFavorite" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "favoriteDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var hs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateFavorite" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "FavoriteUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "favoriteUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FavoritePayload" } }] } }] } }, ...an.definitions] };
var fs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "fileUpload" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "contentType" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filename" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "makePublic" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "metaData" } }, type: { kind: "NamedType", name: { kind: "Name", value: "JSON" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "size" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "fileUpload" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "contentType" }, value: { kind: "Variable", name: { kind: "Name", value: "contentType" } } }, { kind: "Argument", name: { kind: "Name", value: "filename" }, value: { kind: "Variable", name: { kind: "Name", value: "filename" } } }, { kind: "Argument", name: { kind: "Name", value: "makePublic" }, value: { kind: "Variable", name: { kind: "Name", value: "makePublic" } } }, { kind: "Argument", name: { kind: "Name", value: "metaData" }, value: { kind: "Variable", name: { kind: "Name", value: "metaData" } } }, { kind: "Argument", name: { kind: "Name", value: "size" }, value: { kind: "Variable", name: { kind: "Name", value: "size" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UploadPayload" } }] } }] } }, ...St.definitions, ...bt.definitions, ...ft.definitions] };
var bs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createGitAutomationState" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationStateCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "gitAutomationStateCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationStatePayload" } }] } }] } }, ...mn.definitions, ...ln.definitions, ...dn.definitions] };
var Ss = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteGitAutomationState" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "gitAutomationStateDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var ys = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateGitAutomationState" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationStateUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "gitAutomationStateUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationStatePayload" } }] } }] } }, ...mn.definitions, ...ln.definitions, ...dn.definitions] };
var gs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createGitAutomationTargetBranch" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationTargetBranchCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "gitAutomationTargetBranchCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationTargetBranchPayload" } }] } }] } }, ...on.definitions, ...dn.definitions] };
var Ds = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteGitAutomationTargetBranch" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "gitAutomationTargetBranchDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var Vs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateGitAutomationTargetBranch" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "GitAutomationTargetBranchUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "gitAutomationTargetBranchUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitAutomationTargetBranchPayload" } }] } }] } }, ...on.definitions, ...dn.definitions] };
var _s = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "googleUserAccountAuth" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "GoogleUserAccountAuthInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "googleUserAccountAuth" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }] } }] } }, ...ni.definitions, ...ii.definitions, ...ei.definitions] };
var Fs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "imageUploadFromUrl" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "url" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "imageUploadFromUrl" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "url" }, value: { kind: "Variable", name: { kind: "Name", value: "url" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ImageUploadFromUrlPayload" } }] } }] } }, ...pn.definitions] };
var As = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "importFileUpload" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "contentType" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "filename" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "metaData" } }, type: { kind: "NamedType", name: { kind: "Name", value: "JSON" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "size" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "importFileUpload" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "contentType" }, value: { kind: "Variable", name: { kind: "Name", value: "contentType" } } }, { kind: "Argument", name: { kind: "Name", value: "filename" }, value: { kind: "Variable", name: { kind: "Name", value: "filename" } } }, { kind: "Argument", name: { kind: "Name", value: "metaData" }, value: { kind: "Variable", name: { kind: "Name", value: "metaData" } } }, { kind: "Argument", name: { kind: "Name", value: "size" }, value: { kind: "Variable", name: { kind: "Name", value: "size" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UploadPayload" } }] } }] } }, ...St.definitions, ...bt.definitions, ...ft.definitions] };
var Ts = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveInitiative" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeArchivePayload" } }] } }] } }, ...te.definitions] };
var ws = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createInitiative" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativePayload" } }] } }] } }, ...qe.definitions] };
var Is = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteInitiative" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var qs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createInitiativeRelation" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeRelationCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeRelationCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeRelationPayload" } }] } }] } }, ...yn.definitions, ...bn.definitions] };
var Cs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteInitiativeRelation" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeRelationDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var Ps = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateInitiativeRelation" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeRelationUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeRelationUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var js = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createInitiativeToProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeToProjectCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeToProjectCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeToProjectPayload" } }] } }] } }, ...Ce.definitions] };
var Os = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteInitiativeToProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeToProjectDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var Us = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateInitiativeToProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeToProjectUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeToProjectUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeToProjectPayload" } }] } }] } }, ...Ce.definitions] };
var xs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "unarchiveInitiative" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeUnarchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeArchivePayload" } }] } }] } }, ...te.definitions] };
var Bs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateInitiative" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativePayload" } }] } }] } }, ...qe.definitions] };
var Rs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveInitiativeUpdate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeUpdateArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdateArchivePayload" } }] } }] } }, ...de.definitions] };
var Es = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createInitiativeUpdate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeUpdateCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdatePayload" } }] } }] } }, ...Fn.definitions] };
var Ls = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "unarchiveInitiativeUpdate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeUpdateUnarchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdateArchivePayload" } }] } }] } }, ...de.definitions] };
var zs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateInitiativeUpdate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "initiativeUpdateUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdatePayload" } }] } }] } }, ...Fn.definitions] };
var Ms = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveIntegration" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var Hs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationAsksConnectChannel" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationAsksConnectChannel" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AsksChannelConnectPayload" } }] } }] } }, ...Ke.definitions, ...Ge.definitions, ...We.definitions] };
var Ws = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteIntegration" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var Gs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationDiscord" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationDiscord" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...qn.definitions] };
var Ks = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationFigma" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationFigma" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...qn.definitions] };
var Js = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationFront" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationFront" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...qn.definitions] };
var $s = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationGitHubEnterpriseServerConnect" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "githubUrl" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "organizationName" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationGitHubEnterpriseServerConnect" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "githubUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "githubUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "organizationName" }, value: { kind: "Variable", name: { kind: "Name", value: "organizationName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitHubEnterpriseServerPayload" } }] } }] } }, ...kn.definitions] };
var Zs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationGitHubPersonal" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationGitHubPersonal" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...qn.definitions] };
var Ys = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createIntegrationGithubCommit" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationGithubCommitCreate" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitHubCommitIntegrationPayload" } }] } }] } }, ...sn.definitions] };
var Qs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationGithubConnect" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "installationId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationGithubConnect" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "installationId" }, value: { kind: "Variable", name: { kind: "Name", value: "installationId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...qn.definitions] };
var Xs = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationGithubImportConnect" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "installationId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationGithubImportConnect" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "installationId" }, value: { kind: "Variable", name: { kind: "Name", value: "installationId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...qn.definitions] };
var eu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationGithubImportRefresh" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationGithubImportRefresh" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...qn.definitions] };
var iu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationGitlabConnect" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "accessToken" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "gitlabUrl" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationGitlabConnect" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "accessToken" }, value: { kind: "Variable", name: { kind: "Name", value: "accessToken" } } }, { kind: "Argument", name: { kind: "Name", value: "gitlabUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "gitlabUrl" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "GitLabIntegrationCreatePayload" } }] } }] } }, ...vn.definitions] };
var nu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationGoogleSheets" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationGoogleSheets" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...qn.definitions] };
var au = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationIntercom" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "domainUrl" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationIntercom" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "domainUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "domainUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...qn.definitions] };
var tu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteIntegrationIntercom" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationIntercomDelete" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...qn.definitions] };
var du = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateIntegrationIntercomSettings" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IntercomSettingsInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationIntercomSettingsUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...qn.definitions] };
var lu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationJiraPersonal" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "accessToken" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationJiraPersonal" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "accessToken" }, value: { kind: "Variable", name: { kind: "Name", value: "accessToken" } } }, { kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...qn.definitions] };
var ru = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationLoom" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationLoom" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...qn.definitions] };
var mu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationRequest" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IntegrationRequestInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationRequest" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationRequestPayload" } }] } }] } }, ...Cn.definitions] };
var ou = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationSentryConnect" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "installationId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "organizationSlug" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationSentryConnect" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "installationId" }, value: { kind: "Variable", name: { kind: "Name", value: "installationId" } } }, { kind: "Argument", name: { kind: "Name", value: "organizationSlug" }, value: { kind: "Variable", name: { kind: "Name", value: "organizationSlug" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...qn.definitions] };
var su = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationSlack" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationSlack" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }, { kind: "Argument", name: { kind: "Name", value: "shouldUseV2Auth" }, value: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...qn.definitions] };
var uu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationSlackAsks" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationSlackAsks" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...qn.definitions] };
var ku = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationSlackCustomViewNotifications" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "customViewId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationSlackCustomViewNotifications" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "customViewId" }, value: { kind: "Variable", name: { kind: "Name", value: "customViewId" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackChannelConnectPayload" } }] } }] } }, ...Qa.definitions] };
var vu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationSlackCustomerChannelLink" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "customerId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationSlackCustomerChannelLink" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "customerId" }, value: { kind: "Variable", name: { kind: "Name", value: "customerId" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SuccessPayload" } }] } }] } }, ...et.definitions] };
var pu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationSlackImportEmojis" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationSlackImportEmojis" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...qn.definitions] };
var cu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationSlackOrgProjectUpdatesPost" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationSlackOrgProjectUpdatesPost" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackChannelConnectPayload" } }] } }] } }, ...Qa.definitions] };
var Nu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationSlackPersonal" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationSlackPersonal" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...qn.definitions] };
var hu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationSlackPost" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationSlackPost" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }, { kind: "Argument", name: { kind: "Name", value: "shouldUseV2Auth" }, value: { kind: "Variable", name: { kind: "Name", value: "shouldUseV2Auth" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackChannelConnectPayload" } }] } }] } }, ...Qa.definitions] };
var fu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationSlackProjectPost" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "projectId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "service" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationSlackProjectPost" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "projectId" }, value: { kind: "Variable", name: { kind: "Name", value: "projectId" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }, { kind: "Argument", name: { kind: "Name", value: "service" }, value: { kind: "Variable", name: { kind: "Name", value: "service" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "SlackChannelConnectPayload" } }] } }] } }, ...Qa.definitions] };
var bu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createIntegrationTemplate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IntegrationTemplateCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationTemplateCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationTemplatePayload" } }] } }] } }, ...On.definitions] };
var Su = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteIntegrationTemplate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationTemplateDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var yu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "integrationZendesk" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "scope" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "subdomain" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationZendesk" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }, { kind: "Argument", name: { kind: "Name", value: "scope" }, value: { kind: "Variable", name: { kind: "Name", value: "scope" } } }, { kind: "Argument", name: { kind: "Name", value: "subdomain" }, value: { kind: "Variable", name: { kind: "Name", value: "subdomain" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...qn.definitions] };
var gu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createIntegrationsSettings" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IntegrationsSettingsCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationsSettingsCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationsSettingsPayload" } }] } }] } }, ...Un.definitions] };
var Du = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateIntegrationsSettings" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IntegrationsSettingsUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "integrationsSettingsUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationsSettingsPayload" } }] } }] } }, ...Un.definitions] };
var Vu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueAddLabel" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "labelId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueAddLabel" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "labelId" }, value: { kind: "Variable", name: { kind: "Name", value: "labelId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }] } }] } }, ...Qn.definitions] };
var _u = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveIssue" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "trash" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "trash" }, value: { kind: "Variable", name: { kind: "Name", value: "trash" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueArchivePayload" } }] } }] } }, ...le.definitions] };
var Fu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createIssueBatch" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueBatchCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueBatchCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueBatchPayload" } }] } }] } }, ...Bn.definitions, ...xn.definitions, ...ai.definitions, ...re.definitions] };
var Au = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateIssueBatch" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "ids" } }, type: { kind: "NonNullType", type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UUID" } } } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueBatchUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "ids" }, value: { kind: "Variable", name: { kind: "Name", value: "ids" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueBatchPayload" } }] } }] } }, ...Bn.definitions, ...xn.definitions, ...ai.definitions, ...re.definitions] };
var Tu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createIssue" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }] } }] } }, ...Qn.definitions] };
var wu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteIssue" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "permanentlyDelete" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "permanentlyDelete" }, value: { kind: "Variable", name: { kind: "Name", value: "permanentlyDelete" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueArchivePayload" } }] } }] } }, ...le.definitions] };
var Iu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueImportCreateAsana" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "asanaTeamName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "asanaToken" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportCreateAsana" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "asanaTeamName" }, value: { kind: "Variable", name: { kind: "Name", value: "asanaTeamName" } } }, { kind: "Argument", name: { kind: "Name", value: "asanaToken" }, value: { kind: "Variable", name: { kind: "Name", value: "asanaToken" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "includeClosedIssues" }, value: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } } }, { kind: "Argument", name: { kind: "Name", value: "instantProcess" }, value: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "teamName" }, value: { kind: "Variable", name: { kind: "Name", value: "teamName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }] } }] } }, ...$n.definitions, ...Mn.definitions] };
var qu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueImportCreateCSVJira" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "csvUrl" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportCreateCSVJira" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "csvUrl" }, value: { kind: "Variable", name: { kind: "Name", value: "csvUrl" } } }, { kind: "Argument", name: { kind: "Name", value: "jiraEmail" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } } }, { kind: "Argument", name: { kind: "Name", value: "jiraHostname" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } } }, { kind: "Argument", name: { kind: "Name", value: "jiraToken" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "teamName" }, value: { kind: "Variable", name: { kind: "Name", value: "teamName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }] } }] } }, ...$n.definitions, ...Mn.definitions] };
var Cu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueImportCreateClubhouse" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "clubhouseGroupName" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "clubhouseToken" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportCreateClubhouse" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "clubhouseGroupName" }, value: { kind: "Variable", name: { kind: "Name", value: "clubhouseGroupName" } } }, { kind: "Argument", name: { kind: "Name", value: "clubhouseToken" }, value: { kind: "Variable", name: { kind: "Name", value: "clubhouseToken" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "includeClosedIssues" }, value: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } } }, { kind: "Argument", name: { kind: "Name", value: "instantProcess" }, value: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "teamName" }, value: { kind: "Variable", name: { kind: "Name", value: "teamName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }] } }] } }, ...$n.definitions, ...Mn.definitions] };
var Pu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueImportCreateGithub" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "githubLabels" } }, type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "githubRepoIds" } }, type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Int" } } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportCreateGithub" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "githubLabels" }, value: { kind: "Variable", name: { kind: "Name", value: "githubLabels" } } }, { kind: "Argument", name: { kind: "Name", value: "githubRepoIds" }, value: { kind: "Variable", name: { kind: "Name", value: "githubRepoIds" } } }, { kind: "Argument", name: { kind: "Name", value: "includeClosedIssues" }, value: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } } }, { kind: "Argument", name: { kind: "Name", value: "instantProcess" }, value: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "teamName" }, value: { kind: "Variable", name: { kind: "Name", value: "teamName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }] } }] } }, ...$n.definitions, ...Mn.definitions] };
var ju = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueImportCreateJira" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraProject" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "jql" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "teamName" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportCreateJira" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "includeClosedIssues" }, value: { kind: "Variable", name: { kind: "Name", value: "includeClosedIssues" } } }, { kind: "Argument", name: { kind: "Name", value: "instantProcess" }, value: { kind: "Variable", name: { kind: "Name", value: "instantProcess" } } }, { kind: "Argument", name: { kind: "Name", value: "jiraEmail" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraEmail" } } }, { kind: "Argument", name: { kind: "Name", value: "jiraHostname" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraHostname" } } }, { kind: "Argument", name: { kind: "Name", value: "jiraProject" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraProject" } } }, { kind: "Argument", name: { kind: "Name", value: "jiraToken" }, value: { kind: "Variable", name: { kind: "Name", value: "jiraToken" } } }, { kind: "Argument", name: { kind: "Name", value: "jql" }, value: { kind: "Variable", name: { kind: "Name", value: "jql" } } }, { kind: "Argument", name: { kind: "Name", value: "teamId" }, value: { kind: "Variable", name: { kind: "Name", value: "teamId" } } }, { kind: "Argument", name: { kind: "Name", value: "teamName" }, value: { kind: "Variable", name: { kind: "Name", value: "teamName" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }] } }] } }, ...$n.definitions, ...Mn.definitions] };
var Ou = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteIssueImport" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "issueImportId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportDeletePayload" } }] } }] } }, ...Jn.definitions, ...Mn.definitions] };
var Uu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueImportProcess" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "mapping" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "JSONObject" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportProcess" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "issueImportId" }, value: { kind: "Variable", name: { kind: "Name", value: "issueImportId" } } }, { kind: "Argument", name: { kind: "Name", value: "mapping" }, value: { kind: "Variable", name: { kind: "Name", value: "mapping" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }] } }] } }, ...$n.definitions, ...Mn.definitions] };
var xu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateIssueImport" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueImportUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueImportUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueImportPayload" } }] } }] } }, ...$n.definitions, ...Mn.definitions] };
var Bu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createIssueLabel" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelCreateInput" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "replaceTeamLabels" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueLabelCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }, { kind: "Argument", name: { kind: "Name", value: "replaceTeamLabels" }, value: { kind: "Variable", name: { kind: "Name", value: "replaceTeamLabels" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelPayload" } }] } }] } }, ...Yn.definitions] };
var Ru = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteIssueLabel" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueLabelDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var Eu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateIssueLabel" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueLabelUpdateInput" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "replaceTeamLabels" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueLabelUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }, { kind: "Argument", name: { kind: "Name", value: "replaceTeamLabels" }, value: { kind: "Variable", name: { kind: "Name", value: "replaceTeamLabels" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueLabelPayload" } }] } }] } }, ...Yn.definitions] };
var Lu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createIssueRelation" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationCreateInput" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "overrideCreatedAt" } }, type: { kind: "NamedType", name: { kind: "Name", value: "DateTime" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueRelationCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }, { kind: "Argument", name: { kind: "Name", value: "overrideCreatedAt" }, value: { kind: "Variable", name: { kind: "Name", value: "overrideCreatedAt" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationPayload" } }] } }] } }, ...na.definitions] };
var zu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteIssueRelation" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueRelationDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var Mu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateIssueRelation" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueRelationUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueRelationUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueRelationPayload" } }] } }] } }, ...na.definitions] };
var Hu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueReminder" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "reminderAt" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DateTime" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueReminder" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "reminderAt" }, value: { kind: "Variable", name: { kind: "Name", value: "reminderAt" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }] } }] } }, ...Qn.definitions] };
var Wu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueRemoveLabel" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "labelId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueRemoveLabel" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "labelId" }, value: { kind: "Variable", name: { kind: "Name", value: "labelId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }] } }] } }, ...Qn.definitions] };
var Gu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueSubscribe" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "userId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueSubscribe" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "userId" }, value: { kind: "Variable", name: { kind: "Name", value: "userId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }] } }] } }, ...Qn.definitions] };
var Ku = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "unarchiveIssue" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueUnarchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueArchivePayload" } }] } }] } }, ...le.definitions] };
var Ju = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "issueUnsubscribe" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "userId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueUnsubscribe" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "userId" }, value: { kind: "Variable", name: { kind: "Name", value: "userId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }] } }] } }, ...Qn.definitions] };
var $u = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateIssue" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "IssueUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "issueUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssuePayload" } }] } }] } }, ...Qn.definitions] };
var Zu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "joinOrganizationFromOnboarding" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "JoinOrganizationInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "joinOrganizationFromOnboarding" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } }] } }] } }, ...ui.definitions, ...ei.definitions, ...ii.definitions] };
var Yu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "leaveOrganization" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "organizationId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "leaveOrganization" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "organizationId" }, value: { kind: "Variable", name: { kind: "Name", value: "organizationId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CreateOrJoinOrganizationResponse" } }] } }] } }, ...ui.definitions, ...ei.definitions, ...ii.definitions] };
var Qu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "logout" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "reason" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "logout" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "reason" }, value: { kind: "Variable", name: { kind: "Name", value: "reason" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "LogoutResponse" } }] } }] } }, ...la.definitions] };
var Xu = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "logoutAllSessions" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "reason" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "logoutAllSessions" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "reason" }, value: { kind: "Variable", name: { kind: "Name", value: "reason" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "LogoutResponse" } }] } }] } }, ...la.definitions] };
var ek = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "logoutOtherSessions" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "reason" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "logoutOtherSessions" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "reason" }, value: { kind: "Variable", name: { kind: "Name", value: "reason" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "LogoutResponse" } }] } }] } }, ...la.definitions] };
var ik = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "logoutSession" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "sessionId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "logoutSession" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "sessionId" }, value: { kind: "Variable", name: { kind: "Name", value: "sessionId" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "LogoutResponse" } }] } }] } }, ...la.definitions] };
var nk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveNotification" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationArchivePayload" } }] } }] } }, ...Ne.definitions, ...ce.definitions, ...re.definitions, ...me.definitions, ...oe.definitions, ...ue.definitions, ...se.definitions, ...ve.definitions, ...ke.definitions, ...pe.definitions] };
var ak = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "notificationArchiveAll" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "NotificationEntityInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationArchiveAll" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationBatchActionPayload" } }] } }] } }, ...ra.definitions, ...ce.definitions, ...re.definitions, ...me.definitions, ...oe.definitions, ...ue.definitions, ...se.definitions, ...ve.definitions, ...ke.definitions, ...pe.definitions] };
var tk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateNotificationCategoryChannelSubscription" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "category" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "NotificationCategory" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "channel" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "NotificationChannel" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "subscribe" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationCategoryChannelSubscriptionUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "category" }, value: { kind: "Variable", name: { kind: "Name", value: "category" } } }, { kind: "Argument", name: { kind: "Name", value: "channel" }, value: { kind: "Variable", name: { kind: "Name", value: "channel" } } }, { kind: "Argument", name: { kind: "Name", value: "subscribe" }, value: { kind: "Variable", name: { kind: "Name", value: "subscribe" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettingsPayload" } }] } }] } }, ...Ft.definitions] };
var dk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "notificationMarkReadAll" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "NotificationEntityInput" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "readAt" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DateTime" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationMarkReadAll" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }, { kind: "Argument", name: { kind: "Name", value: "readAt" }, value: { kind: "Variable", name: { kind: "Name", value: "readAt" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationBatchActionPayload" } }] } }] } }, ...ra.definitions, ...ce.definitions, ...re.definitions, ...me.definitions, ...oe.definitions, ...ue.definitions, ...se.definitions, ...ve.definitions, ...ke.definitions, ...pe.definitions] };
var lk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "notificationMarkUnreadAll" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "NotificationEntityInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationMarkUnreadAll" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationBatchActionPayload" } }] } }] } }, ...ra.definitions, ...ce.definitions, ...re.definitions, ...me.definitions, ...oe.definitions, ...ue.definitions, ...se.definitions, ...ve.definitions, ...ke.definitions, ...pe.definitions] };
var rk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "notificationSnoozeAll" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "NotificationEntityInput" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "snoozedUntilAt" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DateTime" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationSnoozeAll" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }, { kind: "Argument", name: { kind: "Name", value: "snoozedUntilAt" }, value: { kind: "Variable", name: { kind: "Name", value: "snoozedUntilAt" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationBatchActionPayload" } }] } }] } }, ...ra.definitions, ...ce.definitions, ...re.definitions, ...me.definitions, ...oe.definitions, ...ue.definitions, ...se.definitions, ...ve.definitions, ...ke.definitions, ...pe.definitions] };
var mk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createNotificationSubscription" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscriptionCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationSubscriptionCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscriptionPayload" } }] } }] } }, ...ua.definitions, ...se.definitions] };
var ok = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteNotificationSubscription" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationSubscriptionDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var sk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateNotificationSubscription" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "NotificationSubscriptionUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationSubscriptionUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationSubscriptionPayload" } }] } }] } }, ...ua.definitions, ...se.definitions] };
var uk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "unarchiveNotification" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationUnarchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationArchivePayload" } }] } }] } }, ...Ne.definitions, ...ce.definitions, ...re.definitions, ...me.definitions, ...oe.definitions, ...ue.definitions, ...se.definitions, ...ve.definitions, ...ke.definitions, ...pe.definitions] };
var kk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "notificationUnsnoozeAll" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "NotificationEntityInput" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "unsnoozedAt" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DateTime" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationUnsnoozeAll" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }, { kind: "Argument", name: { kind: "Name", value: "unsnoozedAt" }, value: { kind: "Variable", name: { kind: "Name", value: "unsnoozedAt" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationBatchActionPayload" } }] } }] } }, ...ra.definitions, ...ce.definitions, ...re.definitions, ...me.definitions, ...oe.definitions, ...ue.definitions, ...se.definitions, ...ve.definitions, ...ke.definitions, ...pe.definitions] };
var vk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateNotification" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "NotificationUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "notificationUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationPayload" } }] } }] } }, ...oa.definitions, ...ce.definitions, ...re.definitions, ...me.definitions, ...oe.definitions, ...ue.definitions, ...se.definitions, ...ve.definitions, ...ke.definitions, ...pe.definitions] };
var pk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteOrganizationCancel" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationCancelDelete" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationCancelDeletePayload" } }] } }] } }, ...ka.definitions] };
var ck = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteOrganization" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "DeleteOrganizationInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationDeletePayload" } }] } }] } }, ...va.definitions] };
var Nk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "organizationDeleteChallenge" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationDeleteChallenge" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationDeletePayload" } }] } }] } }, ...va.definitions] };
var hk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteOrganizationDomain" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationDomainDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var fk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createOrganizationInvite" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInviteCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationInviteCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInvitePayload" } }] } }] } }, ...ha.definitions] };
var bk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteOrganizationInvite" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationInviteDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var Sk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateOrganizationInvite" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInviteUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationInviteUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationInvitePayload" } }] } }] } }, ...ha.definitions] };
var yk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "organizationStartTrial" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationStartTrial" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationStartTrialPayload" } }] } }] } }, ...ba.definitions] };
var gk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "organizationStartTrialForPlan" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "OrganizationStartTrialInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationStartTrialForPlan" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationStartTrialPayload" } }] } }] } }, ...ba.definitions] };
var Dk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateOrganization" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "OrganizationUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "organizationUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "OrganizationPayload" } }] } }] } }, ...fa.definitions] };
var Vk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "trash" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "trash" }, value: { kind: "Variable", name: { kind: "Name", value: "trash" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectArchivePayload" } }] } }] } }, ...he.definitions] };
var _k = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "connectSlackChannel" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "connectSlackChannel" }, value: { kind: "Variable", name: { kind: "Name", value: "connectSlackChannel" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectPayload" } }] } }] } }, ...Ta.definitions] };
var Fk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectArchivePayload" } }] } }] } }, ...he.definitions] };
var Ak = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createProjectMilestone" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectMilestoneCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestonePayload" } }] } }] } }, ...Aa.definitions] };
var Tk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteProjectMilestone" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectMilestoneDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var wk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateProjectMilestone" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectMilestoneUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestonePayload" } }] } }] } }, ...Aa.definitions] };
var Ik = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createProjectRelation" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectRelationCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectRelationCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectRelationPayload" } }] } }] } }, ...qa.definitions] };
var qk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteProjectRelation" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectRelationDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var Ck = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateProjectRelation" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectRelationUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectRelationUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectRelationPayload" } }] } }] } }, ...qa.definitions] };
var Pk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveProjectStatus" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectStatusArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatusArchivePayload" } }] } }] } }, ...fe.definitions] };
var jk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createProjectStatus" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectStatusCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatusPayload" } }] } }] } }, ...Oa.definitions] };
var Ok = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "unarchiveProjectStatus" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectStatusUnarchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatusArchivePayload" } }] } }] } }, ...fe.definitions] };
var Uk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateProjectStatus" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectStatusUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatusPayload" } }] } }] } }, ...Oa.definitions] };
var xk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "unarchiveProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUnarchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectArchivePayload" } }] } }] } }, ...he.definitions] };
var Bk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectPayload" } }] } }] } }, ...Ta.definitions] };
var Rk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveProjectUpdate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdateArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateArchivePayload" } }] } }] } }, ...be.definitions] };
var Ek = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createProjectUpdate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdateCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdatePayload" } }] } }] } }, ...Ba.definitions] };
var Lk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteProjectUpdate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdateDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var zk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "unarchiveProjectUpdate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdateUnarchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateArchivePayload" } }] } }] } }, ...be.definitions] };
var Mk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateProjectUpdate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "projectUpdateUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdatePayload" } }] } }] } }, ...Ba.definitions] };
var Hk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createPushSubscription" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "PushSubscriptionCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "pushSubscriptionCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscriptionPayload" } }] } }] } }, ...La.definitions, ...Ea.definitions] };
var Wk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deletePushSubscription" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "pushSubscriptionDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "PushSubscriptionPayload" } }] } }] } }, ...La.definitions, ...Ea.definitions] };
var Gk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createReaction" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ReactionCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "reactionCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ReactionPayload" } }] } }] } }, ...Wa.definitions, ...ai.definitions] };
var Kk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteReaction" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "reactionDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var Jk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "refreshGoogleSheetsData" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "type" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "refreshGoogleSheetsData" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "type" }, value: { kind: "Variable", name: { kind: "Name", value: "type" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IntegrationPayload" } }] } }] } }, ...qn.definitions] };
var $k = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "resendOrganizationInvite" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "resendOrganizationInvite" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var Zk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "resendOrganizationInviteByEmail" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "email" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "resendOrganizationInviteByEmail" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "email" }, value: { kind: "Variable", name: { kind: "Name", value: "email" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var Yk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveRoadmap" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapArchivePayload" } }] } }] } }, ...Se.definitions] };
var Qk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createRoadmap" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "RoadmapCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapPayload" } }] } }] } }, ...Ja.definitions] };
var Xk = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteRoadmap" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var ev = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createRoadmapToProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProjectCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapToProjectCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProjectPayload" } }] } }] } }, ...Ya.definitions] };
var iv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteRoadmapToProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapToProjectDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var nv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateRoadmapToProject" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "RoadmapToProjectUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapToProjectUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapToProjectPayload" } }] } }] } }, ...Ya.definitions] };
var av = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "unarchiveRoadmap" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapUnarchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapArchivePayload" } }] } }] } }, ...Se.definitions] };
var tv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateRoadmap" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "RoadmapUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "roadmapUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapPayload" } }] } }] } }, ...Ja.definitions] };
var dv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "samlTokenUserAccountAuth" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TokenUserAccountAuthInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "samlTokenUserAccountAuth" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "AuthResolverResponse" } }] } }] } }, ...ni.definitions, ...ii.definitions, ...ei.definitions] };
var lv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createTeam" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "copySettingsFromTeamId" } }, type: { kind: "NamedType", name: { kind: "Name", value: "String" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TeamCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "copySettingsFromTeamId" }, value: { kind: "Variable", name: { kind: "Name", value: "copySettingsFromTeamId" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamPayload" } }] } }] } }, ...lt.definitions] };
var rv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteTeamCycles" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamCyclesDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamPayload" } }] } }] } }, ...lt.definitions] };
var mv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteTeam" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var ov = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteTeamKey" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamKeyDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var sv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createTeamMembership" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamMembershipCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipPayload" } }] } }] } }, ...dt.definitions] };
var uv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteTeamMembership" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "alsoLeaveParentTeams" } }, type: { kind: "NamedType", name: { kind: "Name", value: "Boolean" } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamMembershipDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "alsoLeaveParentTeams" }, value: { kind: "Variable", name: { kind: "Name", value: "alsoLeaveParentTeams" } } }, { kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var kv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateTeamMembership" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TeamMembershipUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamMembershipUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamMembershipPayload" } }] } }] } }, ...dt.definitions] };
var vv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "unarchiveTeam" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamUnarchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamArchivePayload" } }] } }] } }, ...ye.definitions] };
var pv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateTeam" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TeamUpdateInput" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "mapping" } }, type: { kind: "NamedType", name: { kind: "Name", value: "InheritanceEntityMapping" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "teamUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }, { kind: "Argument", name: { kind: "Name", value: "mapping" }, value: { kind: "Variable", name: { kind: "Name", value: "mapping" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamPayload" } }] } }] } }, ...lt.definitions] };
var cv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createTemplate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TemplateCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "templateCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplatePayload" } }] } }] } }, ...ot.definitions] };
var Nv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteTemplate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "templateDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var hv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateTemplate" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TemplateUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "templateUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TemplatePayload" } }] } }] } }, ...ot.definitions] };
var fv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createTimeSchedule" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TimeScheduleCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "timeScheduleCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeSchedulePayload" } }] } }] } }, ...vt.definitions] };
var bv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteTimeSchedule" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "timeScheduleDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var Sv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "timeScheduleRefreshIntegrationSchedule" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "timeScheduleRefreshIntegrationSchedule" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeSchedulePayload" } }] } }] } }, ...vt.definitions] };
var yv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateTimeSchedule" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TimeScheduleUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "timeScheduleUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeSchedulePayload" } }] } }] } }, ...vt.definitions] };
var gv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "timeScheduleUpsertExternal" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "externalId" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TimeScheduleUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "timeScheduleUpsertExternal" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "externalId" }, value: { kind: "Variable", name: { kind: "Name", value: "externalId" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TimeSchedulePayload" } }] } }] } }, ...vt.definitions] };
var Dv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createTriageResponsibility" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TriageResponsibilityCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "triageResponsibilityCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibilityPayload" } }] } }] } }, ...ht.definitions] };
var Vv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteTriageResponsibility" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "triageResponsibilityDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var _v = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateTriageResponsibility" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "TriageResponsibilityUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "triageResponsibilityUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TriageResponsibilityPayload" } }] } }] } }, ...ht.definitions] };
var Fv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "userDemoteAdmin" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userDemoteAdmin" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }] } }] } }, ...yt.definitions] };
var Av = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "userDemoteMember" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userDemoteMember" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }] } }] } }, ...yt.definitions] };
var Tv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "userDiscordConnect" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "code" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userDiscordConnect" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "code" }, value: { kind: "Variable", name: { kind: "Name", value: "code" } } }, { kind: "Argument", name: { kind: "Name", value: "redirectUri" }, value: { kind: "Variable", name: { kind: "Name", value: "redirectUri" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserPayload" } }] } }] } }, ...Dt.definitions] };
var wv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "userExternalUserDisconnect" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "service" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userExternalUserDisconnect" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "service" }, value: { kind: "Variable", name: { kind: "Name", value: "service" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserPayload" } }] } }] } }, ...Dt.definitions] };
var Iv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateUserFlag" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "flag" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UserFlagType" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "operation" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UserFlagUpdateOperation" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userFlagUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "flag" }, value: { kind: "Variable", name: { kind: "Name", value: "flag" } } }, { kind: "Argument", name: { kind: "Name", value: "operation" }, value: { kind: "Variable", name: { kind: "Name", value: "operation" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettingsFlagPayload" } }] } }] } }, ...Vt.definitions] };
var qv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "userPromoteAdmin" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userPromoteAdmin" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }] } }] } }, ...yt.definitions] };
var Cv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "userPromoteMember" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userPromoteMember" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }] } }] } }, ...yt.definitions] };
var Pv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "userSettingsFlagsReset" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "flags" } }, type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UserFlagType" } } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettingsFlagsReset" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "flags" }, value: { kind: "Variable", name: { kind: "Name", value: "flags" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettingsFlagsResetPayload" } }] } }] } }, ..._t.definitions] };
var jv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateUserSettings" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UserSettingsUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSettingsUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserSettingsPayload" } }] } }] } }, ...Ft.definitions] };
var Ov = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "suspendUser" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userSuspend" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }] } }] } }, ...yt.definitions] };
var Uv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "unsuspendUser" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userUnsuspend" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserAdminPayload" } }] } }] } }, ...yt.definitions] };
var xv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateUser" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "UserUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "userUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "UserPayload" } }] } }] } }, ...Dt.definitions] };
var Bv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createViewPreferences" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferencesCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "viewPreferencesCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesPayload" } }] } }] } }, ...At.definitions, ...vi.definitions, ...ki.definitions] };
var Rv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteViewPreferences" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "viewPreferencesDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var Ev = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateViewPreferences" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "ViewPreferencesUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "viewPreferencesUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ViewPreferencesPayload" } }] } }] } }, ...At.definitions, ...vi.definitions, ...ki.definitions] };
var Lv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createWebhook" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "WebhookCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "webhookCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookPayload" } }] } }] } }, ...It.definitions] };
var zv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "deleteWebhook" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "webhookDelete" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }] } }, ...ne.definitions] };
var Mv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateWebhook" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "WebhookUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "webhookUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WebhookPayload" } }] } }] } }, ...It.definitions] };
var Hv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "archiveWorkflowState" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "workflowStateArchive" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStateArchivePayload" } }] } }] } }, ...ge.definitions] };
var Wv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "createWorkflowState" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateCreateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "workflowStateCreate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStatePayload" } }] } }] } }, ...Pt.definitions] };
var Gv = { kind: "Document", definitions: [{ kind: "OperationDefinition", operation: "mutation", name: { kind: "Name", value: "updateWorkflowState" }, variableDefinitions: [{ kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "id" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } }, { kind: "VariableDefinition", variable: { kind: "Variable", name: { kind: "Name", value: "input" } }, type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateUpdateInput" } } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "workflowStateUpdate" }, arguments: [{ kind: "Argument", name: { kind: "Name", value: "id" }, value: { kind: "Variable", name: { kind: "Name", value: "id" } } }, { kind: "Argument", name: { kind: "Name", value: "input" }, value: { kind: "Variable", name: { kind: "Name", value: "input" } } }], selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStatePayload" } }] } }] } }, ...Pt.definitions] };
var Kv;
var Jv = Object.freeze({ __proto__: null, get AuthenticationSessionType() {
  return l;
}, get ContextViewType() {
  return r;
}, get CustomerStatusType() {
  return m;
}, get CyclePeriod() {
  return o;
}, get DateResolutionType() {
  return s;
}, get Day() {
  return u;
}, get FacetPageSource() {
  return k;
}, get FeedSummarySchedule() {
  return v;
}, get FrequencyResolutionType() {
  return p;
}, get GitAutomationStates() {
  return c;
}, get GitLinkKind() {
  return N;
}, get GithubOrgType() {
  return h;
}, get InitiativeStatus() {
  return f;
}, get InitiativeTab() {
  return b;
}, get InitiativeUpdateHealthType() {
  return S;
}, get IntegrationService() {
  return y;
}, get IssueRelationType() {
  return g;
}, get NotificationCategory() {
  return D;
}, get NotificationChannel() {
  return V;
}, get OAuthClientApprovalStatus() {
  return _;
}, get OrganizationDomainAuthType() {
  return F;
}, get OrganizationInviteStatus() {
  return A;
}, get PaginationNulls() {
  return T;
}, get PaginationOrderBy() {
  return w;
}, get PaginationSortOrder() {
  return I;
}, get PostType() {
  return q;
}, get ProductIntelligenceScope() {
  return C;
}, get ProjectMilestoneStatus() {
  return P;
}, get ProjectStatusType() {
  return j;
}, get ProjectTab() {
  return O;
}, get ProjectUpdateHealthType() {
  return U;
}, get ProjectUpdateReminderFrequency() {
  return x;
}, get PullRequestReviewTool() {
  return B;
}, get PullRequestStatus() {
  return R;
}, get PushSubscriptionType() {
  return E;
}, get ReleaseChannel() {
  return L;
}, get SLADayCountType() {
  return z;
}, get SemanticSearchResultType() {
  return M;
}, get SendStrategy() {
  return H;
}, get SlaStatus() {
  return W;
}, get SlackChannelType() {
  return G;
}, get TriageResponsibilityAction() {
  return K;
}, get UserContextViewType() {
  return J;
}, get UserFlagType() {
  return $;
}, get UserFlagUpdateOperation() {
  return Z;
}, get UserRoleType() {
  return Y;
}, get ViewPreferencesType() {
  return Q;
}, get ViewType() {
  return X;
}, EntityFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Entity" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Entity" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] }, CustomViewNotificationSubscriptionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomViewNotificationSubscription" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewNotificationSubscription" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "label" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "customView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "customer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } }, { kind: "Field", name: { kind: "Name", value: "userContextViewType" } }, { kind: "Field", name: { kind: "Name", value: "contextViewType" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "subscriber" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "active" } }] } }] }, CustomerNotificationSubscriptionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomerNotificationSubscription" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNotificationSubscription" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "customView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "label" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "customer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } }, { kind: "Field", name: { kind: "Name", value: "userContextViewType" } }, { kind: "Field", name: { kind: "Name", value: "contextViewType" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "subscriber" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "active" } }] } }] }, CycleNotificationSubscriptionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CycleNotificationSubscription" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CycleNotificationSubscription" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "customView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "label" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "customer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } }, { kind: "Field", name: { kind: "Name", value: "userContextViewType" } }, { kind: "Field", name: { kind: "Name", value: "contextViewType" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "subscriber" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "active" } }] } }] }, FacetFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Facet" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Facet" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "sourceFeedUser" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "sourceInitiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "sourcePage" } }, { kind: "Field", name: { kind: "Name", value: "sourceProject" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "sourceTeam" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "targetCustomView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] }, CustomerNeedArchivePayloadFragmentDoc: ee, CycleArchivePayloadFragmentDoc: ie, DeletePayloadFragmentDoc: ne, DocumentArchivePayloadFragmentDoc: ae, InitiativeArchivePayloadFragmentDoc: te, InitiativeUpdateArchivePayloadFragmentDoc: de, IssueArchivePayloadFragmentDoc: le, ActorBotFragmentDoc: re, DocumentNotificationFragmentDoc: me, InitiativeNotificationFragmentDoc: oe, NotificationSubscriptionFragmentDoc: se, IssueNotificationFragmentDoc: ue, OauthClientApprovalFragmentDoc: ke, OauthClientApprovalNotificationFragmentDoc: ve, ProjectNotificationFragmentDoc: pe, NotificationFragmentDoc: ce, NotificationArchivePayloadFragmentDoc: Ne, ProjectArchivePayloadFragmentDoc: he, ProjectStatusArchivePayloadFragmentDoc: fe, ProjectUpdateArchivePayloadFragmentDoc: be, RoadmapArchivePayloadFragmentDoc: Se, TeamArchivePayloadFragmentDoc: ye, WorkflowStateArchivePayloadFragmentDoc: ge, ArchivePayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ArchivePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomerNeedArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CustomerNeedArchivePayload" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CycleArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "CycleArchivePayload" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DeletePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DeletePayload" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "DocumentArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "DocumentArchivePayload" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeArchivePayload" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeUpdateArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "InitiativeUpdateArchivePayload" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "IssueArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "IssueArchivePayload" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "NotificationArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "NotificationArchivePayload" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectArchivePayload" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectStatusArchivePayload" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectUpdateArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectUpdateArchivePayload" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "RoadmapArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "RoadmapArchivePayload" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "TeamArchivePayload" } }] } }, { kind: "InlineFragment", typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WorkflowStateArchivePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "WorkflowStateArchivePayload" } }] } }] } }] }, LabelNotificationSubscriptionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "LabelNotificationSubscription" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "LabelNotificationSubscription" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "customView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "customer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "label" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } }, { kind: "Field", name: { kind: "Name", value: "userContextViewType" } }, { kind: "Field", name: { kind: "Name", value: "contextViewType" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "subscriber" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "active" } }] } }] }, MeetingFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Meeting" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Meeting" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "trashed" } }, { kind: "Field", name: { kind: "Name", value: "recordingLink" } }, { kind: "Field", name: { kind: "Name", value: "color" } }, { kind: "Field", name: { kind: "Name", value: "icon" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "location" } }, { kind: "Field", name: { kind: "Name", value: "meetingLink" } }, { kind: "Field", name: { kind: "Name", value: "title" } }, { kind: "Field", name: { kind: "Name", value: "sortOrder" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "endsAt" } }, { kind: "Field", name: { kind: "Name", value: "startsAt" } }, { kind: "Field", name: { kind: "Name", value: "hiddenAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedBy" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] }, ProjectNotificationSubscriptionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectNotificationSubscription" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectNotificationSubscription" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "customView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "label" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "customer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } }, { kind: "Field", name: { kind: "Name", value: "userContextViewType" } }, { kind: "Field", name: { kind: "Name", value: "contextViewType" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "subscriber" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "active" } }] } }] }, TeamNotificationSubscriptionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "TeamNotificationSubscription" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "TeamNotificationSubscription" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "customView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "label" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "customer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } }, { kind: "Field", name: { kind: "Name", value: "userContextViewType" } }, { kind: "Field", name: { kind: "Name", value: "contextViewType" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "subscriber" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "active" } }] } }] }, UserNotificationSubscriptionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "UserNotificationSubscription" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "UserNotificationSubscription" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "customView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "label" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "customer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } }, { kind: "Field", name: { kind: "Name", value: "userContextViewType" } }, { kind: "Field", name: { kind: "Name", value: "contextViewType" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "subscriber" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "active" } }] } }] }, InitiativeNotificationSubscriptionFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "InitiativeNotificationSubscription" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "InitiativeNotificationSubscription" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "customView" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "cycle" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "label" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "project" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "customer" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "initiative" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "team" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "notificationSubscriptionTypes" } }, { kind: "Field", name: { kind: "Name", value: "userContextViewType" } }, { kind: "Field", name: { kind: "Name", value: "contextViewType" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "subscriber" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "user" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "active" } }] } }] }, OrganizationIpRestrictionFragmentDoc: De, ProjectStatusFragmentDoc: Ve, PaidSubscriptionFragmentDoc: _e, OrganizationFragmentDoc: Fe, AuthenticationSessionResponseFragmentDoc: Ae, OrganizationDomainFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationDomain" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationDomain" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "name" } }, { kind: "Field", name: { kind: "Name", value: "verificationEmail" } }, { kind: "Field", name: { kind: "Name", value: "verified" } }, { kind: "Field", name: { kind: "Name", value: "disableOrganizationCreation" } }, { kind: "Field", name: { kind: "Name", value: "updatedAt" } }, { kind: "Field", name: { kind: "Name", value: "archivedAt" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "creator" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "authType" } }, { kind: "Field", name: { kind: "Name", value: "claimed" } }] } }] }, AuthorizingUserFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AuthorizingUser" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AuthorizingUser" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "displayName" } }, { kind: "Field", name: { kind: "Name", value: "name" } }] } }] }, WebhookFailureEventFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "WebhookFailureEvent" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "WebhookFailureEvent" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "responseOrError" } }, { kind: "Field", name: { kind: "Name", value: "httpStatus" } }, { kind: "Field", name: { kind: "Name", value: "url" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "executionId" } }, { kind: "Field", name: { kind: "Name", value: "id" } }, { kind: "Field", name: { kind: "Name", value: "webhook" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }] } }] }, UserAuthorizedApplicationFragmentDoc: Te, ApplicationFragmentDoc: we, IntegrationsSettingsFragmentDoc: Ie, InitiativePayloadFragmentDoc: qe, InitiativeToProjectPayloadFragmentDoc: Ce, NotificationDeliveryPreferencesDayFragmentDoc: Pe, NotificationDeliveryPreferencesScheduleFragmentDoc: je, NotificationDeliveryPreferencesChannelFragmentDoc: Oe, NotificationDeliveryPreferencesFragmentDoc: Ue, NotificationChannelPreferencesFragmentDoc: xe, NotificationCategoryPreferencesFragmentDoc: Be, UserSettingsFragmentDoc: Re, IssueImportJqlCheckPayloadFragmentDoc: Ee, IssueImportSyncCheckPayloadFragmentDoc: Le, ApiKeyFragmentDoc: ze, PageInfoFragmentDoc: Me, ApiKeyConnectionFragmentDoc: He, ApiKeyPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ApiKeyPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ApiKeyPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "apiKey" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ApiKey" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, SlackAsksTeamSettingsFragmentDoc: We, SlackChannelNameMappingFragmentDoc: Ge, AsksChannelConnectPayloadFragmentDoc: Ke, AttachmentFragmentDoc: Je, AttachmentConnectionFragmentDoc: $e, AttachmentPayloadFragmentDoc: Ze, AttachmentSourcesPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "AttachmentSourcesPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "AttachmentSourcesPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "sources" } }] } }] }, AuditEntryFragmentDoc: Ye, AuditEntryConnectionFragmentDoc: Qe, AuditEntryTypeFragmentDoc: Xe, AuthOrganizationFragmentDoc: ei, AuthUserFragmentDoc: ii, AuthResolverResponseFragmentDoc: ni, ReactionFragmentDoc: ai, DocumentContentFragmentDoc: ti, SyncedExternalThreadFragmentDoc: di, CommentFragmentDoc: li, CommentConnectionFragmentDoc: ri, CommentPayloadFragmentDoc: mi, ContactPayloadFragmentDoc: oi, CreateCsvExportReportPayloadFragmentDoc: si, CreateOrJoinOrganizationResponseFragmentDoc: ui, ViewPreferencesValuesFragmentDoc: ki, ViewPreferencesFragmentDoc: vi, CustomViewFragmentDoc: pi, CustomViewConnectionFragmentDoc: ci, CustomViewHasSubscribersPayloadFragmentDoc: Ni, CustomViewPayloadFragmentDoc: hi, CustomViewSuggestionPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "CustomViewSuggestionPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "CustomViewSuggestionPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "description" } }, { kind: "Field", name: { kind: "Name", value: "icon" } }, { kind: "Field", name: { kind: "Name", value: "name" } }] } }] }, CustomerFragmentDoc: fi, CustomerConnectionFragmentDoc: bi, CustomerNeedFragmentDoc: Si, CustomerNeedConnectionFragmentDoc: yi, CustomerNeedPayloadFragmentDoc: gi, CustomerPayloadFragmentDoc: Di, CustomerStatusFragmentDoc: Vi, CustomerStatusConnectionFragmentDoc: _i, CustomerTierFragmentDoc: Fi, CustomerTierConnectionFragmentDoc: Ai, CustomerTierPayloadFragmentDoc: Ti, CycleFragmentDoc: wi, CycleConnectionFragmentDoc: Ii, CyclePayloadFragmentDoc: qi, DocumentFragmentDoc: Ci, DocumentConnectionFragmentDoc: Pi, DocumentContentHistoryTypeFragmentDoc: ji, DocumentContentHistoryPayloadFragmentDoc: Oi, DocumentPayloadFragmentDoc: Ui, ArchiveResponseFragmentDoc: xi, DocumentSearchResultFragmentDoc: Bi, DocumentSearchPayloadFragmentDoc: Ri, DraftFragmentDoc: Ei, DraftConnectionFragmentDoc: Li, EmailIntakeAddressFragmentDoc: zi, EmailIntakeAddressPayloadFragmentDoc: Mi, EmailUnsubscribePayloadFragmentDoc: Hi, EmailUserAccountAuthChallengeResponseFragmentDoc: Wi, EmojiFragmentDoc: Gi, EmojiConnectionFragmentDoc: Ki, EmojiPayloadFragmentDoc: Ji, EntityExternalLinkFragmentDoc: $i, EntityExternalLinkConnectionFragmentDoc: Zi, EntityExternalLinkPayloadFragmentDoc: Yi, ExternalUserFragmentDoc: Qi, ExternalUserConnectionFragmentDoc: Xi, FavoriteFragmentDoc: en, FavoriteConnectionFragmentDoc: nn, FavoritePayloadFragmentDoc: an, FrontAttachmentPayloadFragmentDoc: tn, GitAutomationTargetBranchFragmentDoc: dn, GitAutomationStateFragmentDoc: ln, GitAutomationStateConnectionFragmentDoc: rn, GitAutomationStatePayloadFragmentDoc: mn, GitAutomationTargetBranchPayloadFragmentDoc: on, GitHubCommitIntegrationPayloadFragmentDoc: sn, GitHubEnterpriseServerInstallVerificationPayloadFragmentDoc: un, GitHubEnterpriseServerPayloadFragmentDoc: kn, GitLabIntegrationCreatePayloadFragmentDoc: vn, ImageUploadFromUrlPayloadFragmentDoc: pn, InitiativeFragmentDoc: cn, InitiativeConnectionFragmentDoc: Nn, InitiativeHistoryFragmentDoc: hn, InitiativeHistoryConnectionFragmentDoc: fn, InitiativeRelationFragmentDoc: bn, InitiativeRelationConnectionFragmentDoc: Sn, InitiativeRelationPayloadFragmentDoc: yn, InitiativeToProjectFragmentDoc: gn, InitiativeToProjectConnectionFragmentDoc: Dn, InitiativeUpdateFragmentDoc: Vn, InitiativeUpdateConnectionFragmentDoc: _n, InitiativeUpdatePayloadFragmentDoc: Fn, InitiativeUpdateReminderPayloadFragmentDoc: An, IntegrationFragmentDoc: Tn, IntegrationConnectionFragmentDoc: wn, IntegrationHasScopesPayloadFragmentDoc: In, IntegrationPayloadFragmentDoc: qn, IntegrationRequestPayloadFragmentDoc: Cn, IntegrationTemplateFragmentDoc: Pn, IntegrationTemplateConnectionFragmentDoc: jn, IntegrationTemplatePayloadFragmentDoc: On, IntegrationsSettingsPayloadFragmentDoc: Un, IssueFragmentDoc: xn, IssueBatchPayloadFragmentDoc: Bn, IssueConnectionFragmentDoc: Rn, IssueFilterSuggestionPayloadFragmentDoc: En, IssueRelationHistoryPayloadFragmentDoc: Ln, UserFragmentDoc: zn, IssueImportFragmentDoc: Mn, IssueLabelFragmentDoc: Hn, IssueHistoryFragmentDoc: Wn, IssueHistoryConnectionFragmentDoc: Gn, IssueImportCheckPayloadFragmentDoc: Kn, IssueImportDeletePayloadFragmentDoc: Jn, IssueImportPayloadFragmentDoc: $n, IssueLabelConnectionFragmentDoc: Zn, IssueLabelPayloadFragmentDoc: Yn, IssuePayloadFragmentDoc: Qn, IssuePriorityValueFragmentDoc: Xn, IssueRelationFragmentDoc: ea, IssueRelationConnectionFragmentDoc: ia, IssueRelationPayloadFragmentDoc: na, IssueSearchResultFragmentDoc: aa, IssueSearchPayloadFragmentDoc: ta, IssueTitleSuggestionFromCustomerRequestPayloadFragmentDoc: da, LogoutResponseFragmentDoc: la, NodeFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "Node" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "Node" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "id" } }] } }] }, NotificationBatchActionPayloadFragmentDoc: ra, NotificationConnectionFragmentDoc: ma, NotificationPayloadFragmentDoc: oa, NotificationSubscriptionConnectionFragmentDoc: sa, NotificationSubscriptionPayloadFragmentDoc: ua, OrganizationAcceptedOrExpiredInviteDetailsPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationAcceptedOrExpiredInviteDetailsPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationAcceptedOrExpiredInviteDetailsPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "status" } }] } }] }, OrganizationCancelDeletePayloadFragmentDoc: ka, OrganizationDeletePayloadFragmentDoc: va, OrganizationExistsPayloadFragmentDoc: pa, OrganizationInviteFragmentDoc: ca, OrganizationInviteConnectionFragmentDoc: Na, OrganizationInviteFullDetailsPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationInviteFullDetailsPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationInviteFullDetailsPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "allowedAuthServices" } }, { kind: "Field", name: { kind: "Name", value: "organizationId" } }, { kind: "Field", name: { kind: "Name", value: "organizationName" } }, { kind: "Field", name: { kind: "Name", value: "email" } }, { kind: "Field", name: { kind: "Name", value: "inviter" } }, { kind: "Field", name: { kind: "Name", value: "status" } }, { kind: "Field", name: { kind: "Name", value: "organizationLogoUrl" } }, { kind: "Field", name: { kind: "Name", value: "role" } }, { kind: "Field", name: { kind: "Name", value: "createdAt" } }, { kind: "Field", name: { kind: "Name", value: "accepted" } }, { kind: "Field", name: { kind: "Name", value: "expired" } }] } }] }, OrganizationInvitePayloadFragmentDoc: ha, OrganizationMetaFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "OrganizationMeta" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "OrganizationMeta" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "allowedAuthServices" } }, { kind: "Field", name: { kind: "Name", value: "region" } }] } }] }, OrganizationPayloadFragmentDoc: fa, OrganizationStartTrialPayloadFragmentDoc: ba, PasskeyLoginStartResponseFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "PasskeyLoginStartResponse" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "PasskeyLoginStartResponse" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "options" } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, ProjectFragmentDoc: Sa, ProjectConnectionFragmentDoc: ya, ProjectFilterSuggestionPayloadFragmentDoc: ga, ProjectHistoryFragmentDoc: Da, ProjectHistoryConnectionFragmentDoc: Va, ProjectMilestoneFragmentDoc: _a, ProjectMilestoneConnectionFragmentDoc: Fa, ProjectMilestoneMoveIssueToTeamFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectMilestoneMoveIssueToTeam" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneMoveIssueToTeam" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "issueId" } }, { kind: "Field", name: { kind: "Name", value: "teamId" } }] } }] }, ProjectMilestoneMoveProjectTeamsFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectMilestoneMoveProjectTeams" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneMoveProjectTeams" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "projectId" } }, { kind: "Field", name: { kind: "Name", value: "teamIds" } }] } }] }, ProjectMilestoneMovePayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectMilestoneMovePayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectMilestoneMovePayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "previousIssueTeamIds" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestoneMoveIssueToTeam" } }] } }, { kind: "Field", name: { kind: "Name", value: "previousProjectTeamIds" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "ProjectMilestoneMoveProjectTeams" } }] } }, { kind: "Field", name: { kind: "Name", value: "lastSyncId" } }, { kind: "Field", name: { kind: "Name", value: "projectMilestone" }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "id" } }] } }, { kind: "Field", name: { kind: "Name", value: "success" } }] } }] }, ProjectMilestonePayloadFragmentDoc: Aa, ProjectPayloadFragmentDoc: Ta, ProjectRelationFragmentDoc: wa, ProjectRelationConnectionFragmentDoc: Ia, ProjectRelationPayloadFragmentDoc: qa, ProjectSearchResultFragmentDoc: Ca, ProjectSearchPayloadFragmentDoc: Pa, ProjectStatusConnectionFragmentDoc: ja, ProjectStatusCountPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "ProjectStatusCountPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "ProjectStatusCountPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "privateCount" } }, { kind: "Field", name: { kind: "Name", value: "archivedTeamCount" } }, { kind: "Field", name: { kind: "Name", value: "count" } }] } }] }, ProjectStatusPayloadFragmentDoc: Oa, ProjectUpdateFragmentDoc: Ua, ProjectUpdateConnectionFragmentDoc: xa, ProjectUpdatePayloadFragmentDoc: Ba, ProjectUpdateReminderPayloadFragmentDoc: Ra, PushSubscriptionFragmentDoc: Ea, PushSubscriptionPayloadFragmentDoc: La, PushSubscriptionTestPayloadFragmentDoc: za, RateLimitResultPayloadFragmentDoc: Ma, RateLimitPayloadFragmentDoc: Ha, ReactionPayloadFragmentDoc: Wa, RoadmapFragmentDoc: Ga, RoadmapConnectionFragmentDoc: Ka, RoadmapPayloadFragmentDoc: Ja, RoadmapToProjectFragmentDoc: $a, RoadmapToProjectConnectionFragmentDoc: Za, RoadmapToProjectPayloadFragmentDoc: Ya, SlackChannelConnectPayloadFragmentDoc: Qa, SsoUrlFromEmailResponseFragmentDoc: Xa, SuccessPayloadFragmentDoc: et, SummaryPayloadFragmentDoc: { kind: "Document", definitions: [{ kind: "FragmentDefinition", name: { kind: "Name", value: "SummaryPayload" }, typeCondition: { kind: "NamedType", name: { kind: "Name", value: "SummaryPayload" } }, selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "__typename" } }, { kind: "Field", name: { kind: "Name", value: "summary" } }] } }] }, TeamFragmentDoc: it, TeamConnectionFragmentDoc: nt, TeamMembershipFragmentDoc: at, TeamMembershipConnectionFragmentDoc: tt, TeamMembershipPayloadFragmentDoc: dt, TeamPayloadFragmentDoc: lt, TemplateFragmentDoc: rt, TemplateConnectionFragmentDoc: mt, TemplatePayloadFragmentDoc: ot, TimeScheduleEntryFragmentDoc: st, TimeScheduleFragmentDoc: ut, TimeScheduleConnectionFragmentDoc: kt, TimeSchedulePayloadFragmentDoc: vt, TriageResponsibilityManualSelectionFragmentDoc: pt, TriageResponsibilityFragmentDoc: ct, TriageResponsibilityConnectionFragmentDoc: Nt, TriageResponsibilityPayloadFragmentDoc: ht, UploadFileHeaderFragmentDoc: ft, UploadFileFragmentDoc: bt, UploadPayloadFragmentDoc: St, UserAdminPayloadFragmentDoc: yt, UserConnectionFragmentDoc: gt, UserPayloadFragmentDoc: Dt, UserSettingsFlagPayloadFragmentDoc: Vt, UserSettingsFlagsResetPayloadFragmentDoc: _t, UserSettingsPayloadFragmentDoc: Ft, ViewPreferencesPayloadFragmentDoc: At, WebhookFragmentDoc: Tt, WebhookConnectionFragmentDoc: wt, WebhookPayloadFragmentDoc: It, WorkflowStateFragmentDoc: qt, WorkflowStateConnectionFragmentDoc: Ct, WorkflowStatePayloadFragmentDoc: Pt, AdministrableTeamsDocument: jt, ApiKeysDocument: Ot, ApplicationInfoDocument: Ut, ApplicationWithAuthorizationDocument: xt, AttachmentDocument: Bt, AttachmentIssueDocument: Rt, AttachmentIssue_AttachmentsDocument: Et, AttachmentIssue_BotActorDocument: Lt, AttachmentIssue_ChildrenDocument: zt, AttachmentIssue_CommentsDocument: Mt, AttachmentIssue_HistoryDocument: Ht, AttachmentIssue_InverseRelationsDocument: Wt, AttachmentIssue_LabelsDocument: Gt, AttachmentIssue_NeedsDocument: Kt, AttachmentIssue_RelationsDocument: Jt, AttachmentIssue_SubscribersDocument: $t, AttachmentsDocument: Zt, AttachmentsForUrlDocument: Yt, AuditEntriesDocument: Qt, AuditEntryTypesDocument: Xt, AuthenticationSessionsDocument: ed, AvailableUsersDocument: id, CommentDocument: nd, Comment_BotActorDocument: ad, Comment_ChildrenDocument: td, Comment_DocumentContentDocument: dd, Comment_ExternalThreadDocument: ld, CommentsDocument: rd, CustomViewDocument: md, CustomView_IssuesDocument: od, CustomView_OrganizationViewPreferencesDocument: sd, CustomView_OrganizationViewPreferences_PreferencesDocument: ud, CustomView_ProjectsDocument: kd, CustomView_UserViewPreferencesDocument: vd, CustomView_UserViewPreferences_PreferencesDocument: pd, CustomView_ViewPreferencesValuesDocument: cd, CustomViewHasSubscribersDocument: Nd, CustomViewsDocument: hd, CustomerDocument: fd, CustomerNeedDocument: bd, CustomerNeedsDocument: Sd, CustomerStatusDocument: yd, CustomerStatusesDocument: gd, CustomerTierDocument: Dd, CustomerTiersDocument: Vd, CustomersDocument: _d, CycleDocument: Fd, Cycle_IssuesDocument: Ad, Cycle_UncompletedIssuesUponCloseDocument: Td, CyclesDocument: wd, DocumentDocument: Id, Document_CommentsDocument: qd, DocumentContentHistoryDocument: Cd, DocumentsDocument: Pd, EmojiDocument: jd, EmojisDocument: Od, EntityExternalLinkDocument: Ud, ExternalUserDocument: xd, ExternalUsersDocument: Bd, FavoriteDocument: Rd, Favorite_ChildrenDocument: Ed, FavoritesDocument: Ld, InitiativeDocument: zd, Initiative_HistoryDocument: Md, Initiative_LinksDocument: Hd, Initiative_ProjectsDocument: Wd, InitiativeRelationDocument: Gd, InitiativeRelationsDocument: Kd, InitiativeToProjectDocument: Jd, InitiativeToProjectsDocument: $d, InitiativeUpdateDocument: Zd, InitiativeUpdate_CommentsDocument: Yd, InitiativeUpdatesDocument: Qd, InitiativesDocument: Xd, IntegrationDocument: el, IntegrationHasScopesDocument: il, IntegrationTemplateDocument: nl, IntegrationTemplatesDocument: al, IntegrationsDocument: tl, IntegrationsSettingsDocument: dl, IssueDocument: ll, Issue_AttachmentsDocument: rl, Issue_BotActorDocument: ml, Issue_ChildrenDocument: ol, Issue_CommentsDocument: sl, Issue_HistoryDocument: ul, Issue_InverseRelationsDocument: kl, Issue_LabelsDocument: vl, Issue_NeedsDocument: pl, Issue_RelationsDocument: cl, Issue_SubscribersDocument: Nl, IssueFigmaFileKeySearchDocument: hl, IssueFilterSuggestionDocument: fl, IssueImportCheckCsvDocument: bl, IssueImportCheckSyncDocument: Sl, IssueImportJqlCheckDocument: yl, IssueLabelDocument: gl, IssueLabel_ChildrenDocument: Dl, IssueLabel_IssuesDocument: Vl, IssueLabelsDocument: _l, IssuePriorityValuesDocument: Fl, IssueRelationDocument: Al, IssueRelationsDocument: Tl, IssueSearchDocument: wl, IssueTitleSuggestionFromCustomerRequestDocument: Il, IssueVcsBranchSearchDocument: ql, IssueVcsBranchSearch_AttachmentsDocument: Cl, IssueVcsBranchSearch_BotActorDocument: Pl, IssueVcsBranchSearch_ChildrenDocument: jl, IssueVcsBranchSearch_CommentsDocument: Ol, IssueVcsBranchSearch_HistoryDocument: Ul, IssueVcsBranchSearch_InverseRelationsDocument: xl, IssueVcsBranchSearch_LabelsDocument: Bl, IssueVcsBranchSearch_NeedsDocument: Rl, IssueVcsBranchSearch_RelationsDocument: El, IssueVcsBranchSearch_SubscribersDocument: Ll, IssuesDocument: zl, NotificationDocument: Ml, NotificationSubscriptionDocument: Hl, NotificationSubscriptionsDocument: Wl, NotificationsDocument: Gl, OrganizationDocument: Kl, Organization_IntegrationsDocument: Jl, Organization_LabelsDocument: $l, Organization_SubscriptionDocument: Zl, Organization_TeamsDocument: Yl, Organization_TemplatesDocument: Ql, Organization_UsersDocument: Xl, OrganizationExistsDocument: er, OrganizationInviteDocument: ir, OrganizationInvitesDocument: nr, ProjectDocument: ar, Project_CommentsDocument: tr, Project_DocumentContentDocument: dr, Project_DocumentsDocument: lr, Project_ExternalLinksDocument: rr, Project_HistoryDocument: mr, Project_InitiativesDocument: or, Project_InverseRelationsDocument: sr, Project_IssuesDocument: ur, Project_MembersDocument: kr, Project_NeedsDocument: vr, Project_ProjectMilestonesDocument: pr, Project_ProjectUpdatesDocument: cr, Project_RelationsDocument: Nr, Project_TeamsDocument: hr, ProjectFilterSuggestionDocument: fr, ProjectMilestoneDocument: br, ProjectMilestone_DocumentContentDocument: Sr, ProjectMilestone_IssuesDocument: yr, ProjectMilestonesDocument: gr, ProjectRelationDocument: Dr, ProjectRelationsDocument: Vr, ProjectStatusDocument: _r, ProjectStatusesDocument: Fr, ProjectUpdateDocument: Ar, ProjectUpdate_CommentsDocument: Tr, ProjectUpdatesDocument: wr, ProjectsDocument: Ir, PushSubscriptionTestDocument: qr, RateLimitStatusDocument: Cr, RoadmapDocument: Pr, Roadmap_ProjectsDocument: jr, RoadmapToProjectDocument: Or, RoadmapToProjectsDocument: Ur, RoadmapsDocument: xr, SearchDocumentsDocument: Br, SearchDocuments_ArchivePayloadDocument: Rr, SearchIssuesDocument: Er, SearchIssues_ArchivePayloadDocument: Lr, SearchProjectsDocument: zr, SearchProjects_ArchivePayloadDocument: Mr, SsoUrlFromEmailDocument: Hr, TeamDocument: Wr, Team_CyclesDocument: Gr, Team_GitAutomationStatesDocument: Kr, Team_IssuesDocument: Jr, Team_LabelsDocument: $r, Team_MembersDocument: Zr, Team_MembershipsDocument: Yr, Team_ProjectsDocument: Qr, Team_StatesDocument: Xr, Team_TemplatesDocument: em, Team_WebhooksDocument: im, TeamMembershipDocument: nm, TeamMembershipsDocument: am, TeamsDocument: tm, TemplateDocument: dm, TemplatesDocument: lm, TemplatesForIntegrationDocument: rm, TimeScheduleDocument: mm, TimeSchedulesDocument: om, TriageResponsibilitiesDocument: sm, TriageResponsibilityDocument: um, TriageResponsibility_ManualSelectionDocument: km, UserDocument: vm, User_AssignedIssuesDocument: pm, User_CreatedIssuesDocument: cm, User_DraftsDocument: Nm, User_TeamMembershipsDocument: hm, User_TeamsDocument: fm, UserSettingsDocument: bm, UserSettings_NotificationCategoryPreferencesDocument: Sm, UserSettings_NotificationCategoryPreferences_AppsAndIntegrationsDocument: ym, UserSettings_NotificationCategoryPreferences_AssignmentsDocument: gm, UserSettings_NotificationCategoryPreferences_CommentsAndRepliesDocument: Dm, UserSettings_NotificationCategoryPreferences_CustomersDocument: Vm, UserSettings_NotificationCategoryPreferences_DocumentChangesDocument: _m, UserSettings_NotificationCategoryPreferences_MentionsDocument: Fm, UserSettings_NotificationCategoryPreferences_PostsAndUpdatesDocument: Am, UserSettings_NotificationCategoryPreferences_ReactionsDocument: Tm, UserSettings_NotificationCategoryPreferences_RemindersDocument: wm, UserSettings_NotificationCategoryPreferences_ReviewsDocument: Im, UserSettings_NotificationCategoryPreferences_StatusChangesDocument: qm, UserSettings_NotificationCategoryPreferences_SubscriptionsDocument: Cm, UserSettings_NotificationCategoryPreferences_SystemDocument: Pm, UserSettings_NotificationCategoryPreferences_TriageDocument: jm, UserSettings_NotificationChannelPreferencesDocument: Om, UserSettings_NotificationDeliveryPreferencesDocument: Um, UserSettings_NotificationDeliveryPreferences_MobileDocument: xm, UserSettings_NotificationDeliveryPreferences_Mobile_ScheduleDocument: Bm, UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_FridayDocument: Rm, UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_MondayDocument: Em, UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SaturdayDocument: Lm, UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_SundayDocument: zm, UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_ThursdayDocument: Mm, UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_TuesdayDocument: Hm, UserSettings_NotificationDeliveryPreferences_Mobile_Schedule_WednesdayDocument: Wm, UsersDocument: Gm, VerifyGitHubEnterpriseServerInstallationDocument: Km, ViewerDocument: Jm, Viewer_AssignedIssuesDocument: $m, Viewer_CreatedIssuesDocument: Zm, Viewer_DraftsDocument: Ym, Viewer_TeamMembershipsDocument: Qm, Viewer_TeamsDocument: Xm, WebhookDocument: eo, WebhooksDocument: io, WorkflowStateDocument: no, WorkflowState_IssuesDocument: ao, WorkflowStatesDocument: to, AirbyteIntegrationConnectDocument: lo, CreateAttachmentDocument: ro, DeleteAttachmentDocument: mo, AttachmentLinkDiscordDocument: oo, AttachmentLinkFrontDocument: so, AttachmentLinkGitHubIssueDocument: uo, AttachmentLinkGitHubPrDocument: ko, AttachmentLinkGitLabMrDocument: vo, AttachmentLinkIntercomDocument: po, AttachmentLinkJiraIssueDocument: co, AttachmentLinkSlackDocument: No, AttachmentLinkUrlDocument: ho, AttachmentLinkZendeskDocument: fo, AttachmentSyncToSlackDocument: bo, UpdateAttachmentDocument: So, CreateCommentDocument: yo, DeleteCommentDocument: go, CommentResolveDocument: Do, CommentUnresolveDocument: Vo, UpdateCommentDocument: _o, CreateContactDocument: Fo, CreateCsvExportReportDocument: Ao, CreateInitiativeUpdateReminderDocument: To, CreateOrganizationFromOnboardingDocument: wo, CreateProjectUpdateReminderDocument: Io, CreateCustomViewDocument: qo, DeleteCustomViewDocument: Co, UpdateCustomViewDocument: Po, CreateCustomerDocument: jo, DeleteCustomerDocument: Oo, CustomerMergeDocument: Uo, ArchiveCustomerNeedDocument: xo, CreateCustomerNeedDocument: Bo, CustomerNeedCreateFromAttachmentDocument: Ro, DeleteCustomerNeedDocument: Eo, UnarchiveCustomerNeedDocument: Lo, UpdateCustomerNeedDocument: zo, CreateCustomerTierDocument: Mo, DeleteCustomerTierDocument: Ho, UpdateCustomerTierDocument: Wo, UpdateCustomerDocument: Go, CustomerUpsertDocument: Ko, ArchiveCycleDocument: Jo, CreateCycleDocument: $o, CycleShiftAllDocument: Zo, CycleStartUpcomingCycleTodayDocument: Yo, UpdateCycleDocument: Qo, CreateDocumentDocument: Xo, DeleteDocumentDocument: es, UnarchiveDocumentDocument: is, UpdateDocumentDocument: ns, CreateEmailIntakeAddressDocument: as, DeleteEmailIntakeAddressDocument: ts, EmailIntakeAddressRotateDocument: ds, UpdateEmailIntakeAddressDocument: ls, EmailTokenUserAccountAuthDocument: rs, EmailUnsubscribeDocument: ms, EmailUserAccountAuthChallengeDocument: os, CreateEmojiDocument: ss, DeleteEmojiDocument: us, CreateEntityExternalLinkDocument: ks, DeleteEntityExternalLinkDocument: vs, UpdateEntityExternalLinkDocument: ps, CreateFavoriteDocument: cs, DeleteFavoriteDocument: Ns, UpdateFavoriteDocument: hs, FileUploadDocument: fs, CreateGitAutomationStateDocument: bs, DeleteGitAutomationStateDocument: Ss, UpdateGitAutomationStateDocument: ys, CreateGitAutomationTargetBranchDocument: gs, DeleteGitAutomationTargetBranchDocument: Ds, UpdateGitAutomationTargetBranchDocument: Vs, GoogleUserAccountAuthDocument: _s, ImageUploadFromUrlDocument: Fs, ImportFileUploadDocument: As, ArchiveInitiativeDocument: Ts, CreateInitiativeDocument: ws, DeleteInitiativeDocument: Is, CreateInitiativeRelationDocument: qs, DeleteInitiativeRelationDocument: Cs, UpdateInitiativeRelationDocument: Ps, CreateInitiativeToProjectDocument: js, DeleteInitiativeToProjectDocument: Os, UpdateInitiativeToProjectDocument: Us, UnarchiveInitiativeDocument: xs, UpdateInitiativeDocument: Bs, ArchiveInitiativeUpdateDocument: Rs, CreateInitiativeUpdateDocument: Es, UnarchiveInitiativeUpdateDocument: Ls, UpdateInitiativeUpdateDocument: zs, ArchiveIntegrationDocument: Ms, IntegrationAsksConnectChannelDocument: Hs, DeleteIntegrationDocument: Ws, IntegrationDiscordDocument: Gs, IntegrationFigmaDocument: Ks, IntegrationFrontDocument: Js, IntegrationGitHubEnterpriseServerConnectDocument: $s, IntegrationGitHubPersonalDocument: Zs, CreateIntegrationGithubCommitDocument: Ys, IntegrationGithubConnectDocument: Qs, IntegrationGithubImportConnectDocument: Xs, IntegrationGithubImportRefreshDocument: eu, IntegrationGitlabConnectDocument: iu, IntegrationGoogleSheetsDocument: nu, IntegrationIntercomDocument: au, DeleteIntegrationIntercomDocument: tu, UpdateIntegrationIntercomSettingsDocument: du, IntegrationJiraPersonalDocument: lu, IntegrationLoomDocument: ru, IntegrationRequestDocument: mu, IntegrationSentryConnectDocument: ou, IntegrationSlackDocument: su, IntegrationSlackAsksDocument: uu, IntegrationSlackCustomViewNotificationsDocument: ku, IntegrationSlackCustomerChannelLinkDocument: vu, IntegrationSlackImportEmojisDocument: pu, IntegrationSlackOrgProjectUpdatesPostDocument: cu, IntegrationSlackPersonalDocument: Nu, IntegrationSlackPostDocument: hu, IntegrationSlackProjectPostDocument: fu, CreateIntegrationTemplateDocument: bu, DeleteIntegrationTemplateDocument: Su, IntegrationZendeskDocument: yu, CreateIntegrationsSettingsDocument: gu, UpdateIntegrationsSettingsDocument: Du, IssueAddLabelDocument: Vu, ArchiveIssueDocument: _u, CreateIssueBatchDocument: Fu, UpdateIssueBatchDocument: Au, CreateIssueDocument: Tu, DeleteIssueDocument: wu, IssueImportCreateAsanaDocument: Iu, IssueImportCreateCsvJiraDocument: qu, IssueImportCreateClubhouseDocument: Cu, IssueImportCreateGithubDocument: Pu, IssueImportCreateJiraDocument: ju, DeleteIssueImportDocument: Ou, IssueImportProcessDocument: Uu, UpdateIssueImportDocument: xu, CreateIssueLabelDocument: Bu, DeleteIssueLabelDocument: Ru, UpdateIssueLabelDocument: Eu, CreateIssueRelationDocument: Lu, DeleteIssueRelationDocument: zu, UpdateIssueRelationDocument: Mu, IssueReminderDocument: Hu, IssueRemoveLabelDocument: Wu, IssueSubscribeDocument: Gu, UnarchiveIssueDocument: Ku, IssueUnsubscribeDocument: Ju, UpdateIssueDocument: $u, JoinOrganizationFromOnboardingDocument: Zu, LeaveOrganizationDocument: Yu, LogoutDocument: Qu, LogoutAllSessionsDocument: Xu, LogoutOtherSessionsDocument: ek, LogoutSessionDocument: ik, ArchiveNotificationDocument: nk, NotificationArchiveAllDocument: ak, UpdateNotificationCategoryChannelSubscriptionDocument: tk, NotificationMarkReadAllDocument: dk, NotificationMarkUnreadAllDocument: lk, NotificationSnoozeAllDocument: rk, CreateNotificationSubscriptionDocument: mk, DeleteNotificationSubscriptionDocument: ok, UpdateNotificationSubscriptionDocument: sk, UnarchiveNotificationDocument: uk, NotificationUnsnoozeAllDocument: kk, UpdateNotificationDocument: vk, DeleteOrganizationCancelDocument: pk, DeleteOrganizationDocument: ck, OrganizationDeleteChallengeDocument: Nk, DeleteOrganizationDomainDocument: hk, CreateOrganizationInviteDocument: fk, DeleteOrganizationInviteDocument: bk, UpdateOrganizationInviteDocument: Sk, OrganizationStartTrialDocument: yk, OrganizationStartTrialForPlanDocument: gk, UpdateOrganizationDocument: Dk, ArchiveProjectDocument: Vk, CreateProjectDocument: _k, DeleteProjectDocument: Fk, CreateProjectMilestoneDocument: Ak, DeleteProjectMilestoneDocument: Tk, UpdateProjectMilestoneDocument: wk, CreateProjectRelationDocument: Ik, DeleteProjectRelationDocument: qk, UpdateProjectRelationDocument: Ck, ArchiveProjectStatusDocument: Pk, CreateProjectStatusDocument: jk, UnarchiveProjectStatusDocument: Ok, UpdateProjectStatusDocument: Uk, UnarchiveProjectDocument: xk, UpdateProjectDocument: Bk, ArchiveProjectUpdateDocument: Rk, CreateProjectUpdateDocument: Ek, DeleteProjectUpdateDocument: Lk, UnarchiveProjectUpdateDocument: zk, UpdateProjectUpdateDocument: Mk, CreatePushSubscriptionDocument: Hk, DeletePushSubscriptionDocument: Wk, CreateReactionDocument: Gk, DeleteReactionDocument: Kk, RefreshGoogleSheetsDataDocument: Jk, ResendOrganizationInviteDocument: $k, ResendOrganizationInviteByEmailDocument: Zk, ArchiveRoadmapDocument: Yk, CreateRoadmapDocument: Qk, DeleteRoadmapDocument: Xk, CreateRoadmapToProjectDocument: ev, DeleteRoadmapToProjectDocument: iv, UpdateRoadmapToProjectDocument: nv, UnarchiveRoadmapDocument: av, UpdateRoadmapDocument: tv, SamlTokenUserAccountAuthDocument: dv, CreateTeamDocument: lv, DeleteTeamCyclesDocument: rv, DeleteTeamDocument: mv, DeleteTeamKeyDocument: ov, CreateTeamMembershipDocument: sv, DeleteTeamMembershipDocument: uv, UpdateTeamMembershipDocument: kv, UnarchiveTeamDocument: vv, UpdateTeamDocument: pv, CreateTemplateDocument: cv, DeleteTemplateDocument: Nv, UpdateTemplateDocument: hv, CreateTimeScheduleDocument: fv, DeleteTimeScheduleDocument: bv, TimeScheduleRefreshIntegrationScheduleDocument: Sv, UpdateTimeScheduleDocument: yv, TimeScheduleUpsertExternalDocument: gv, CreateTriageResponsibilityDocument: Dv, DeleteTriageResponsibilityDocument: Vv, UpdateTriageResponsibilityDocument: _v, UserDemoteAdminDocument: Fv, UserDemoteMemberDocument: Av, UserDiscordConnectDocument: Tv, UserExternalUserDisconnectDocument: wv, UpdateUserFlagDocument: Iv, UserPromoteAdminDocument: qv, UserPromoteMemberDocument: Cv, UserSettingsFlagsResetDocument: Pv, UpdateUserSettingsDocument: jv, SuspendUserDocument: Ov, UnsuspendUserDocument: Uv, UpdateUserDocument: xv, CreateViewPreferencesDocument: Bv, DeleteViewPreferencesDocument: Rv, UpdateViewPreferencesDocument: Ev, CreateWebhookDocument: Lv, DeleteWebhookDocument: zv, UpdateWebhookDocument: Mv, ArchiveWorkflowStateDocument: Hv, CreateWorkflowStateDocument: Wv, UpdateWorkflowStateDocument: Gv });
function $v(e2, i2) {
  var n2 = {};
  for (var a2 in e2)
    Object.prototype.hasOwnProperty.call(e2, a2) && i2.indexOf(a2) < 0 && (n2[a2] = e2[a2]);
  if (null != e2 && "function" == typeof Object.getOwnPropertySymbols) {
    var t2 = 0;
    for (a2 = Object.getOwnPropertySymbols(e2); t2 < a2.length; t2++)
      i2.indexOf(a2[t2]) < 0 && Object.prototype.propertyIsEnumerable.call(e2, a2[t2]) && (n2[a2[t2]] = e2[a2[t2]]);
  }
  return n2;
}
function Zv(e2, i2, n2, a2) {
  return new (n2 || (n2 = Promise))(function(t2, d2) {
    function l2(e3) {
      try {
        m2(a2.next(e3));
      } catch (e4) {
        d2(e4);
      }
    }
    function r2(e3) {
      try {
        m2(a2.throw(e3));
      } catch (e4) {
        d2(e4);
      }
    }
    function m2(e3) {
      var i3;
      e3.done ? t2(e3.value) : (i3 = e3.value, i3 instanceof n2 ? i3 : new n2(function(e4) {
        e4(i3);
      })).then(l2, r2);
    }
    m2((a2 = a2.apply(e2, i2 || [])).next());
  });
}
var Yv = class {
  constructor(e2) {
    this._request = e2;
  }
  paginate(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = e2.bind(this);
      let a2 = yield n2(i2);
      const t2 = a2.nodes;
      for (; a2.pageInfo.hasNextPage; )
        a2 = yield n2(Object.assign(Object.assign({ first: 50 }, i2), { after: a2.pageInfo.endCursor })), t2.push(...a2.nodes);
      return t2;
    });
  }
};
function Qv(e2) {
  var i2, n2;
  return Object.assign(Object.assign({}, e2), { first: null !== (i2 = e2.first) && void 0 !== i2 ? i2 : e2.after ? 50 : void 0, last: null !== (n2 = e2.last) && void 0 !== n2 ? n2 : e2.before ? 50 : void 0 });
}
var Xv = class extends Yv {
  constructor(e2) {
    super(e2), this.pageInfo = new yh(e2, { hasNextPage: false, hasPreviousPage: false, __typename: "PageInfo" }), this.nodes = [];
  }
};
var ep = class extends Xv {
  constructor(e2, i2, n2, a2) {
    super(e2), this._fetch = i2, this.nodes = n2, this.pageInfo = a2;
  }
  _appendNodes(e2) {
    var i2;
    this.nodes = e2 ? [...null !== (i2 = this.nodes) && void 0 !== i2 ? i2 : [], ...e2] : this.nodes;
  }
  _prependNodes(e2) {
    var i2;
    this.nodes = e2 ? [...e2, ...null !== (i2 = this.nodes) && void 0 !== i2 ? i2 : []] : this.nodes;
  }
  _appendPageInfo(e2) {
    var i2, n2;
    this.pageInfo && (this.pageInfo.endCursor = null !== (i2 = null == e2 ? void 0 : e2.endCursor) && void 0 !== i2 ? i2 : this.pageInfo.startCursor, this.pageInfo.hasNextPage = null !== (n2 = null == e2 ? void 0 : e2.hasNextPage) && void 0 !== n2 ? n2 : this.pageInfo.hasNextPage);
  }
  _prependPageInfo(e2) {
    var i2, n2;
    this.pageInfo && (this.pageInfo.startCursor = null !== (i2 = null == e2 ? void 0 : e2.startCursor) && void 0 !== i2 ? i2 : this.pageInfo.startCursor, this.pageInfo.hasPreviousPage = null !== (n2 = null == e2 ? void 0 : e2.hasPreviousPage) && void 0 !== n2 ? n2 : this.pageInfo.hasPreviousPage);
  }
  fetchNext() {
    var e2, i2;
    return Zv(this, void 0, void 0, function* () {
      if (null === (e2 = this.pageInfo) || void 0 === e2 ? void 0 : e2.hasNextPage) {
        const e3 = yield this._fetch({ after: null === (i2 = this.pageInfo) || void 0 === i2 ? void 0 : i2.endCursor });
        this._appendNodes(null == e3 ? void 0 : e3.nodes), this._appendPageInfo(null == e3 ? void 0 : e3.pageInfo);
      }
      return Promise.resolve(this);
    });
  }
  fetchPrevious() {
    var e2, i2;
    return Zv(this, void 0, void 0, function* () {
      if (null === (e2 = this.pageInfo) || void 0 === e2 ? void 0 : e2.hasPreviousPage) {
        const e3 = yield this._fetch({ before: null === (i2 = this.pageInfo) || void 0 === i2 ? void 0 : i2.startCursor });
        this._prependNodes(null == e3 ? void 0 : e3.nodes), this._prependPageInfo(null == e3 ? void 0 : e3.pageInfo);
      }
      return Promise.resolve(this);
    });
  }
};
function ip(e2) {
  try {
    return e2 ? new Date(e2) : void 0;
  } catch (e3) {
    return;
  }
}
function np(e2) {
  try {
    return e2 ? JSON.parse(e2) : void 0;
  } catch (e3) {
    return;
  }
}
var ap = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2;
    super(e2), this.avatarUrl = null !== (n2 = i2.avatarUrl) && void 0 !== n2 ? n2 : void 0, this.id = null !== (a2 = i2.id) && void 0 !== a2 ? a2 : void 0, this.name = null !== (t2 = i2.name) && void 0 !== t2 ? t2 : void 0, this.subType = null !== (d2 = i2.subType) && void 0 !== d2 ? d2 : void 0, this.type = i2.type, this.userDisplayName = null !== (l2 = i2.userDisplayName) && void 0 !== l2 ? l2 : void 0;
  }
};
var tp = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.id = i2.id, this.label = i2.label, this.requestedSyncGroups = null !== (t2 = i2.requestedSyncGroups) && void 0 !== t2 ? t2 : void 0, this.scope = null !== (d2 = i2.scope) && void 0 !== d2 ? d2 : void 0, this.updatedAt = null !== (l2 = ip(i2.updatedAt)) && void 0 !== l2 ? l2 : new Date();
  }
};
var dp = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new tp(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var rp = class extends Yv {
  constructor(e2, i2) {
    var n2, a2;
    super(e2), this.clientId = i2.clientId, this.description = null !== (n2 = i2.description) && void 0 !== n2 ? n2 : void 0, this.developer = i2.developer, this.developerUrl = i2.developerUrl, this.id = i2.id, this.imageUrl = null !== (a2 = i2.imageUrl) && void 0 !== a2 ? a2 : void 0, this.name = i2.name;
  }
};
var op = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.archive = i2.archive, this.databaseVersion = i2.databaseVersion, this.includesDependencies = i2.includesDependencies, this.totalCount = i2.totalCount;
  }
};
var sp = class extends Yv {
  constructor(e2, i2) {
    var n2;
    super(e2), this.addBot = i2.addBot, this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.mapping = new hf(e2, i2.mapping), this._integration = null !== (n2 = i2.integration) && void 0 !== n2 ? n2 : void 0;
  }
  get integration() {
    var e2, i2;
    return (null === (e2 = this._integration) || void 0 === e2 ? void 0 : e2.id) ? new nS(this._request).fetch(null === (i2 = this._integration) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get integrationId() {
    var e2;
    return null === (e2 = this._integration) || void 0 === e2 ? void 0 : e2.id;
  }
};
var up = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.bodyData = null !== (a2 = i2.bodyData) && void 0 !== a2 ? a2 : void 0, this.createdAt = null !== (t2 = ip(i2.createdAt)) && void 0 !== t2 ? t2 : new Date(), this.groupBySource = i2.groupBySource, this.id = i2.id, this.metadata = i2.metadata, this.source = null !== (d2 = i2.source) && void 0 !== d2 ? d2 : void 0, this.sourceType = null !== (l2 = i2.sourceType) && void 0 !== l2 ? l2 : void 0, this.subtitle = null !== (r2 = i2.subtitle) && void 0 !== r2 ? r2 : void 0, this.title = i2.title, this.updatedAt = null !== (m2 = ip(i2.updatedAt)) && void 0 !== m2 ? m2 : new Date(), this.url = i2.url, this._creator = null !== (o2 = i2.creator) && void 0 !== o2 ? o2 : void 0, this._externalUserCreator = null !== (s2 = i2.externalUserCreator) && void 0 !== s2 ? s2 : void 0, this._issue = i2.issue;
  }
  get creator() {
    var e2, i2;
    return (null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._creator) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get creatorId() {
    var e2;
    return null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id;
  }
  get externalUserCreator() {
    var e2, i2;
    return (null === (e2 = this._externalUserCreator) || void 0 === e2 ? void 0 : e2.id) ? new Hb(this._request).fetch(null === (i2 = this._externalUserCreator) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get externalUserCreatorId() {
    var e2;
    return null === (e2 = this._externalUserCreator) || void 0 === e2 ? void 0 : e2.id;
  }
  get issue() {
    return new mS(this._request).fetch(this._issue.id);
  }
  get issueId() {
    var e2;
    return null === (e2 = this._issue) || void 0 === e2 ? void 0 : e2.id;
  }
  create(e2) {
    return new by(this._request).fetch(e2);
  }
  delete() {
    return new Sy(this._request).fetch(this.id);
  }
  update(e2) {
    return new Cy(this._request).fetch(this.id, e2);
  }
};
var kp = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new up(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var vp = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._attachment = i2.attachment;
  }
  get attachment() {
    return new cb(this._request).fetch(this._attachment.id);
  }
  get attachmentId() {
    var e2;
    return null === (e2 = this._attachment) || void 0 === e2 ? void 0 : e2.id;
  }
};
var cp = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2;
    super(e2), this.actorId = null !== (n2 = i2.actorId) && void 0 !== n2 ? n2 : void 0, this.archivedAt = null !== (a2 = ip(i2.archivedAt)) && void 0 !== a2 ? a2 : void 0, this.countryCode = null !== (t2 = i2.countryCode) && void 0 !== t2 ? t2 : void 0, this.createdAt = null !== (d2 = ip(i2.createdAt)) && void 0 !== d2 ? d2 : new Date(), this.id = i2.id, this.ip = null !== (l2 = i2.ip) && void 0 !== l2 ? l2 : void 0, this.metadata = null !== (r2 = i2.metadata) && void 0 !== r2 ? r2 : void 0, this.requestInformation = null !== (m2 = i2.requestInformation) && void 0 !== m2 ? m2 : void 0, this.type = i2.type, this.updatedAt = null !== (o2 = ip(i2.updatedAt)) && void 0 !== o2 ? o2 : new Date(), this._actor = null !== (s2 = i2.actor) && void 0 !== s2 ? s2 : void 0;
  }
  get actor() {
    var e2, i2;
    return (null === (e2 = this._actor) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._actor) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get organization() {
    return new AS(this._request).fetch();
  }
};
var Np = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new cp(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var hp = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.description = i2.description, this.type = i2.type;
  }
};
var fp = class extends Yv {
  constructor(e2, i2) {
    var n2, a2;
    super(e2), this.allowedAuthServices = i2.allowedAuthServices, this.deletionRequestedAt = null !== (n2 = ip(i2.deletionRequestedAt)) && void 0 !== n2 ? n2 : void 0, this.enabled = i2.enabled, this.id = i2.id, this.logoUrl = null !== (a2 = i2.logoUrl) && void 0 !== a2 ? a2 : void 0, this.name = i2.name, this.previousUrlKeys = i2.previousUrlKeys, this.region = i2.region, this.samlEnabled = i2.samlEnabled, this.scimEnabled = i2.scimEnabled, this.serviceId = i2.serviceId, this.urlKey = i2.urlKey, this.userCount = i2.userCount, this.releaseChannel = i2.releaseChannel;
  }
};
var bp = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2;
    super(e2), this.allowDomainAccess = null !== (n2 = i2.allowDomainAccess) && void 0 !== n2 ? n2 : void 0, this.email = i2.email, this.id = i2.id, this.lastUsedOrganizationId = null !== (a2 = i2.lastUsedOrganizationId) && void 0 !== a2 ? a2 : void 0, this.token = null !== (t2 = i2.token) && void 0 !== t2 ? t2 : void 0, this.availableOrganizations = i2.availableOrganizations ? i2.availableOrganizations.map((i3) => new fp(e2, i3)) : void 0, this.lockedOrganizations = i2.lockedOrganizations ? i2.lockedOrganizations.map((i3) => new fp(e2, i3)) : void 0, this.lockedUsers = i2.lockedUsers.map((i3) => new Sp(e2, i3)), this.users = i2.users.map((i3) => new Sp(e2, i3));
  }
};
var Sp = class extends Yv {
  constructor(e2, i2) {
    var n2;
    super(e2), this.active = i2.active, this.avatarUrl = null !== (n2 = i2.avatarUrl) && void 0 !== n2 ? n2 : void 0, this.displayName = i2.displayName, this.email = i2.email, this.id = i2.id, this.name = i2.name, this.userAccountId = i2.userAccountId, this.organization = new fp(e2, i2.organization), this.role = i2.role;
  }
};
var yp = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2, u2, k2, v2, p2, c2;
    super(e2), this.browserType = null !== (n2 = i2.browserType) && void 0 !== n2 ? n2 : void 0, this.client = null !== (a2 = i2.client) && void 0 !== a2 ? a2 : void 0, this.countryCodes = i2.countryCodes, this.createdAt = null !== (t2 = ip(i2.createdAt)) && void 0 !== t2 ? t2 : new Date(), this.id = i2.id, this.ip = null !== (d2 = i2.ip) && void 0 !== d2 ? d2 : void 0, this.isCurrentSession = i2.isCurrentSession, this.lastActiveAt = null !== (l2 = ip(i2.lastActiveAt)) && void 0 !== l2 ? l2 : void 0, this.location = null !== (r2 = i2.location) && void 0 !== r2 ? r2 : void 0, this.locationCity = null !== (m2 = i2.locationCity) && void 0 !== m2 ? m2 : void 0, this.locationCountry = null !== (o2 = i2.locationCountry) && void 0 !== o2 ? o2 : void 0, this.locationCountryCode = null !== (s2 = i2.locationCountryCode) && void 0 !== s2 ? s2 : void 0, this.locationRegionCode = null !== (u2 = i2.locationRegionCode) && void 0 !== u2 ? u2 : void 0, this.name = i2.name, this.operatingSystem = null !== (k2 = i2.operatingSystem) && void 0 !== k2 ? k2 : void 0, this.service = null !== (v2 = i2.service) && void 0 !== v2 ? v2 : void 0, this.updatedAt = null !== (p2 = ip(i2.updatedAt)) && void 0 !== p2 ? p2 : new Date(), this.userAgent = null !== (c2 = i2.userAgent) && void 0 !== c2 ? c2 : void 0, this.type = i2.type;
  }
};
var Dp = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2, u2, k2, v2, p2, c2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.body = i2.body, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.editedAt = null !== (t2 = ip(i2.editedAt)) && void 0 !== t2 ? t2 : void 0, this.id = i2.id, this.quotedText = null !== (d2 = i2.quotedText) && void 0 !== d2 ? d2 : void 0, this.reactionData = i2.reactionData, this.resolvedAt = null !== (l2 = ip(i2.resolvedAt)) && void 0 !== l2 ? l2 : void 0, this.updatedAt = null !== (r2 = ip(i2.updatedAt)) && void 0 !== r2 ? r2 : new Date(), this.url = i2.url, this.botActor = i2.botActor ? new ap(e2, i2.botActor) : void 0, this.documentContent = i2.documentContent ? new ac(e2, i2.documentContent) : void 0, this.externalThread = i2.externalThread ? new yf(e2, i2.externalThread) : void 0, this.reactions = i2.reactions.map((i3) => new lf(e2, i3)), this._externalUser = null !== (m2 = i2.externalUser) && void 0 !== m2 ? m2 : void 0, this._initiativeUpdate = null !== (o2 = i2.initiativeUpdate) && void 0 !== o2 ? o2 : void 0, this._issue = null !== (s2 = i2.issue) && void 0 !== s2 ? s2 : void 0, this._parent = null !== (u2 = i2.parent) && void 0 !== u2 ? u2 : void 0, this._projectUpdate = null !== (k2 = i2.projectUpdate) && void 0 !== k2 ? k2 : void 0, this._resolvingComment = null !== (v2 = i2.resolvingComment) && void 0 !== v2 ? v2 : void 0, this._resolvingUser = null !== (p2 = i2.resolvingUser) && void 0 !== p2 ? p2 : void 0, this._user = null !== (c2 = i2.user) && void 0 !== c2 ? c2 : void 0;
  }
  get externalUser() {
    var e2, i2;
    return (null === (e2 = this._externalUser) || void 0 === e2 ? void 0 : e2.id) ? new Hb(this._request).fetch(null === (i2 = this._externalUser) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get externalUserId() {
    var e2;
    return null === (e2 = this._externalUser) || void 0 === e2 ? void 0 : e2.id;
  }
  get initiativeUpdate() {
    var e2, i2;
    return (null === (e2 = this._initiativeUpdate) || void 0 === e2 ? void 0 : e2.id) ? new Xb(this._request).fetch(null === (i2 = this._initiativeUpdate) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get initiativeUpdateId() {
    var e2;
    return null === (e2 = this._initiativeUpdate) || void 0 === e2 ? void 0 : e2.id;
  }
  get issue() {
    var e2, i2;
    return (null === (e2 = this._issue) || void 0 === e2 ? void 0 : e2.id) ? new mS(this._request).fetch(null === (i2 = this._issue) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get issueId() {
    var e2;
    return null === (e2 = this._issue) || void 0 === e2 ? void 0 : e2.id;
  }
  get parent() {
    var e2, i2;
    return (null === (e2 = this._parent) || void 0 === e2 ? void 0 : e2.id) ? new Db(this._request).fetch({ id: null === (i2 = this._parent) || void 0 === i2 ? void 0 : i2.id }) : void 0;
  }
  get parentId() {
    var e2;
    return null === (e2 = this._parent) || void 0 === e2 ? void 0 : e2.id;
  }
  get projectUpdate() {
    var e2, i2;
    return (null === (e2 = this._projectUpdate) || void 0 === e2 ? void 0 : e2.id) ? new RS(this._request).fetch(null === (i2 = this._projectUpdate) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get projectUpdateId() {
    var e2;
    return null === (e2 = this._projectUpdate) || void 0 === e2 ? void 0 : e2.id;
  }
  get resolvingComment() {
    var e2, i2;
    return (null === (e2 = this._resolvingComment) || void 0 === e2 ? void 0 : e2.id) ? new Db(this._request).fetch({ id: null === (i2 = this._resolvingComment) || void 0 === i2 ? void 0 : i2.id }) : void 0;
  }
  get resolvingCommentId() {
    var e2;
    return null === (e2 = this._resolvingComment) || void 0 === e2 ? void 0 : e2.id;
  }
  get resolvingUser() {
    var e2, i2;
    return (null === (e2 = this._resolvingUser) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._resolvingUser) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get resolvingUserId() {
    var e2;
    return null === (e2 = this._resolvingUser) || void 0 === e2 ? void 0 : e2.id;
  }
  get user() {
    var e2, i2;
    return (null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._user) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get userId() {
    var e2;
    return null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id;
  }
  children(e2) {
    return new NF(this._request, e2).fetch(e2);
  }
  create(e2) {
    return new Py(this._request).fetch(e2);
  }
  delete() {
    return new jy(this._request).fetch(this.id);
  }
  update(e2) {
    return new xy(this._request).fetch(this.id, e2);
  }
};
var Vp = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new Dp(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var _p = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._comment = i2.comment;
  }
  get comment() {
    return new Db(this._request).fetch({ id: this._comment.id });
  }
  get commentId() {
    var e2;
    return null === (e2 = this._comment) || void 0 === e2 ? void 0 : e2.id;
  }
};
var Fp = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.success = i2.success;
  }
};
var Ap = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.success = i2.success;
  }
};
var Tp = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.organization = new fp(e2, i2.organization), this.user = new Sp(e2, i2.user);
  }
};
var wp = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2, u2, k2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.color = null !== (a2 = i2.color) && void 0 !== a2 ? a2 : void 0, this.createdAt = null !== (t2 = ip(i2.createdAt)) && void 0 !== t2 ? t2 : new Date(), this.description = null !== (d2 = i2.description) && void 0 !== d2 ? d2 : void 0, this.feedItemFilterData = null !== (l2 = i2.feedItemFilterData) && void 0 !== l2 ? l2 : void 0, this.filterData = i2.filterData, this.filters = i2.filters, this.icon = null !== (r2 = i2.icon) && void 0 !== r2 ? r2 : void 0, this.id = i2.id, this.modelName = i2.modelName, this.name = i2.name, this.projectFilterData = null !== (m2 = i2.projectFilterData) && void 0 !== m2 ? m2 : void 0, this.shared = i2.shared, this.slugId = null !== (o2 = i2.slugId) && void 0 !== o2 ? o2 : void 0, this.updatedAt = null !== (s2 = ip(i2.updatedAt)) && void 0 !== s2 ? s2 : new Date(), this.organizationViewPreferences = i2.organizationViewPreferences ? new eb(e2, i2.organizationViewPreferences) : void 0, this.userViewPreferences = i2.userViewPreferences ? new eb(e2, i2.userViewPreferences) : void 0, this.viewPreferencesValues = i2.viewPreferencesValues ? new nb(e2, i2.viewPreferencesValues) : void 0, this._creator = i2.creator, this._owner = i2.owner, this._team = null !== (u2 = i2.team) && void 0 !== u2 ? u2 : void 0, this._updatedBy = null !== (k2 = i2.updatedBy) && void 0 !== k2 ? k2 : void 0;
  }
  get creator() {
    return new oy(this._request).fetch(this._creator.id);
  }
  get creatorId() {
    var e2;
    return null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id;
  }
  get organization() {
    return new AS(this._request).fetch();
  }
  get owner() {
    return new oy(this._request).fetch(this._owner.id);
  }
  get ownerId() {
    var e2;
    return null === (e2 = this._owner) || void 0 === e2 ? void 0 : e2.id;
  }
  get team() {
    var e2, i2;
    return (null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id) ? new QS(this._request).fetch(null === (i2 = this._team) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get teamId() {
    var e2;
    return null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id;
  }
  get updatedBy() {
    var e2, i2;
    return (null === (e2 = this._updatedBy) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._updatedBy) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get updatedById() {
    var e2;
    return null === (e2 = this._updatedBy) || void 0 === e2 ? void 0 : e2.id;
  }
  issues(e2) {
    return new bF(this._request, this.id, e2).fetch(e2);
  }
  projects(e2) {
    return new yF(this._request, this.id, e2).fetch(e2);
  }
  create(e2) {
    return new My(this._request).fetch(e2);
  }
  delete() {
    return new Hy(this._request).fetch(this.id);
  }
  update(e2) {
    return new Wy(this._request).fetch(this.id, e2);
  }
};
var Ip = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new wp(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var qp = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.hasSubscribers = i2.hasSubscribers;
  }
};
var Cp = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2, u2, k2, v2;
    super(e2), this.active = i2.active, this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.id = i2.id, this.notificationSubscriptionTypes = i2.notificationSubscriptionTypes, this.updatedAt = null !== (t2 = ip(i2.updatedAt)) && void 0 !== t2 ? t2 : new Date(), this.contextViewType = null !== (d2 = i2.contextViewType) && void 0 !== d2 ? d2 : void 0, this.userContextViewType = null !== (l2 = i2.userContextViewType) && void 0 !== l2 ? l2 : void 0, this._customView = i2.customView, this._customer = null !== (r2 = i2.customer) && void 0 !== r2 ? r2 : void 0, this._cycle = null !== (m2 = i2.cycle) && void 0 !== m2 ? m2 : void 0, this._initiative = null !== (o2 = i2.initiative) && void 0 !== o2 ? o2 : void 0, this._label = null !== (s2 = i2.label) && void 0 !== s2 ? s2 : void 0, this._project = null !== (u2 = i2.project) && void 0 !== u2 ? u2 : void 0, this._subscriber = i2.subscriber, this._team = null !== (k2 = i2.team) && void 0 !== k2 ? k2 : void 0, this._user = null !== (v2 = i2.user) && void 0 !== v2 ? v2 : void 0;
  }
  get customView() {
    return new _b(this._request).fetch(this._customView.id);
  }
  get customViewId() {
    var e2;
    return null === (e2 = this._customView) || void 0 === e2 ? void 0 : e2.id;
  }
  get customer() {
    var e2, i2;
    return (null === (e2 = this._customer) || void 0 === e2 ? void 0 : e2.id) ? new Tb(this._request).fetch(null === (i2 = this._customer) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get customerId() {
    var e2;
    return null === (e2 = this._customer) || void 0 === e2 ? void 0 : e2.id;
  }
  get cycle() {
    var e2, i2;
    return (null === (e2 = this._cycle) || void 0 === e2 ? void 0 : e2.id) ? new Ub(this._request).fetch(null === (i2 = this._cycle) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get cycleId() {
    var e2;
    return null === (e2 = this._cycle) || void 0 === e2 ? void 0 : e2.id;
  }
  get initiative() {
    var e2, i2;
    return (null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id) ? new Jb(this._request).fetch(null === (i2 = this._initiative) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get initiativeId() {
    var e2;
    return null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id;
  }
  get label() {
    var e2, i2;
    return (null === (e2 = this._label) || void 0 === e2 ? void 0 : e2.id) ? new pS(this._request).fetch(null === (i2 = this._label) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get labelId() {
    var e2;
    return null === (e2 = this._label) || void 0 === e2 ? void 0 : e2.id;
  }
  get project() {
    var e2, i2;
    return (null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id) ? new qS(this._request).fetch(null === (i2 = this._project) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get projectId() {
    var e2;
    return null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id;
  }
  get subscriber() {
    return new oy(this._request).fetch(this._subscriber.id);
  }
  get subscriberId() {
    var e2;
    return null === (e2 = this._subscriber) || void 0 === e2 ? void 0 : e2.id;
  }
  get team() {
    var e2, i2;
    return (null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id) ? new QS(this._request).fetch(null === (i2 = this._team) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get teamId() {
    var e2;
    return null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id;
  }
  get user() {
    var e2, i2;
    return (null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._user) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get userId() {
    var e2;
    return null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id;
  }
};
var Pp = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._customView = i2.customView;
  }
  get customView() {
    return new _b(this._request).fetch(this._customView.id);
  }
  get customViewId() {
    var e2;
    return null === (e2 = this._customView) || void 0 === e2 ? void 0 : e2.id;
  }
};
var Op = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2, u2, k2;
    super(e2), this.approximateNeedCount = i2.approximateNeedCount, this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.domains = i2.domains, this.externalIds = i2.externalIds, this.id = i2.id, this.logoUrl = null !== (t2 = i2.logoUrl) && void 0 !== t2 ? t2 : void 0, this.mainSourceId = null !== (d2 = i2.mainSourceId) && void 0 !== d2 ? d2 : void 0, this.name = i2.name, this.revenue = null !== (l2 = i2.revenue) && void 0 !== l2 ? l2 : void 0, this.size = null !== (r2 = i2.size) && void 0 !== r2 ? r2 : void 0, this.slackChannelId = null !== (m2 = i2.slackChannelId) && void 0 !== m2 ? m2 : void 0, this.slugId = i2.slugId, this.updatedAt = null !== (o2 = ip(i2.updatedAt)) && void 0 !== o2 ? o2 : new Date(), this._integration = null !== (s2 = i2.integration) && void 0 !== s2 ? s2 : void 0, this._owner = null !== (u2 = i2.owner) && void 0 !== u2 ? u2 : void 0, this._status = i2.status, this._tier = null !== (k2 = i2.tier) && void 0 !== k2 ? k2 : void 0;
  }
  get integration() {
    var e2, i2;
    return (null === (e2 = this._integration) || void 0 === e2 ? void 0 : e2.id) ? new nS(this._request).fetch(null === (i2 = this._integration) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get integrationId() {
    var e2;
    return null === (e2 = this._integration) || void 0 === e2 ? void 0 : e2.id;
  }
  get owner() {
    var e2, i2;
    return (null === (e2 = this._owner) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._owner) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get ownerId() {
    var e2;
    return null === (e2 = this._owner) || void 0 === e2 ? void 0 : e2.id;
  }
  get status() {
    return new qb(this._request).fetch(this._status.id);
  }
  get statusId() {
    var e2;
    return null === (e2 = this._status) || void 0 === e2 ? void 0 : e2.id;
  }
  get tier() {
    var e2, i2;
    return (null === (e2 = this._tier) || void 0 === e2 ? void 0 : e2.id) ? new Pb(this._request).fetch(null === (i2 = this._tier) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get tierId() {
    var e2;
    return null === (e2 = this._tier) || void 0 === e2 ? void 0 : e2.id;
  }
  create(e2) {
    return new Gy(this._request).fetch(e2);
  }
  delete() {
    return new Ky(this._request).fetch(this.id);
  }
  update(e2) {
    return new tg(this._request).fetch(this.id, e2);
  }
};
var Up = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new Op(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var xp = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2, u2, k2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.body = null !== (a2 = i2.body) && void 0 !== a2 ? a2 : void 0, this.createdAt = null !== (t2 = ip(i2.createdAt)) && void 0 !== t2 ? t2 : new Date(), this.id = i2.id, this.priority = i2.priority, this.updatedAt = null !== (d2 = ip(i2.updatedAt)) && void 0 !== d2 ? d2 : new Date(), this.url = null !== (l2 = i2.url) && void 0 !== l2 ? l2 : void 0, this._attachment = null !== (r2 = i2.attachment) && void 0 !== r2 ? r2 : void 0, this._comment = null !== (m2 = i2.comment) && void 0 !== m2 ? m2 : void 0, this._creator = null !== (o2 = i2.creator) && void 0 !== o2 ? o2 : void 0, this._customer = null !== (s2 = i2.customer) && void 0 !== s2 ? s2 : void 0, this._issue = null !== (u2 = i2.issue) && void 0 !== u2 ? u2 : void 0, this._project = null !== (k2 = i2.project) && void 0 !== k2 ? k2 : void 0;
  }
  get attachment() {
    var e2, i2;
    return (null === (e2 = this._attachment) || void 0 === e2 ? void 0 : e2.id) ? new cb(this._request).fetch(null === (i2 = this._attachment) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get attachmentId() {
    var e2;
    return null === (e2 = this._attachment) || void 0 === e2 ? void 0 : e2.id;
  }
  get comment() {
    var e2, i2;
    return (null === (e2 = this._comment) || void 0 === e2 ? void 0 : e2.id) ? new Db(this._request).fetch({ id: null === (i2 = this._comment) || void 0 === i2 ? void 0 : i2.id }) : void 0;
  }
  get commentId() {
    var e2;
    return null === (e2 = this._comment) || void 0 === e2 ? void 0 : e2.id;
  }
  get creator() {
    var e2, i2;
    return (null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._creator) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get creatorId() {
    var e2;
    return null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id;
  }
  get customer() {
    var e2, i2;
    return (null === (e2 = this._customer) || void 0 === e2 ? void 0 : e2.id) ? new Tb(this._request).fetch(null === (i2 = this._customer) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get customerId() {
    var e2;
    return null === (e2 = this._customer) || void 0 === e2 ? void 0 : e2.id;
  }
  get issue() {
    var e2, i2;
    return (null === (e2 = this._issue) || void 0 === e2 ? void 0 : e2.id) ? new mS(this._request).fetch(null === (i2 = this._issue) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get issueId() {
    var e2;
    return null === (e2 = this._issue) || void 0 === e2 ? void 0 : e2.id;
  }
  get project() {
    var e2, i2;
    return (null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id) ? new qS(this._request).fetch(null === (i2 = this._project) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get projectId() {
    var e2;
    return null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id;
  }
  archive() {
    return new $y(this._request).fetch(this.id);
  }
  create(e2) {
    return new Zy(this._request).fetch(e2);
  }
  delete(e2) {
    return new Qy(this._request).fetch(this.id, e2);
  }
  unarchive() {
    return new Xy(this._request).fetch(this.id);
  }
  update(e2) {
    return new eg(this._request).fetch(this.id, e2);
  }
};
var Bp = class extends Yv {
  constructor(e2, i2) {
    var n2;
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._entity = null !== (n2 = i2.entity) && void 0 !== n2 ? n2 : void 0;
  }
  get entity() {
    var e2, i2;
    return (null === (e2 = this._entity) || void 0 === e2 ? void 0 : e2.id) ? new wb(this._request).fetch({ id: null === (i2 = this._entity) || void 0 === i2 ? void 0 : i2.id }) : void 0;
  }
  get entityId() {
    var e2;
    return null === (e2 = this._entity) || void 0 === e2 ? void 0 : e2.id;
  }
};
var Rp = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new xp(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var Ep = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._need = i2.need;
  }
  get need() {
    return new wb(this._request).fetch({ id: this._need.id });
  }
  get needId() {
    var e2;
    return null === (e2 = this._need) || void 0 === e2 ? void 0 : e2.id;
  }
};
var Lp = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2, u2, k2, v2;
    super(e2), this.active = i2.active, this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.id = i2.id, this.notificationSubscriptionTypes = i2.notificationSubscriptionTypes, this.updatedAt = null !== (t2 = ip(i2.updatedAt)) && void 0 !== t2 ? t2 : new Date(), this.contextViewType = null !== (d2 = i2.contextViewType) && void 0 !== d2 ? d2 : void 0, this.userContextViewType = null !== (l2 = i2.userContextViewType) && void 0 !== l2 ? l2 : void 0, this._customView = null !== (r2 = i2.customView) && void 0 !== r2 ? r2 : void 0, this._customer = i2.customer, this._cycle = null !== (m2 = i2.cycle) && void 0 !== m2 ? m2 : void 0, this._initiative = null !== (o2 = i2.initiative) && void 0 !== o2 ? o2 : void 0, this._label = null !== (s2 = i2.label) && void 0 !== s2 ? s2 : void 0, this._project = null !== (u2 = i2.project) && void 0 !== u2 ? u2 : void 0, this._subscriber = i2.subscriber, this._team = null !== (k2 = i2.team) && void 0 !== k2 ? k2 : void 0, this._user = null !== (v2 = i2.user) && void 0 !== v2 ? v2 : void 0;
  }
  get customView() {
    var e2, i2;
    return (null === (e2 = this._customView) || void 0 === e2 ? void 0 : e2.id) ? new _b(this._request).fetch(null === (i2 = this._customView) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get customViewId() {
    var e2;
    return null === (e2 = this._customView) || void 0 === e2 ? void 0 : e2.id;
  }
  get customer() {
    return new Tb(this._request).fetch(this._customer.id);
  }
  get customerId() {
    var e2;
    return null === (e2 = this._customer) || void 0 === e2 ? void 0 : e2.id;
  }
  get cycle() {
    var e2, i2;
    return (null === (e2 = this._cycle) || void 0 === e2 ? void 0 : e2.id) ? new Ub(this._request).fetch(null === (i2 = this._cycle) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get cycleId() {
    var e2;
    return null === (e2 = this._cycle) || void 0 === e2 ? void 0 : e2.id;
  }
  get initiative() {
    var e2, i2;
    return (null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id) ? new Jb(this._request).fetch(null === (i2 = this._initiative) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get initiativeId() {
    var e2;
    return null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id;
  }
  get label() {
    var e2, i2;
    return (null === (e2 = this._label) || void 0 === e2 ? void 0 : e2.id) ? new pS(this._request).fetch(null === (i2 = this._label) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get labelId() {
    var e2;
    return null === (e2 = this._label) || void 0 === e2 ? void 0 : e2.id;
  }
  get project() {
    var e2, i2;
    return (null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id) ? new qS(this._request).fetch(null === (i2 = this._project) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get projectId() {
    var e2;
    return null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id;
  }
  get subscriber() {
    return new oy(this._request).fetch(this._subscriber.id);
  }
  get subscriberId() {
    var e2;
    return null === (e2 = this._subscriber) || void 0 === e2 ? void 0 : e2.id;
  }
  get team() {
    var e2, i2;
    return (null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id) ? new QS(this._request).fetch(null === (i2 = this._team) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get teamId() {
    var e2;
    return null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id;
  }
  get user() {
    var e2, i2;
    return (null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._user) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get userId() {
    var e2;
    return null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id;
  }
};
var zp = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._customer = i2.customer;
  }
  get customer() {
    return new Tb(this._request).fetch(this._customer.id);
  }
  get customerId() {
    var e2;
    return null === (e2 = this._customer) || void 0 === e2 ? void 0 : e2.id;
  }
};
var Mp = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.color = i2.color, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.description = null !== (t2 = i2.description) && void 0 !== t2 ? t2 : void 0, this.id = i2.id, this.name = i2.name, this.position = i2.position, this.updatedAt = null !== (d2 = ip(i2.updatedAt)) && void 0 !== d2 ? d2 : new Date(), this.type = i2.type;
  }
};
var Hp = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new Mp(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var Wp = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.color = i2.color, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.description = null !== (t2 = i2.description) && void 0 !== t2 ? t2 : void 0, this.displayName = i2.displayName, this.id = i2.id, this.name = i2.name, this.position = i2.position, this.updatedAt = null !== (d2 = ip(i2.updatedAt)) && void 0 !== d2 ? d2 : new Date();
  }
  create(e2) {
    return new ig(this._request).fetch(e2);
  }
  delete() {
    return new ng(this._request).fetch(this.id);
  }
  update(e2) {
    return new ag(this._request).fetch(this.id, e2);
  }
};
var Gp = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new Wp(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var Kp = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._tier = i2.tier;
  }
  get tier() {
    return new Pb(this._request).fetch(this._tier.id);
  }
  get tierId() {
    var e2;
    return null === (e2 = this._tier) || void 0 === e2 ? void 0 : e2.id;
  }
};
var Jp = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2, u2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.autoArchivedAt = null !== (a2 = ip(i2.autoArchivedAt)) && void 0 !== a2 ? a2 : void 0, this.completedAt = null !== (t2 = ip(i2.completedAt)) && void 0 !== t2 ? t2 : void 0, this.completedIssueCountHistory = i2.completedIssueCountHistory, this.completedScopeHistory = i2.completedScopeHistory, this.createdAt = null !== (d2 = ip(i2.createdAt)) && void 0 !== d2 ? d2 : new Date(), this.description = null !== (l2 = i2.description) && void 0 !== l2 ? l2 : void 0, this.endsAt = null !== (r2 = ip(i2.endsAt)) && void 0 !== r2 ? r2 : new Date(), this.id = i2.id, this.inProgressScopeHistory = i2.inProgressScopeHistory, this.issueCountHistory = i2.issueCountHistory, this.name = null !== (m2 = i2.name) && void 0 !== m2 ? m2 : void 0, this.number = i2.number, this.progress = i2.progress, this.scopeHistory = i2.scopeHistory, this.startsAt = null !== (o2 = ip(i2.startsAt)) && void 0 !== o2 ? o2 : new Date(), this.updatedAt = null !== (s2 = ip(i2.updatedAt)) && void 0 !== s2 ? s2 : new Date(), this._inheritedFrom = null !== (u2 = i2.inheritedFrom) && void 0 !== u2 ? u2 : void 0, this._team = i2.team;
  }
  get inheritedFrom() {
    var e2, i2;
    return (null === (e2 = this._inheritedFrom) || void 0 === e2 ? void 0 : e2.id) ? new Ub(this._request).fetch(null === (i2 = this._inheritedFrom) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get inheritedFromId() {
    var e2;
    return null === (e2 = this._inheritedFrom) || void 0 === e2 ? void 0 : e2.id;
  }
  get team() {
    return new QS(this._request).fetch(this._team.id);
  }
  get teamId() {
    var e2;
    return null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id;
  }
  issues(e2) {
    return new FF(this._request, this.id, e2).fetch(e2);
  }
  uncompletedIssuesUponClose(e2) {
    return new AF(this._request, this.id, e2).fetch(e2);
  }
  archive() {
    return new lg(this._request).fetch(this.id);
  }
  create(e2) {
    return new rg(this._request).fetch(e2);
  }
  update(e2) {
    return new sg(this._request).fetch(this.id, e2);
  }
};
var $p = class extends Yv {
  constructor(e2, i2) {
    var n2;
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._entity = null !== (n2 = i2.entity) && void 0 !== n2 ? n2 : void 0;
  }
  get entity() {
    var e2, i2;
    return (null === (e2 = this._entity) || void 0 === e2 ? void 0 : e2.id) ? new Ub(this._request).fetch(null === (i2 = this._entity) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get entityId() {
    var e2;
    return null === (e2 = this._entity) || void 0 === e2 ? void 0 : e2.id;
  }
};
var Zp = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new Jp(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var Yp = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2, u2, k2, v2;
    super(e2), this.active = i2.active, this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.id = i2.id, this.notificationSubscriptionTypes = i2.notificationSubscriptionTypes, this.updatedAt = null !== (t2 = ip(i2.updatedAt)) && void 0 !== t2 ? t2 : new Date(), this.contextViewType = null !== (d2 = i2.contextViewType) && void 0 !== d2 ? d2 : void 0, this.userContextViewType = null !== (l2 = i2.userContextViewType) && void 0 !== l2 ? l2 : void 0, this._customView = null !== (r2 = i2.customView) && void 0 !== r2 ? r2 : void 0, this._customer = null !== (m2 = i2.customer) && void 0 !== m2 ? m2 : void 0, this._cycle = i2.cycle, this._initiative = null !== (o2 = i2.initiative) && void 0 !== o2 ? o2 : void 0, this._label = null !== (s2 = i2.label) && void 0 !== s2 ? s2 : void 0, this._project = null !== (u2 = i2.project) && void 0 !== u2 ? u2 : void 0, this._subscriber = i2.subscriber, this._team = null !== (k2 = i2.team) && void 0 !== k2 ? k2 : void 0, this._user = null !== (v2 = i2.user) && void 0 !== v2 ? v2 : void 0;
  }
  get customView() {
    var e2, i2;
    return (null === (e2 = this._customView) || void 0 === e2 ? void 0 : e2.id) ? new _b(this._request).fetch(null === (i2 = this._customView) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get customViewId() {
    var e2;
    return null === (e2 = this._customView) || void 0 === e2 ? void 0 : e2.id;
  }
  get customer() {
    var e2, i2;
    return (null === (e2 = this._customer) || void 0 === e2 ? void 0 : e2.id) ? new Tb(this._request).fetch(null === (i2 = this._customer) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get customerId() {
    var e2;
    return null === (e2 = this._customer) || void 0 === e2 ? void 0 : e2.id;
  }
  get cycle() {
    return new Ub(this._request).fetch(this._cycle.id);
  }
  get cycleId() {
    var e2;
    return null === (e2 = this._cycle) || void 0 === e2 ? void 0 : e2.id;
  }
  get initiative() {
    var e2, i2;
    return (null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id) ? new Jb(this._request).fetch(null === (i2 = this._initiative) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get initiativeId() {
    var e2;
    return null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id;
  }
  get label() {
    var e2, i2;
    return (null === (e2 = this._label) || void 0 === e2 ? void 0 : e2.id) ? new pS(this._request).fetch(null === (i2 = this._label) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get labelId() {
    var e2;
    return null === (e2 = this._label) || void 0 === e2 ? void 0 : e2.id;
  }
  get project() {
    var e2, i2;
    return (null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id) ? new qS(this._request).fetch(null === (i2 = this._project) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get projectId() {
    var e2;
    return null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id;
  }
  get subscriber() {
    return new oy(this._request).fetch(this._subscriber.id);
  }
  get subscriberId() {
    var e2;
    return null === (e2 = this._subscriber) || void 0 === e2 ? void 0 : e2.id;
  }
  get team() {
    var e2, i2;
    return (null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id) ? new QS(this._request).fetch(null === (i2 = this._team) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get teamId() {
    var e2;
    return null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id;
  }
  get user() {
    var e2, i2;
    return (null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._user) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get userId() {
    var e2;
    return null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id;
  }
};
var Qp = class extends Yv {
  constructor(e2, i2) {
    var n2;
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._cycle = null !== (n2 = i2.cycle) && void 0 !== n2 ? n2 : void 0;
  }
  get cycle() {
    var e2, i2;
    return (null === (e2 = this._cycle) || void 0 === e2 ? void 0 : e2.id) ? new Ub(this._request).fetch(null === (i2 = this._cycle) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get cycleId() {
    var e2;
    return null === (e2 = this._cycle) || void 0 === e2 ? void 0 : e2.id;
  }
};
var Xp = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.entityId = i2.entityId, this.lastSyncId = i2.lastSyncId, this.success = i2.success;
  }
};
var ec = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2, u2, k2, v2, p2, c2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.color = null !== (a2 = i2.color) && void 0 !== a2 ? a2 : void 0, this.content = null !== (t2 = i2.content) && void 0 !== t2 ? t2 : void 0, this.createdAt = null !== (d2 = ip(i2.createdAt)) && void 0 !== d2 ? d2 : new Date(), this.documentContentId = null !== (l2 = i2.documentContentId) && void 0 !== l2 ? l2 : void 0, this.hiddenAt = null !== (r2 = ip(i2.hiddenAt)) && void 0 !== r2 ? r2 : void 0, this.icon = null !== (m2 = i2.icon) && void 0 !== m2 ? m2 : void 0, this.id = i2.id, this.slugId = i2.slugId, this.sortOrder = i2.sortOrder, this.title = i2.title, this.trashed = null !== (o2 = i2.trashed) && void 0 !== o2 ? o2 : void 0, this.updatedAt = null !== (s2 = ip(i2.updatedAt)) && void 0 !== s2 ? s2 : new Date(), this.url = i2.url, this._creator = null !== (u2 = i2.creator) && void 0 !== u2 ? u2 : void 0, this._initiative = null !== (k2 = i2.initiative) && void 0 !== k2 ? k2 : void 0, this._lastAppliedTemplate = null !== (v2 = i2.lastAppliedTemplate) && void 0 !== v2 ? v2 : void 0, this._project = null !== (p2 = i2.project) && void 0 !== p2 ? p2 : void 0, this._updatedBy = null !== (c2 = i2.updatedBy) && void 0 !== c2 ? c2 : void 0;
  }
  get creator() {
    var e2, i2;
    return (null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._creator) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get creatorId() {
    var e2;
    return null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id;
  }
  get initiative() {
    var e2, i2;
    return (null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id) ? new Jb(this._request).fetch(null === (i2 = this._initiative) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get initiativeId() {
    var e2;
    return null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id;
  }
  get lastAppliedTemplate() {
    var e2, i2;
    return (null === (e2 = this._lastAppliedTemplate) || void 0 === e2 ? void 0 : e2.id) ? new ny(this._request).fetch(null === (i2 = this._lastAppliedTemplate) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get lastAppliedTemplateId() {
    var e2;
    return null === (e2 = this._lastAppliedTemplate) || void 0 === e2 ? void 0 : e2.id;
  }
  get project() {
    var e2, i2;
    return (null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id) ? new qS(this._request).fetch(null === (i2 = this._project) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get projectId() {
    var e2;
    return null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id;
  }
  get updatedBy() {
    var e2, i2;
    return (null === (e2 = this._updatedBy) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._updatedBy) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get updatedById() {
    var e2;
    return null === (e2 = this._updatedBy) || void 0 === e2 ? void 0 : e2.id;
  }
  comments(e2) {
    return new TF(this._request, this.id, e2).fetch(e2);
  }
  create(e2) {
    return new ug(this._request).fetch(e2);
  }
  delete() {
    return new kg(this._request).fetch(this.id);
  }
  unarchive() {
    return new vg(this._request).fetch(this.id);
  }
  update(e2) {
    return new pg(this._request).fetch(this.id, e2);
  }
};
var ic = class extends Yv {
  constructor(e2, i2) {
    var n2;
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._entity = null !== (n2 = i2.entity) && void 0 !== n2 ? n2 : void 0;
  }
  get entity() {
    var e2, i2;
    return (null === (e2 = this._entity) || void 0 === e2 ? void 0 : e2.id) ? new Bb(this._request).fetch(null === (i2 = this._entity) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get entityId() {
    var e2;
    return null === (e2 = this._entity) || void 0 === e2 ? void 0 : e2.id;
  }
};
var nc = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new ec(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var ac = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2, u2, k2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.content = null !== (a2 = i2.content) && void 0 !== a2 ? a2 : void 0, this.contentState = null !== (t2 = i2.contentState) && void 0 !== t2 ? t2 : void 0, this.createdAt = null !== (d2 = ip(i2.createdAt)) && void 0 !== d2 ? d2 : new Date(), this.id = i2.id, this.restoredAt = null !== (l2 = ip(i2.restoredAt)) && void 0 !== l2 ? l2 : void 0, this.updatedAt = null !== (r2 = ip(i2.updatedAt)) && void 0 !== r2 ? r2 : new Date(), this._document = null !== (m2 = i2.document) && void 0 !== m2 ? m2 : void 0, this._initiative = null !== (o2 = i2.initiative) && void 0 !== o2 ? o2 : void 0, this._issue = null !== (s2 = i2.issue) && void 0 !== s2 ? s2 : void 0, this._project = null !== (u2 = i2.project) && void 0 !== u2 ? u2 : void 0, this._projectMilestone = null !== (k2 = i2.projectMilestone) && void 0 !== k2 ? k2 : void 0;
  }
  get document() {
    var e2, i2;
    return (null === (e2 = this._document) || void 0 === e2 ? void 0 : e2.id) ? new Bb(this._request).fetch(null === (i2 = this._document) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get documentId() {
    var e2;
    return null === (e2 = this._document) || void 0 === e2 ? void 0 : e2.id;
  }
  get initiative() {
    var e2, i2;
    return (null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id) ? new Jb(this._request).fetch(null === (i2 = this._initiative) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get initiativeId() {
    var e2;
    return null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id;
  }
  get issue() {
    var e2, i2;
    return (null === (e2 = this._issue) || void 0 === e2 ? void 0 : e2.id) ? new mS(this._request).fetch(null === (i2 = this._issue) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get issueId() {
    var e2;
    return null === (e2 = this._issue) || void 0 === e2 ? void 0 : e2.id;
  }
  get project() {
    var e2, i2;
    return (null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id) ? new qS(this._request).fetch(null === (i2 = this._project) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get projectId() {
    var e2;
    return null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id;
  }
  get projectMilestone() {
    var e2, i2;
    return (null === (e2 = this._projectMilestone) || void 0 === e2 ? void 0 : e2.id) ? new PS(this._request).fetch(null === (i2 = this._projectMilestone) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get projectMilestoneId() {
    var e2;
    return null === (e2 = this._projectMilestone) || void 0 === e2 ? void 0 : e2.id;
  }
};
var tc = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.success = i2.success, this.history = i2.history.map((i3) => new dc(e2, i3));
  }
};
var dc = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2;
    super(e2), this.actorIds = null !== (n2 = i2.actorIds) && void 0 !== n2 ? n2 : void 0, this.contentDataSnapshotAt = null !== (a2 = ip(i2.contentDataSnapshotAt)) && void 0 !== a2 ? a2 : new Date(), this.createdAt = null !== (t2 = ip(i2.createdAt)) && void 0 !== t2 ? t2 : new Date(), this.id = i2.id;
  }
};
var lc = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2, u2, k2, v2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.commentId = null !== (a2 = i2.commentId) && void 0 !== a2 ? a2 : void 0, this.createdAt = null !== (t2 = ip(i2.createdAt)) && void 0 !== t2 ? t2 : new Date(), this.documentId = i2.documentId, this.emailedAt = null !== (d2 = ip(i2.emailedAt)) && void 0 !== d2 ? d2 : void 0, this.id = i2.id, this.parentCommentId = null !== (l2 = i2.parentCommentId) && void 0 !== l2 ? l2 : void 0, this.reactionEmoji = null !== (r2 = i2.reactionEmoji) && void 0 !== r2 ? r2 : void 0, this.readAt = null !== (m2 = ip(i2.readAt)) && void 0 !== m2 ? m2 : void 0, this.snoozedUntilAt = null !== (o2 = ip(i2.snoozedUntilAt)) && void 0 !== o2 ? o2 : void 0, this.type = i2.type, this.unsnoozedAt = null !== (s2 = ip(i2.unsnoozedAt)) && void 0 !== s2 ? s2 : void 0, this.updatedAt = null !== (u2 = ip(i2.updatedAt)) && void 0 !== u2 ? u2 : new Date(), this.botActor = i2.botActor ? new ap(e2, i2.botActor) : void 0, this._actor = null !== (k2 = i2.actor) && void 0 !== k2 ? k2 : void 0, this._externalUserActor = null !== (v2 = i2.externalUserActor) && void 0 !== v2 ? v2 : void 0, this._user = i2.user;
  }
  get actor() {
    var e2, i2;
    return (null === (e2 = this._actor) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._actor) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get actorId() {
    var e2;
    return null === (e2 = this._actor) || void 0 === e2 ? void 0 : e2.id;
  }
  get externalUserActor() {
    var e2, i2;
    return (null === (e2 = this._externalUserActor) || void 0 === e2 ? void 0 : e2.id) ? new Hb(this._request).fetch(null === (i2 = this._externalUserActor) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get externalUserActorId() {
    var e2;
    return null === (e2 = this._externalUserActor) || void 0 === e2 ? void 0 : e2.id;
  }
  get user() {
    return new oy(this._request).fetch(this._user.id);
  }
  get userId() {
    var e2;
    return null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id;
  }
};
var rc = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._document = i2.document;
  }
  get document() {
    return new Bb(this._request).fetch(this._document.id);
  }
  get documentId() {
    var e2;
    return null === (e2 = this._document) || void 0 === e2 ? void 0 : e2.id;
  }
};
var mc = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.totalCount = i2.totalCount, this.archivePayload = new op(e2, i2.archivePayload), this.pageInfo = new yh(e2, i2.pageInfo), this.nodes = i2.nodes.map((i3) => new oc(e2, i3));
  }
};
var oc = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2, u2, k2, v2, p2, c2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.color = null !== (a2 = i2.color) && void 0 !== a2 ? a2 : void 0, this.content = null !== (t2 = i2.content) && void 0 !== t2 ? t2 : void 0, this.createdAt = null !== (d2 = ip(i2.createdAt)) && void 0 !== d2 ? d2 : new Date(), this.documentContentId = null !== (l2 = i2.documentContentId) && void 0 !== l2 ? l2 : void 0, this.hiddenAt = null !== (r2 = ip(i2.hiddenAt)) && void 0 !== r2 ? r2 : void 0, this.icon = null !== (m2 = i2.icon) && void 0 !== m2 ? m2 : void 0, this.id = i2.id, this.metadata = i2.metadata, this.slugId = i2.slugId, this.sortOrder = i2.sortOrder, this.title = i2.title, this.trashed = null !== (o2 = i2.trashed) && void 0 !== o2 ? o2 : void 0, this.updatedAt = null !== (s2 = ip(i2.updatedAt)) && void 0 !== s2 ? s2 : new Date(), this.url = i2.url, this._creator = null !== (u2 = i2.creator) && void 0 !== u2 ? u2 : void 0, this._initiative = null !== (k2 = i2.initiative) && void 0 !== k2 ? k2 : void 0, this._lastAppliedTemplate = null !== (v2 = i2.lastAppliedTemplate) && void 0 !== v2 ? v2 : void 0, this._project = null !== (p2 = i2.project) && void 0 !== p2 ? p2 : void 0, this._updatedBy = null !== (c2 = i2.updatedBy) && void 0 !== c2 ? c2 : void 0;
  }
  get creator() {
    var e2, i2;
    return (null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._creator) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get creatorId() {
    var e2;
    return null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id;
  }
  get initiative() {
    var e2, i2;
    return (null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id) ? new Jb(this._request).fetch(null === (i2 = this._initiative) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get initiativeId() {
    var e2;
    return null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id;
  }
  get lastAppliedTemplate() {
    var e2, i2;
    return (null === (e2 = this._lastAppliedTemplate) || void 0 === e2 ? void 0 : e2.id) ? new ny(this._request).fetch(null === (i2 = this._lastAppliedTemplate) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get lastAppliedTemplateId() {
    var e2;
    return null === (e2 = this._lastAppliedTemplate) || void 0 === e2 ? void 0 : e2.id;
  }
  get project() {
    var e2, i2;
    return (null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id) ? new qS(this._request).fetch(null === (i2 = this._project) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get projectId() {
    var e2;
    return null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id;
  }
  get updatedBy() {
    var e2, i2;
    return (null === (e2 = this._updatedBy) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._updatedBy) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get updatedById() {
    var e2;
    return null === (e2 = this._updatedBy) || void 0 === e2 ? void 0 : e2.id;
  }
};
var sc = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2, u2, k2, v2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.bodyData = null !== (a2 = np(i2.bodyData)) && void 0 !== a2 ? a2 : {}, this.createdAt = null !== (t2 = ip(i2.createdAt)) && void 0 !== t2 ? t2 : new Date(), this.data = null !== (d2 = i2.data) && void 0 !== d2 ? d2 : void 0, this.id = i2.id, this.isAutogenerated = i2.isAutogenerated, this.updatedAt = null !== (l2 = ip(i2.updatedAt)) && void 0 !== l2 ? l2 : new Date(), this._customerNeed = null !== (r2 = i2.customerNeed) && void 0 !== r2 ? r2 : void 0, this._initiative = null !== (m2 = i2.initiative) && void 0 !== m2 ? m2 : void 0, this._initiativeUpdate = null !== (o2 = i2.initiativeUpdate) && void 0 !== o2 ? o2 : void 0, this._issue = null !== (s2 = i2.issue) && void 0 !== s2 ? s2 : void 0, this._parentComment = null !== (u2 = i2.parentComment) && void 0 !== u2 ? u2 : void 0, this._project = null !== (k2 = i2.project) && void 0 !== k2 ? k2 : void 0, this._projectUpdate = null !== (v2 = i2.projectUpdate) && void 0 !== v2 ? v2 : void 0, this._user = i2.user;
  }
  get customerNeed() {
    var e2, i2;
    return (null === (e2 = this._customerNeed) || void 0 === e2 ? void 0 : e2.id) ? new wb(this._request).fetch({ id: null === (i2 = this._customerNeed) || void 0 === i2 ? void 0 : i2.id }) : void 0;
  }
  get customerNeedId() {
    var e2;
    return null === (e2 = this._customerNeed) || void 0 === e2 ? void 0 : e2.id;
  }
  get initiative() {
    var e2, i2;
    return (null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id) ? new Jb(this._request).fetch(null === (i2 = this._initiative) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get initiativeId() {
    var e2;
    return null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id;
  }
  get initiativeUpdate() {
    var e2, i2;
    return (null === (e2 = this._initiativeUpdate) || void 0 === e2 ? void 0 : e2.id) ? new Xb(this._request).fetch(null === (i2 = this._initiativeUpdate) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get initiativeUpdateId() {
    var e2;
    return null === (e2 = this._initiativeUpdate) || void 0 === e2 ? void 0 : e2.id;
  }
  get issue() {
    var e2, i2;
    return (null === (e2 = this._issue) || void 0 === e2 ? void 0 : e2.id) ? new mS(this._request).fetch(null === (i2 = this._issue) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get issueId() {
    var e2;
    return null === (e2 = this._issue) || void 0 === e2 ? void 0 : e2.id;
  }
  get parentComment() {
    var e2, i2;
    return (null === (e2 = this._parentComment) || void 0 === e2 ? void 0 : e2.id) ? new Db(this._request).fetch({ id: null === (i2 = this._parentComment) || void 0 === i2 ? void 0 : i2.id }) : void 0;
  }
  get parentCommentId() {
    var e2;
    return null === (e2 = this._parentComment) || void 0 === e2 ? void 0 : e2.id;
  }
  get project() {
    var e2, i2;
    return (null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id) ? new qS(this._request).fetch(null === (i2 = this._project) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get projectId() {
    var e2;
    return null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id;
  }
  get projectUpdate() {
    var e2, i2;
    return (null === (e2 = this._projectUpdate) || void 0 === e2 ? void 0 : e2.id) ? new RS(this._request).fetch(null === (i2 = this._projectUpdate) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get projectUpdateId() {
    var e2;
    return null === (e2 = this._projectUpdate) || void 0 === e2 ? void 0 : e2.id;
  }
  get user() {
    return new oy(this._request).fetch(this._user.id);
  }
  get userId() {
    var e2;
    return null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id;
  }
};
var uc = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new sc(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var kc = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2;
    super(e2), this.address = i2.address, this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.customerRequestsEnabled = i2.customerRequestsEnabled, this.enabled = i2.enabled, this.id = i2.id, this.repliesEnabled = i2.repliesEnabled, this.updatedAt = null !== (t2 = ip(i2.updatedAt)) && void 0 !== t2 ? t2 : new Date(), this._creator = null !== (d2 = i2.creator) && void 0 !== d2 ? d2 : void 0, this._team = null !== (l2 = i2.team) && void 0 !== l2 ? l2 : void 0, this._template = null !== (r2 = i2.template) && void 0 !== r2 ? r2 : void 0;
  }
  get creator() {
    var e2, i2;
    return (null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._creator) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get creatorId() {
    var e2;
    return null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id;
  }
  get organization() {
    return new AS(this._request).fetch();
  }
  get team() {
    var e2, i2;
    return (null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id) ? new QS(this._request).fetch(null === (i2 = this._team) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get teamId() {
    var e2;
    return null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id;
  }
  get template() {
    var e2, i2;
    return (null === (e2 = this._template) || void 0 === e2 ? void 0 : e2.id) ? new ny(this._request).fetch(null === (i2 = this._template) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get templateId() {
    var e2;
    return null === (e2 = this._template) || void 0 === e2 ? void 0 : e2.id;
  }
  create(e2) {
    return new cg(this._request).fetch(e2);
  }
  delete() {
    return new Ng(this._request).fetch(this.id);
  }
  update(e2) {
    return new fg(this._request).fetch(this.id, e2);
  }
};
var vc = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.emailIntakeAddress = new kc(e2, i2.emailIntakeAddress);
  }
};
var pc = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.success = i2.success;
  }
};
var cc = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.authType = i2.authType, this.success = i2.success;
  }
};
var Nc = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.id = i2.id, this.name = i2.name, this.source = i2.source, this.updatedAt = null !== (t2 = ip(i2.updatedAt)) && void 0 !== t2 ? t2 : new Date(), this.url = i2.url, this._creator = null !== (d2 = i2.creator) && void 0 !== d2 ? d2 : void 0;
  }
  get creator() {
    var e2, i2;
    return (null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._creator) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get creatorId() {
    var e2;
    return null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id;
  }
  get organization() {
    return new AS(this._request).fetch();
  }
  create(e2) {
    return new gg(this._request).fetch(e2);
  }
  delete() {
    return new Dg(this._request).fetch(this.id);
  }
};
var hc = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new Nc(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var fc = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._emoji = i2.emoji;
  }
  get emoji() {
    return new Lb(this._request).fetch(this._emoji.id);
  }
  get emojiId() {
    var e2;
    return null === (e2 = this._emoji) || void 0 === e2 ? void 0 : e2.id;
  }
};
var Sc = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.id = i2.id, this.label = i2.label, this.sortOrder = i2.sortOrder, this.updatedAt = null !== (t2 = ip(i2.updatedAt)) && void 0 !== t2 ? t2 : new Date(), this.url = i2.url, this._creator = i2.creator, this._initiative = null !== (d2 = i2.initiative) && void 0 !== d2 ? d2 : void 0;
  }
  get creator() {
    return new oy(this._request).fetch(this._creator.id);
  }
  get creatorId() {
    var e2;
    return null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id;
  }
  get initiative() {
    var e2, i2;
    return (null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id) ? new Jb(this._request).fetch(null === (i2 = this._initiative) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get initiativeId() {
    var e2;
    return null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id;
  }
  create(e2) {
    return new Vg(this._request).fetch(e2);
  }
  delete() {
    return new _g(this._request).fetch(this.id);
  }
  update(e2) {
    return new Fg(this._request).fetch(this.id, e2);
  }
};
var yc = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new Sc(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var gc = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._entityExternalLink = i2.entityExternalLink;
  }
  get entityExternalLink() {
    return new Mb(this._request).fetch(this._entityExternalLink.id);
  }
  get entityExternalLinkId() {
    var e2;
    return null === (e2 = this._entityExternalLink) || void 0 === e2 ? void 0 : e2.id;
  }
};
var Dc = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.avatarUrl = null !== (a2 = i2.avatarUrl) && void 0 !== a2 ? a2 : void 0, this.createdAt = null !== (t2 = ip(i2.createdAt)) && void 0 !== t2 ? t2 : new Date(), this.displayName = i2.displayName, this.email = null !== (d2 = i2.email) && void 0 !== d2 ? d2 : void 0, this.id = i2.id, this.lastSeen = null !== (l2 = ip(i2.lastSeen)) && void 0 !== l2 ? l2 : void 0, this.name = i2.name, this.updatedAt = null !== (r2 = ip(i2.updatedAt)) && void 0 !== r2 ? r2 : new Date();
  }
  get organization() {
    return new AS(this._request).fetch();
  }
};
var Vc = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new Dc(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var Fc = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2, u2, k2, v2, p2, c2, N2, h2, f2, b2, S2, y2, g2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.folderName = null !== (t2 = i2.folderName) && void 0 !== t2 ? t2 : void 0, this.id = i2.id, this.predefinedViewType = null !== (d2 = i2.predefinedViewType) && void 0 !== d2 ? d2 : void 0, this.sortOrder = i2.sortOrder, this.type = i2.type, this.updatedAt = null !== (l2 = ip(i2.updatedAt)) && void 0 !== l2 ? l2 : new Date(), this.url = null !== (r2 = i2.url) && void 0 !== r2 ? r2 : void 0, this.initiativeTab = null !== (m2 = i2.initiativeTab) && void 0 !== m2 ? m2 : void 0, this.projectTab = null !== (o2 = i2.projectTab) && void 0 !== o2 ? o2 : void 0, this._customView = null !== (s2 = i2.customView) && void 0 !== s2 ? s2 : void 0, this._customer = null !== (u2 = i2.customer) && void 0 !== u2 ? u2 : void 0, this._cycle = null !== (k2 = i2.cycle) && void 0 !== k2 ? k2 : void 0, this._document = null !== (v2 = i2.document) && void 0 !== v2 ? v2 : void 0, this._initiative = null !== (p2 = i2.initiative) && void 0 !== p2 ? p2 : void 0, this._issue = null !== (c2 = i2.issue) && void 0 !== c2 ? c2 : void 0, this._label = null !== (N2 = i2.label) && void 0 !== N2 ? N2 : void 0, this._owner = i2.owner, this._parent = null !== (h2 = i2.parent) && void 0 !== h2 ? h2 : void 0, this._predefinedViewTeam = null !== (f2 = i2.predefinedViewTeam) && void 0 !== f2 ? f2 : void 0, this._project = null !== (b2 = i2.project) && void 0 !== b2 ? b2 : void 0, this._projectTeam = null !== (S2 = i2.projectTeam) && void 0 !== S2 ? S2 : void 0, this._roadmap = null !== (y2 = i2.roadmap) && void 0 !== y2 ? y2 : void 0, this._user = null !== (g2 = i2.user) && void 0 !== g2 ? g2 : void 0;
  }
  get customView() {
    var e2, i2;
    return (null === (e2 = this._customView) || void 0 === e2 ? void 0 : e2.id) ? new _b(this._request).fetch(null === (i2 = this._customView) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get customViewId() {
    var e2;
    return null === (e2 = this._customView) || void 0 === e2 ? void 0 : e2.id;
  }
  get customer() {
    var e2, i2;
    return (null === (e2 = this._customer) || void 0 === e2 ? void 0 : e2.id) ? new Tb(this._request).fetch(null === (i2 = this._customer) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get customerId() {
    var e2;
    return null === (e2 = this._customer) || void 0 === e2 ? void 0 : e2.id;
  }
  get cycle() {
    var e2, i2;
    return (null === (e2 = this._cycle) || void 0 === e2 ? void 0 : e2.id) ? new Ub(this._request).fetch(null === (i2 = this._cycle) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get cycleId() {
    var e2;
    return null === (e2 = this._cycle) || void 0 === e2 ? void 0 : e2.id;
  }
  get document() {
    var e2, i2;
    return (null === (e2 = this._document) || void 0 === e2 ? void 0 : e2.id) ? new Bb(this._request).fetch(null === (i2 = this._document) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get documentId() {
    var e2;
    return null === (e2 = this._document) || void 0 === e2 ? void 0 : e2.id;
  }
  get initiative() {
    var e2, i2;
    return (null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id) ? new Jb(this._request).fetch(null === (i2 = this._initiative) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get initiativeId() {
    var e2;
    return null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id;
  }
  get issue() {
    var e2, i2;
    return (null === (e2 = this._issue) || void 0 === e2 ? void 0 : e2.id) ? new mS(this._request).fetch(null === (i2 = this._issue) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get issueId() {
    var e2;
    return null === (e2 = this._issue) || void 0 === e2 ? void 0 : e2.id;
  }
  get label() {
    var e2, i2;
    return (null === (e2 = this._label) || void 0 === e2 ? void 0 : e2.id) ? new pS(this._request).fetch(null === (i2 = this._label) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get labelId() {
    var e2;
    return null === (e2 = this._label) || void 0 === e2 ? void 0 : e2.id;
  }
  get owner() {
    return new oy(this._request).fetch(this._owner.id);
  }
  get ownerId() {
    var e2;
    return null === (e2 = this._owner) || void 0 === e2 ? void 0 : e2.id;
  }
  get parent() {
    var e2, i2;
    return (null === (e2 = this._parent) || void 0 === e2 ? void 0 : e2.id) ? new Gb(this._request).fetch(null === (i2 = this._parent) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get parentId() {
    var e2;
    return null === (e2 = this._parent) || void 0 === e2 ? void 0 : e2.id;
  }
  get predefinedViewTeam() {
    var e2, i2;
    return (null === (e2 = this._predefinedViewTeam) || void 0 === e2 ? void 0 : e2.id) ? new QS(this._request).fetch(null === (i2 = this._predefinedViewTeam) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get predefinedViewTeamId() {
    var e2;
    return null === (e2 = this._predefinedViewTeam) || void 0 === e2 ? void 0 : e2.id;
  }
  get project() {
    var e2, i2;
    return (null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id) ? new qS(this._request).fetch(null === (i2 = this._project) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get projectId() {
    var e2;
    return null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id;
  }
  get projectTeam() {
    var e2, i2;
    return (null === (e2 = this._projectTeam) || void 0 === e2 ? void 0 : e2.id) ? new QS(this._request).fetch(null === (i2 = this._projectTeam) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get projectTeamId() {
    var e2;
    return null === (e2 = this._projectTeam) || void 0 === e2 ? void 0 : e2.id;
  }
  get roadmap() {
    var e2, i2;
    return (null === (e2 = this._roadmap) || void 0 === e2 ? void 0 : e2.id) ? new HS(this._request).fetch(null === (i2 = this._roadmap) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get roadmapId() {
    var e2;
    return null === (e2 = this._roadmap) || void 0 === e2 ? void 0 : e2.id;
  }
  get user() {
    var e2, i2;
    return (null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._user) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get userId() {
    var e2;
    return null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id;
  }
  children(e2) {
    return new wF(this._request, this.id, e2).fetch(e2);
  }
  create(e2) {
    return new Ag(this._request).fetch(e2);
  }
  delete() {
    return new Tg(this._request).fetch(this.id);
  }
  update(e2) {
    return new wg(this._request).fetch(this.id, e2);
  }
};
var Ac = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new Fc(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var Tc = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._favorite = i2.favorite;
  }
  get favorite() {
    return new Gb(this._request).fetch(this._favorite.id);
  }
  get favoriteId() {
    var e2;
    return null === (e2 = this._favorite) || void 0 === e2 ? void 0 : e2.id;
  }
};
var wc = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._attachment = i2.attachment;
  }
  get attachment() {
    return new cb(this._request).fetch(this._attachment.id);
  }
  get attachmentId() {
    var e2;
    return null === (e2 = this._attachment) || void 0 === e2 ? void 0 : e2.id;
  }
};
var Ic = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.branchPattern = null !== (a2 = i2.branchPattern) && void 0 !== a2 ? a2 : void 0, this.createdAt = null !== (t2 = ip(i2.createdAt)) && void 0 !== t2 ? t2 : new Date(), this.id = i2.id, this.updatedAt = null !== (d2 = ip(i2.updatedAt)) && void 0 !== d2 ? d2 : new Date(), this.targetBranch = i2.targetBranch ? new Pc(e2, i2.targetBranch) : void 0, this.event = i2.event, this._state = null !== (l2 = i2.state) && void 0 !== l2 ? l2 : void 0, this._team = i2.team;
  }
  get state() {
    var e2, i2;
    return (null === (e2 = this._state) || void 0 === e2 ? void 0 : e2.id) ? new Ny(this._request).fetch(null === (i2 = this._state) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get stateId() {
    var e2;
    return null === (e2 = this._state) || void 0 === e2 ? void 0 : e2.id;
  }
  get team() {
    return new QS(this._request).fetch(this._team.id);
  }
  get teamId() {
    var e2;
    return null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id;
  }
  create(e2) {
    return new qg(this._request).fetch(e2);
  }
  delete() {
    return new Cg(this._request).fetch(this.id);
  }
  update(e2) {
    return new Pg(this._request).fetch(this.id, e2);
  }
};
var qc = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new Ic(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var Cc = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.gitAutomationState = new Ic(e2, i2.gitAutomationState);
  }
};
var Pc = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.branchPattern = i2.branchPattern, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.id = i2.id, this.isRegex = i2.isRegex, this.updatedAt = null !== (t2 = ip(i2.updatedAt)) && void 0 !== t2 ? t2 : new Date(), this._team = i2.team;
  }
  get team() {
    return new QS(this._request).fetch(this._team.id);
  }
  get teamId() {
    var e2;
    return null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id;
  }
  create(e2) {
    return new jg(this._request).fetch(e2);
  }
  delete() {
    return new Og(this._request).fetch(this.id);
  }
  update(e2) {
    return new Ug(this._request).fetch(this.id, e2);
  }
};
var jc = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.targetBranch = new Pc(e2, i2.targetBranch);
  }
};
var Oc = class extends Yv {
  constructor(e2, i2) {
    var n2;
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.webhookSecret = i2.webhookSecret, this._integration = null !== (n2 = i2.integration) && void 0 !== n2 ? n2 : void 0;
  }
  get integration() {
    var e2, i2;
    return (null === (e2 = this._integration) || void 0 === e2 ? void 0 : e2.id) ? new nS(this._request).fetch(null === (i2 = this._integration) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get integrationId() {
    var e2;
    return null === (e2 = this._integration) || void 0 === e2 ? void 0 : e2.id;
  }
};
var Uc = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.success = i2.success;
  }
};
var xc = class extends Yv {
  constructor(e2, i2) {
    var n2;
    super(e2), this.installUrl = i2.installUrl, this.lastSyncId = i2.lastSyncId, this.setupUrl = i2.setupUrl, this.success = i2.success, this.webhookSecret = i2.webhookSecret, this._integration = null !== (n2 = i2.integration) && void 0 !== n2 ? n2 : void 0;
  }
  get integration() {
    var e2, i2;
    return (null === (e2 = this._integration) || void 0 === e2 ? void 0 : e2.id) ? new nS(this._request).fetch(null === (i2 = this._integration) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get integrationId() {
    var e2;
    return null === (e2 = this._integration) || void 0 === e2 ? void 0 : e2.id;
  }
};
var Bc = class extends Yv {
  constructor(e2, i2) {
    var n2;
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.webhookSecret = i2.webhookSecret, this._integration = null !== (n2 = i2.integration) && void 0 !== n2 ? n2 : void 0;
  }
  get integration() {
    var e2, i2;
    return (null === (e2 = this._integration) || void 0 === e2 ? void 0 : e2.id) ? new nS(this._request).fetch(null === (i2 = this._integration) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get integrationId() {
    var e2;
    return null === (e2 = this._integration) || void 0 === e2 ? void 0 : e2.id;
  }
};
var Rc = class extends Yv {
  constructor(e2, i2) {
    var n2;
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.url = null !== (n2 = i2.url) && void 0 !== n2 ? n2 : void 0;
  }
};
var Ec = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2, u2, k2, v2, p2, c2, N2, h2, f2, b2, S2, y2, g2, D2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.color = null !== (a2 = i2.color) && void 0 !== a2 ? a2 : void 0, this.completedAt = null !== (t2 = ip(i2.completedAt)) && void 0 !== t2 ? t2 : void 0, this.content = null !== (d2 = i2.content) && void 0 !== d2 ? d2 : void 0, this.createdAt = null !== (l2 = ip(i2.createdAt)) && void 0 !== l2 ? l2 : new Date(), this.description = null !== (r2 = i2.description) && void 0 !== r2 ? r2 : void 0, this.healthUpdatedAt = null !== (m2 = ip(i2.healthUpdatedAt)) && void 0 !== m2 ? m2 : void 0, this.icon = null !== (o2 = i2.icon) && void 0 !== o2 ? o2 : void 0, this.id = i2.id, this.name = i2.name, this.slugId = i2.slugId, this.sortOrder = i2.sortOrder, this.startedAt = null !== (s2 = ip(i2.startedAt)) && void 0 !== s2 ? s2 : void 0, this.targetDate = null !== (u2 = i2.targetDate) && void 0 !== u2 ? u2 : void 0, this.trashed = null !== (k2 = i2.trashed) && void 0 !== k2 ? k2 : void 0, this.updateReminderFrequency = null !== (v2 = i2.updateReminderFrequency) && void 0 !== v2 ? v2 : void 0, this.updateReminderFrequencyInWeeks = null !== (p2 = i2.updateReminderFrequencyInWeeks) && void 0 !== p2 ? p2 : void 0, this.updateRemindersHour = null !== (c2 = i2.updateRemindersHour) && void 0 !== c2 ? c2 : void 0, this.updatedAt = null !== (N2 = ip(i2.updatedAt)) && void 0 !== N2 ? N2 : new Date(), this.url = i2.url, this.frequencyResolution = i2.frequencyResolution, this.health = null !== (h2 = i2.health) && void 0 !== h2 ? h2 : void 0, this.status = i2.status, this.targetDateResolution = null !== (f2 = i2.targetDateResolution) && void 0 !== f2 ? f2 : void 0, this.updateRemindersDay = null !== (b2 = i2.updateRemindersDay) && void 0 !== b2 ? b2 : void 0, this._creator = null !== (S2 = i2.creator) && void 0 !== S2 ? S2 : void 0, this._integrationsSettings = null !== (y2 = i2.integrationsSettings) && void 0 !== y2 ? y2 : void 0, this._lastUpdate = null !== (g2 = i2.lastUpdate) && void 0 !== g2 ? g2 : void 0, this._owner = null !== (D2 = i2.owner) && void 0 !== D2 ? D2 : void 0;
  }
  get creator() {
    var e2, i2;
    return (null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._creator) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get creatorId() {
    var e2;
    return null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id;
  }
  get integrationsSettings() {
    var e2, i2;
    return (null === (e2 = this._integrationsSettings) || void 0 === e2 ? void 0 : e2.id) ? new rS(this._request).fetch(null === (i2 = this._integrationsSettings) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get integrationsSettingsId() {
    var e2;
    return null === (e2 = this._integrationsSettings) || void 0 === e2 ? void 0 : e2.id;
  }
  get lastUpdate() {
    var e2, i2;
    return (null === (e2 = this._lastUpdate) || void 0 === e2 ? void 0 : e2.id) ? new Xb(this._request).fetch(null === (i2 = this._lastUpdate) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get lastUpdateId() {
    var e2;
    return null === (e2 = this._lastUpdate) || void 0 === e2 ? void 0 : e2.id;
  }
  get organization() {
    return new AS(this._request).fetch();
  }
  get owner() {
    var e2, i2;
    return (null === (e2 = this._owner) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._owner) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get ownerId() {
    var e2;
    return null === (e2 = this._owner) || void 0 === e2 ? void 0 : e2.id;
  }
  history(e2) {
    return new IF(this._request, this.id, e2).fetch(e2);
  }
  links(e2) {
    return new qF(this._request, this.id, e2).fetch(e2);
  }
  projects(e2) {
    return new CF(this._request, this.id, e2).fetch(e2);
  }
  archive() {
    return new Eg(this._request).fetch(this.id);
  }
  create(e2) {
    return new Lg(this._request).fetch(e2);
  }
  delete() {
    return new zg(this._request).fetch(this.id);
  }
  unarchive() {
    return new $g(this._request).fetch(this.id);
  }
  update() {
    return new Xb(this._request).fetch(this.id);
  }
};
var Lc = class extends Yv {
  constructor(e2, i2) {
    var n2;
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._entity = null !== (n2 = i2.entity) && void 0 !== n2 ? n2 : void 0;
  }
  get entity() {
    var e2, i2;
    return (null === (e2 = this._entity) || void 0 === e2 ? void 0 : e2.id) ? new Jb(this._request).fetch(null === (i2 = this._entity) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get entityId() {
    var e2;
    return null === (e2 = this._entity) || void 0 === e2 ? void 0 : e2.id;
  }
};
var zc = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new Ec(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var Mc = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.entries = i2.entries, this.id = i2.id, this.updatedAt = null !== (t2 = ip(i2.updatedAt)) && void 0 !== t2 ? t2 : new Date(), this._initiative = i2.initiative;
  }
  get initiative() {
    return new Jb(this._request).fetch(this._initiative.id);
  }
  get initiativeId() {
    var e2;
    return null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id;
  }
};
var Hc = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new Mc(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var Wc = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2, u2, k2, v2, p2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.commentId = null !== (a2 = i2.commentId) && void 0 !== a2 ? a2 : void 0, this.createdAt = null !== (t2 = ip(i2.createdAt)) && void 0 !== t2 ? t2 : new Date(), this.emailedAt = null !== (d2 = ip(i2.emailedAt)) && void 0 !== d2 ? d2 : void 0, this.id = i2.id, this.initiativeId = i2.initiativeId, this.initiativeUpdateId = null !== (l2 = i2.initiativeUpdateId) && void 0 !== l2 ? l2 : void 0, this.parentCommentId = null !== (r2 = i2.parentCommentId) && void 0 !== r2 ? r2 : void 0, this.reactionEmoji = null !== (m2 = i2.reactionEmoji) && void 0 !== m2 ? m2 : void 0, this.readAt = null !== (o2 = ip(i2.readAt)) && void 0 !== o2 ? o2 : void 0, this.snoozedUntilAt = null !== (s2 = ip(i2.snoozedUntilAt)) && void 0 !== s2 ? s2 : void 0, this.type = i2.type, this.unsnoozedAt = null !== (u2 = ip(i2.unsnoozedAt)) && void 0 !== u2 ? u2 : void 0, this.updatedAt = null !== (k2 = ip(i2.updatedAt)) && void 0 !== k2 ? k2 : new Date(), this.botActor = i2.botActor ? new ap(e2, i2.botActor) : void 0, this._actor = null !== (v2 = i2.actor) && void 0 !== v2 ? v2 : void 0, this._externalUserActor = null !== (p2 = i2.externalUserActor) && void 0 !== p2 ? p2 : void 0, this._user = i2.user;
  }
  get actor() {
    var e2, i2;
    return (null === (e2 = this._actor) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._actor) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get actorId() {
    var e2;
    return null === (e2 = this._actor) || void 0 === e2 ? void 0 : e2.id;
  }
  get externalUserActor() {
    var e2, i2;
    return (null === (e2 = this._externalUserActor) || void 0 === e2 ? void 0 : e2.id) ? new Hb(this._request).fetch(null === (i2 = this._externalUserActor) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get externalUserActorId() {
    var e2;
    return null === (e2 = this._externalUserActor) || void 0 === e2 ? void 0 : e2.id;
  }
  get user() {
    return new oy(this._request).fetch(this._user.id);
  }
  get userId() {
    var e2;
    return null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id;
  }
};
var Gc = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2, u2, k2, v2;
    super(e2), this.active = i2.active, this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.id = i2.id, this.notificationSubscriptionTypes = i2.notificationSubscriptionTypes, this.updatedAt = null !== (t2 = ip(i2.updatedAt)) && void 0 !== t2 ? t2 : new Date(), this.contextViewType = null !== (d2 = i2.contextViewType) && void 0 !== d2 ? d2 : void 0, this.userContextViewType = null !== (l2 = i2.userContextViewType) && void 0 !== l2 ? l2 : void 0, this._customView = null !== (r2 = i2.customView) && void 0 !== r2 ? r2 : void 0, this._customer = null !== (m2 = i2.customer) && void 0 !== m2 ? m2 : void 0, this._cycle = null !== (o2 = i2.cycle) && void 0 !== o2 ? o2 : void 0, this._initiative = i2.initiative, this._label = null !== (s2 = i2.label) && void 0 !== s2 ? s2 : void 0, this._project = null !== (u2 = i2.project) && void 0 !== u2 ? u2 : void 0, this._subscriber = i2.subscriber, this._team = null !== (k2 = i2.team) && void 0 !== k2 ? k2 : void 0, this._user = null !== (v2 = i2.user) && void 0 !== v2 ? v2 : void 0;
  }
  get customView() {
    var e2, i2;
    return (null === (e2 = this._customView) || void 0 === e2 ? void 0 : e2.id) ? new _b(this._request).fetch(null === (i2 = this._customView) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get customViewId() {
    var e2;
    return null === (e2 = this._customView) || void 0 === e2 ? void 0 : e2.id;
  }
  get customer() {
    var e2, i2;
    return (null === (e2 = this._customer) || void 0 === e2 ? void 0 : e2.id) ? new Tb(this._request).fetch(null === (i2 = this._customer) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get customerId() {
    var e2;
    return null === (e2 = this._customer) || void 0 === e2 ? void 0 : e2.id;
  }
  get cycle() {
    var e2, i2;
    return (null === (e2 = this._cycle) || void 0 === e2 ? void 0 : e2.id) ? new Ub(this._request).fetch(null === (i2 = this._cycle) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get cycleId() {
    var e2;
    return null === (e2 = this._cycle) || void 0 === e2 ? void 0 : e2.id;
  }
  get initiative() {
    return new Jb(this._request).fetch(this._initiative.id);
  }
  get initiativeId() {
    var e2;
    return null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id;
  }
  get label() {
    var e2, i2;
    return (null === (e2 = this._label) || void 0 === e2 ? void 0 : e2.id) ? new pS(this._request).fetch(null === (i2 = this._label) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get labelId() {
    var e2;
    return null === (e2 = this._label) || void 0 === e2 ? void 0 : e2.id;
  }
  get project() {
    var e2, i2;
    return (null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id) ? new qS(this._request).fetch(null === (i2 = this._project) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get projectId() {
    var e2;
    return null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id;
  }
  get subscriber() {
    return new oy(this._request).fetch(this._subscriber.id);
  }
  get subscriberId() {
    var e2;
    return null === (e2 = this._subscriber) || void 0 === e2 ? void 0 : e2.id;
  }
  get team() {
    var e2, i2;
    return (null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id) ? new QS(this._request).fetch(null === (i2 = this._team) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get teamId() {
    var e2;
    return null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id;
  }
  get user() {
    var e2, i2;
    return (null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._user) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get userId() {
    var e2;
    return null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id;
  }
};
var Kc = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._initiative = i2.initiative;
  }
  get initiative() {
    return new Jb(this._request).fetch(this._initiative.id);
  }
  get initiativeId() {
    var e2;
    return null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id;
  }
};
var Jc = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.id = i2.id, this.sortOrder = i2.sortOrder, this.updatedAt = null !== (t2 = ip(i2.updatedAt)) && void 0 !== t2 ? t2 : new Date(), this._initiative = i2.initiative, this._relatedInitiative = i2.relatedInitiative, this._user = null !== (d2 = i2.user) && void 0 !== d2 ? d2 : void 0;
  }
  get initiative() {
    return new Jb(this._request).fetch(this._initiative.id);
  }
  get initiativeId() {
    var e2;
    return null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id;
  }
  get relatedInitiative() {
    return new Jb(this._request).fetch(this._relatedInitiative.id);
  }
  get relatedInitiativeId() {
    var e2;
    return null === (e2 = this._relatedInitiative) || void 0 === e2 ? void 0 : e2.id;
  }
  get user() {
    var e2, i2;
    return (null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._user) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get userId() {
    var e2;
    return null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id;
  }
  create(e2) {
    return new Mg(this._request).fetch(e2);
  }
  delete() {
    return new Hg(this._request).fetch(this.id);
  }
  update(e2) {
    return new Wg(this._request).fetch(this.id, e2);
  }
};
var $c = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new Jc(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var Zc = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.initiativeRelation = new Jc(e2, i2.initiativeRelation);
  }
};
var Yc = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.id = i2.id, this.sortOrder = i2.sortOrder, this.updatedAt = null !== (t2 = ip(i2.updatedAt)) && void 0 !== t2 ? t2 : new Date(), this._initiative = i2.initiative, this._project = i2.project;
  }
  get initiative() {
    return new Jb(this._request).fetch(this._initiative.id);
  }
  get initiativeId() {
    var e2;
    return null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id;
  }
  get project() {
    return new qS(this._request).fetch(this._project.id);
  }
  get projectId() {
    var e2;
    return null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id;
  }
  create(e2) {
    return new Gg(this._request).fetch(e2);
  }
  delete() {
    return new Kg(this._request).fetch(this.id);
  }
  update(e2) {
    return new Jg(this._request).fetch(this.id, e2);
  }
};
var Qc = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new Yc(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var Xc = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._initiativeToProject = i2.initiativeToProject;
  }
  get initiativeToProject() {
    return new Yb(this._request).fetch(this._initiativeToProject.id);
  }
  get initiativeToProjectId() {
    var e2;
    return null === (e2 = this._initiativeToProject) || void 0 === e2 ? void 0 : e2.id;
  }
};
var eN = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.body = i2.body, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.diff = null !== (t2 = i2.diff) && void 0 !== t2 ? t2 : void 0, this.diffMarkdown = null !== (d2 = i2.diffMarkdown) && void 0 !== d2 ? d2 : void 0, this.editedAt = null !== (l2 = ip(i2.editedAt)) && void 0 !== l2 ? l2 : void 0, this.id = i2.id, this.isDiffHidden = i2.isDiffHidden, this.isStale = i2.isStale, this.reactionData = i2.reactionData, this.slugId = i2.slugId, this.updatedAt = null !== (r2 = ip(i2.updatedAt)) && void 0 !== r2 ? r2 : new Date(), this.url = i2.url, this.reactions = i2.reactions.map((i3) => new lf(e2, i3)), this.health = i2.health, this._initiative = i2.initiative, this._user = i2.user;
  }
  get initiative() {
    return new Jb(this._request).fetch(this._initiative.id);
  }
  get initiativeId() {
    var e2;
    return null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id;
  }
  get user() {
    return new oy(this._request).fetch(this._user.id);
  }
  get userId() {
    var e2;
    return null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id;
  }
  comments(e2) {
    return new PF(this._request, this.id, e2).fetch(e2);
  }
  archive() {
    return new Yg(this._request).fetch(this.id);
  }
  create(e2) {
    return new Qg(this._request).fetch(e2);
  }
  unarchive() {
    return new Xg(this._request).fetch(this.id);
  }
  update(e2) {
    return new eD(this._request).fetch(this.id, e2);
  }
};
var iN = class extends Yv {
  constructor(e2, i2) {
    var n2;
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._entity = null !== (n2 = i2.entity) && void 0 !== n2 ? n2 : void 0;
  }
  get entity() {
    var e2, i2;
    return (null === (e2 = this._entity) || void 0 === e2 ? void 0 : e2.id) ? new Xb(this._request).fetch(null === (i2 = this._entity) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get entityId() {
    var e2;
    return null === (e2 = this._entity) || void 0 === e2 ? void 0 : e2.id;
  }
};
var nN = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new eN(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var aN = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._initiativeUpdate = i2.initiativeUpdate;
  }
  get initiativeUpdate() {
    return new Xb(this._request).fetch(this._initiativeUpdate.id);
  }
  get initiativeUpdateId() {
    var e2;
    return null === (e2 = this._initiativeUpdate) || void 0 === e2 ? void 0 : e2.id;
  }
};
var tN = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success;
  }
};
var dN = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.id = i2.id, this.service = i2.service, this.updatedAt = null !== (t2 = ip(i2.updatedAt)) && void 0 !== t2 ? t2 : new Date(), this._creator = i2.creator, this._team = null !== (d2 = i2.team) && void 0 !== d2 ? d2 : void 0;
  }
  get creator() {
    return new oy(this._request).fetch(this._creator.id);
  }
  get creatorId() {
    var e2;
    return null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id;
  }
  get organization() {
    return new AS(this._request).fetch();
  }
  get team() {
    var e2, i2;
    return (null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id) ? new QS(this._request).fetch(null === (i2 = this._team) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get teamId() {
    var e2;
    return null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id;
  }
  archive() {
    return new iD(this._request).fetch(this.id);
  }
  delete() {
    return new aD(this._request).fetch(this.id);
  }
};
var lN = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new dN(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var rN = class extends Yv {
  constructor(e2, i2) {
    var n2;
    super(e2), this.hasAllScopes = i2.hasAllScopes, this.missingScopes = null !== (n2 = i2.missingScopes) && void 0 !== n2 ? n2 : void 0;
  }
};
var mN = class extends Yv {
  constructor(e2, i2) {
    var n2;
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._integration = null !== (n2 = i2.integration) && void 0 !== n2 ? n2 : void 0;
  }
  get integration() {
    var e2, i2;
    return (null === (e2 = this._integration) || void 0 === e2 ? void 0 : e2.id) ? new nS(this._request).fetch(null === (i2 = this._integration) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get integrationId() {
    var e2;
    return null === (e2 = this._integration) || void 0 === e2 ? void 0 : e2.id;
  }
};
var oN = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.success = i2.success;
  }
};
var sN = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.foreignEntityId = null !== (t2 = i2.foreignEntityId) && void 0 !== t2 ? t2 : void 0, this.id = i2.id, this.updatedAt = null !== (d2 = ip(i2.updatedAt)) && void 0 !== d2 ? d2 : new Date(), this._integration = i2.integration, this._template = i2.template;
  }
  get integration() {
    return new nS(this._request).fetch(this._integration.id);
  }
  get integrationId() {
    var e2;
    return null === (e2 = this._integration) || void 0 === e2 ? void 0 : e2.id;
  }
  get template() {
    return new ny(this._request).fetch(this._template.id);
  }
  get templateId() {
    var e2;
    return null === (e2 = this._template) || void 0 === e2 ? void 0 : e2.id;
  }
  create(e2) {
    return new qD(this._request).fetch(e2);
  }
  delete() {
    return new CD(this._request).fetch(this.id);
  }
};
var uN = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new sN(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var kN = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._integrationTemplate = i2.integrationTemplate;
  }
  get integrationTemplate() {
    return new tS(this._request).fetch(this._integrationTemplate.id);
  }
  get integrationTemplateId() {
    var e2;
    return null === (e2 = this._integrationTemplate) || void 0 === e2 ? void 0 : e2.id;
  }
};
var vN = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2, u2, k2, v2, p2, c2, N2, h2, f2, b2, S2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.id = i2.id, this.slackInitiativeUpdateCreated = null !== (t2 = i2.slackInitiativeUpdateCreated) && void 0 !== t2 ? t2 : void 0, this.slackIssueAddedToTriage = null !== (d2 = i2.slackIssueAddedToTriage) && void 0 !== d2 ? d2 : void 0, this.slackIssueAddedToView = null !== (l2 = i2.slackIssueAddedToView) && void 0 !== l2 ? l2 : void 0, this.slackIssueCreated = null !== (r2 = i2.slackIssueCreated) && void 0 !== r2 ? r2 : void 0, this.slackIssueNewComment = null !== (m2 = i2.slackIssueNewComment) && void 0 !== m2 ? m2 : void 0, this.slackIssueSlaBreached = null !== (o2 = i2.slackIssueSlaBreached) && void 0 !== o2 ? o2 : void 0, this.slackIssueSlaHighRisk = null !== (s2 = i2.slackIssueSlaHighRisk) && void 0 !== s2 ? s2 : void 0, this.slackIssueStatusChangedAll = null !== (u2 = i2.slackIssueStatusChangedAll) && void 0 !== u2 ? u2 : void 0, this.slackIssueStatusChangedDone = null !== (k2 = i2.slackIssueStatusChangedDone) && void 0 !== k2 ? k2 : void 0, this.slackProjectUpdateCreated = null !== (v2 = i2.slackProjectUpdateCreated) && void 0 !== v2 ? v2 : void 0, this.slackProjectUpdateCreatedToTeam = null !== (p2 = i2.slackProjectUpdateCreatedToTeam) && void 0 !== p2 ? p2 : void 0, this.slackProjectUpdateCreatedToWorkspace = null !== (c2 = i2.slackProjectUpdateCreatedToWorkspace) && void 0 !== c2 ? c2 : void 0, this.updatedAt = null !== (N2 = ip(i2.updatedAt)) && void 0 !== N2 ? N2 : new Date(), this.contextViewType = null !== (h2 = i2.contextViewType) && void 0 !== h2 ? h2 : void 0, this._initiative = null !== (f2 = i2.initiative) && void 0 !== f2 ? f2 : void 0, this._project = null !== (b2 = i2.project) && void 0 !== b2 ? b2 : void 0, this._team = null !== (S2 = i2.team) && void 0 !== S2 ? S2 : void 0;
  }
  get initiative() {
    var e2, i2;
    return (null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id) ? new Jb(this._request).fetch(null === (i2 = this._initiative) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get initiativeId() {
    var e2;
    return null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id;
  }
  get project() {
    var e2, i2;
    return (null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id) ? new qS(this._request).fetch(null === (i2 = this._project) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get projectId() {
    var e2;
    return null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id;
  }
  get team() {
    var e2, i2;
    return (null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id) ? new QS(this._request).fetch(null === (i2 = this._team) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get teamId() {
    var e2;
    return null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id;
  }
  create(e2) {
    return new jD(this._request).fetch(e2);
  }
  update(e2) {
    return new OD(this._request).fetch(this.id, e2);
  }
};
var pN = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._integrationsSettings = i2.integrationsSettings;
  }
  get integrationsSettings() {
    return new rS(this._request).fetch(this._integrationsSettings.id);
  }
  get integrationsSettingsId() {
    var e2;
    return null === (e2 = this._integrationsSettings) || void 0 === e2 ? void 0 : e2.id;
  }
};
var cN = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2, u2, k2, v2, p2, c2, N2, h2, f2, b2, S2, y2, g2, D2, V2, _2, F2, A2, T2, w2, I2, q2, C2, P2, j2, O2, U2, x2, B2;
    super(e2), this.addedToCycleAt = null !== (n2 = ip(i2.addedToCycleAt)) && void 0 !== n2 ? n2 : void 0, this.addedToProjectAt = null !== (a2 = ip(i2.addedToProjectAt)) && void 0 !== a2 ? a2 : void 0, this.addedToTeamAt = null !== (t2 = ip(i2.addedToTeamAt)) && void 0 !== t2 ? t2 : void 0, this.archivedAt = null !== (d2 = ip(i2.archivedAt)) && void 0 !== d2 ? d2 : void 0, this.autoArchivedAt = null !== (l2 = ip(i2.autoArchivedAt)) && void 0 !== l2 ? l2 : void 0, this.autoClosedAt = null !== (r2 = ip(i2.autoClosedAt)) && void 0 !== r2 ? r2 : void 0, this.boardOrder = i2.boardOrder, this.branchName = i2.branchName, this.canceledAt = null !== (m2 = ip(i2.canceledAt)) && void 0 !== m2 ? m2 : void 0, this.completedAt = null !== (o2 = ip(i2.completedAt)) && void 0 !== o2 ? o2 : void 0, this.createdAt = null !== (s2 = ip(i2.createdAt)) && void 0 !== s2 ? s2 : new Date(), this.customerTicketCount = i2.customerTicketCount, this.description = null !== (u2 = i2.description) && void 0 !== u2 ? u2 : void 0, this.dueDate = null !== (k2 = i2.dueDate) && void 0 !== k2 ? k2 : void 0, this.estimate = null !== (v2 = i2.estimate) && void 0 !== v2 ? v2 : void 0, this.id = i2.id, this.identifier = i2.identifier, this.labelIds = i2.labelIds, this.number = i2.number, this.previousIdentifiers = i2.previousIdentifiers, this.priority = i2.priority, this.priorityLabel = i2.priorityLabel, this.prioritySortOrder = i2.prioritySortOrder, this.reactionData = i2.reactionData, this.slaBreachesAt = null !== (p2 = ip(i2.slaBreachesAt)) && void 0 !== p2 ? p2 : void 0, this.slaHighRiskAt = null !== (c2 = ip(i2.slaHighRiskAt)) && void 0 !== c2 ? c2 : void 0, this.slaMediumRiskAt = null !== (N2 = ip(i2.slaMediumRiskAt)) && void 0 !== N2 ? N2 : void 0, this.slaStartedAt = null !== (h2 = ip(i2.slaStartedAt)) && void 0 !== h2 ? h2 : void 0, this.slaType = null !== (f2 = i2.slaType) && void 0 !== f2 ? f2 : void 0, this.snoozedUntilAt = null !== (b2 = ip(i2.snoozedUntilAt)) && void 0 !== b2 ? b2 : void 0, this.sortOrder = i2.sortOrder, this.startedAt = null !== (S2 = ip(i2.startedAt)) && void 0 !== S2 ? S2 : void 0, this.startedTriageAt = null !== (y2 = ip(i2.startedTriageAt)) && void 0 !== y2 ? y2 : void 0, this.subIssueSortOrder = null !== (g2 = i2.subIssueSortOrder) && void 0 !== g2 ? g2 : void 0, this.title = i2.title, this.trashed = null !== (D2 = i2.trashed) && void 0 !== D2 ? D2 : void 0, this.triagedAt = null !== (V2 = ip(i2.triagedAt)) && void 0 !== V2 ? V2 : void 0, this.updatedAt = null !== (_2 = ip(i2.updatedAt)) && void 0 !== _2 ? _2 : new Date(), this.url = i2.url, this.botActor = i2.botActor ? new ap(e2, i2.botActor) : void 0, this.reactions = i2.reactions.map((i3) => new lf(e2, i3)), this.integrationSourceType = null !== (F2 = i2.integrationSourceType) && void 0 !== F2 ? F2 : void 0, this._assignee = null !== (A2 = i2.assignee) && void 0 !== A2 ? A2 : void 0, this._creator = null !== (T2 = i2.creator) && void 0 !== T2 ? T2 : void 0, this._cycle = null !== (w2 = i2.cycle) && void 0 !== w2 ? w2 : void 0, this._externalUserCreator = null !== (I2 = i2.externalUserCreator) && void 0 !== I2 ? I2 : void 0, this._favorite = null !== (q2 = i2.favorite) && void 0 !== q2 ? q2 : void 0, this._lastAppliedTemplate = null !== (C2 = i2.lastAppliedTemplate) && void 0 !== C2 ? C2 : void 0, this._parent = null !== (P2 = i2.parent) && void 0 !== P2 ? P2 : void 0, this._project = null !== (j2 = i2.project) && void 0 !== j2 ? j2 : void 0, this._projectMilestone = null !== (O2 = i2.projectMilestone) && void 0 !== O2 ? O2 : void 0, this._recurringIssueTemplate = null !== (U2 = i2.recurringIssueTemplate) && void 0 !== U2 ? U2 : void 0, this._snoozedBy = null !== (x2 = i2.snoozedBy) && void 0 !== x2 ? x2 : void 0, this._sourceComment = null !== (B2 = i2.sourceComment) && void 0 !== B2 ? B2 : void 0, this._state = i2.state, this._team = i2.team;
  }
  get assignee() {
    var e2, i2;
    return (null === (e2 = this._assignee) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._assignee) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get assigneeId() {
    var e2;
    return null === (e2 = this._assignee) || void 0 === e2 ? void 0 : e2.id;
  }
  get creator() {
    var e2, i2;
    return (null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._creator) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get creatorId() {
    var e2;
    return null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id;
  }
  get cycle() {
    var e2, i2;
    return (null === (e2 = this._cycle) || void 0 === e2 ? void 0 : e2.id) ? new Ub(this._request).fetch(null === (i2 = this._cycle) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get cycleId() {
    var e2;
    return null === (e2 = this._cycle) || void 0 === e2 ? void 0 : e2.id;
  }
  get externalUserCreator() {
    var e2, i2;
    return (null === (e2 = this._externalUserCreator) || void 0 === e2 ? void 0 : e2.id) ? new Hb(this._request).fetch(null === (i2 = this._externalUserCreator) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get externalUserCreatorId() {
    var e2;
    return null === (e2 = this._externalUserCreator) || void 0 === e2 ? void 0 : e2.id;
  }
  get favorite() {
    var e2, i2;
    return (null === (e2 = this._favorite) || void 0 === e2 ? void 0 : e2.id) ? new Gb(this._request).fetch(null === (i2 = this._favorite) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get favoriteId() {
    var e2;
    return null === (e2 = this._favorite) || void 0 === e2 ? void 0 : e2.id;
  }
  get lastAppliedTemplate() {
    var e2, i2;
    return (null === (e2 = this._lastAppliedTemplate) || void 0 === e2 ? void 0 : e2.id) ? new ny(this._request).fetch(null === (i2 = this._lastAppliedTemplate) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get lastAppliedTemplateId() {
    var e2;
    return null === (e2 = this._lastAppliedTemplate) || void 0 === e2 ? void 0 : e2.id;
  }
  get parent() {
    var e2, i2;
    return (null === (e2 = this._parent) || void 0 === e2 ? void 0 : e2.id) ? new mS(this._request).fetch(null === (i2 = this._parent) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get parentId() {
    var e2;
    return null === (e2 = this._parent) || void 0 === e2 ? void 0 : e2.id;
  }
  get project() {
    var e2, i2;
    return (null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id) ? new qS(this._request).fetch(null === (i2 = this._project) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get projectId() {
    var e2;
    return null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id;
  }
  get projectMilestone() {
    var e2, i2;
    return (null === (e2 = this._projectMilestone) || void 0 === e2 ? void 0 : e2.id) ? new PS(this._request).fetch(null === (i2 = this._projectMilestone) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get projectMilestoneId() {
    var e2;
    return null === (e2 = this._projectMilestone) || void 0 === e2 ? void 0 : e2.id;
  }
  get recurringIssueTemplate() {
    var e2, i2;
    return (null === (e2 = this._recurringIssueTemplate) || void 0 === e2 ? void 0 : e2.id) ? new ny(this._request).fetch(null === (i2 = this._recurringIssueTemplate) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get recurringIssueTemplateId() {
    var e2;
    return null === (e2 = this._recurringIssueTemplate) || void 0 === e2 ? void 0 : e2.id;
  }
  get snoozedBy() {
    var e2, i2;
    return (null === (e2 = this._snoozedBy) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._snoozedBy) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get snoozedById() {
    var e2;
    return null === (e2 = this._snoozedBy) || void 0 === e2 ? void 0 : e2.id;
  }
  get sourceComment() {
    var e2, i2;
    return (null === (e2 = this._sourceComment) || void 0 === e2 ? void 0 : e2.id) ? new Db(this._request).fetch({ id: null === (i2 = this._sourceComment) || void 0 === i2 ? void 0 : i2.id }) : void 0;
  }
  get sourceCommentId() {
    var e2;
    return null === (e2 = this._sourceComment) || void 0 === e2 ? void 0 : e2.id;
  }
  get state() {
    return new Ny(this._request).fetch(this._state.id);
  }
  get stateId() {
    var e2;
    return null === (e2 = this._state) || void 0 === e2 ? void 0 : e2.id;
  }
  get team() {
    return new QS(this._request).fetch(this._team.id);
  }
  get teamId() {
    var e2;
    return null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id;
  }
  attachments(e2) {
    return new jF(this._request, this.id, e2).fetch(e2);
  }
  children(e2) {
    return new UF(this._request, this.id, e2).fetch(e2);
  }
  comments(e2) {
    return new xF(this._request, this.id, e2).fetch(e2);
  }
  history(e2) {
    return new BF(this._request, this.id, e2).fetch(e2);
  }
  inverseRelations(e2) {
    return new RF(this._request, this.id, e2).fetch(e2);
  }
  labels(e2) {
    return new EF(this._request, this.id, e2).fetch(e2);
  }
  needs(e2) {
    return new LF(this._request, this.id, e2).fetch(e2);
  }
  relations(e2) {
    return new zF(this._request, this.id, e2).fetch(e2);
  }
  subscribers(e2) {
    return new MF(this._request, this.id, e2).fetch(e2);
  }
  archive(e2) {
    return new xD(this._request).fetch(this.id, e2);
  }
  create(e2) {
    return new ED(this._request).fetch(e2);
  }
  delete(e2) {
    return new LD(this._request).fetch(this.id, e2);
  }
  unarchive() {
    return new dV(this._request).fetch(this.id);
  }
  update(e2) {
    return new rV(this._request).fetch(this.id, e2);
  }
};
var NN = class extends Yv {
  constructor(e2, i2) {
    var n2;
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._entity = null !== (n2 = i2.entity) && void 0 !== n2 ? n2 : void 0;
  }
  get entity() {
    var e2, i2;
    return (null === (e2 = this._entity) || void 0 === e2 ? void 0 : e2.id) ? new mS(this._request).fetch(null === (i2 = this._entity) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get entityId() {
    var e2;
    return null === (e2 = this._entity) || void 0 === e2 ? void 0 : e2.id;
  }
};
var hN = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.issues = i2.issues.map((i3) => new cN(e2, i3));
  }
};
var fN = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new cN(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var bN = class extends Yv {
  constructor(e2, i2) {
    var n2, a2;
    super(e2), this.filter = null !== (n2 = i2.filter) && void 0 !== n2 ? n2 : void 0, this.logId = null !== (a2 = i2.logId) && void 0 !== a2 ? a2 : void 0;
  }
};
var SN = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2, u2, k2, v2, p2, c2, N2, h2, f2, b2, S2, y2, g2, D2, V2, _2, F2, A2, T2, w2, I2, q2, C2, P2, j2, O2, U2, x2, B2, R2, E2, L2, z2, M2, H2, W2, G2, K2, J2, $2, Z2;
    super(e2), this.actorId = null !== (n2 = i2.actorId) && void 0 !== n2 ? n2 : void 0, this.addedLabelIds = null !== (a2 = i2.addedLabelIds) && void 0 !== a2 ? a2 : void 0, this.archived = null !== (t2 = i2.archived) && void 0 !== t2 ? t2 : void 0, this.archivedAt = null !== (d2 = ip(i2.archivedAt)) && void 0 !== d2 ? d2 : void 0, this.attachmentId = null !== (l2 = i2.attachmentId) && void 0 !== l2 ? l2 : void 0, this.autoArchived = null !== (r2 = i2.autoArchived) && void 0 !== r2 ? r2 : void 0, this.autoClosed = null !== (m2 = i2.autoClosed) && void 0 !== m2 ? m2 : void 0, this.createdAt = null !== (o2 = ip(i2.createdAt)) && void 0 !== o2 ? o2 : new Date(), this.customerNeedId = null !== (s2 = i2.customerNeedId) && void 0 !== s2 ? s2 : void 0, this.fromAssigneeId = null !== (u2 = i2.fromAssigneeId) && void 0 !== u2 ? u2 : void 0, this.fromCycleId = null !== (k2 = i2.fromCycleId) && void 0 !== k2 ? k2 : void 0, this.fromDueDate = null !== (v2 = i2.fromDueDate) && void 0 !== v2 ? v2 : void 0, this.fromEstimate = null !== (p2 = i2.fromEstimate) && void 0 !== p2 ? p2 : void 0, this.fromParentId = null !== (c2 = i2.fromParentId) && void 0 !== c2 ? c2 : void 0, this.fromPriority = null !== (N2 = i2.fromPriority) && void 0 !== N2 ? N2 : void 0, this.fromProjectId = null !== (h2 = i2.fromProjectId) && void 0 !== h2 ? h2 : void 0, this.fromStateId = null !== (f2 = i2.fromStateId) && void 0 !== f2 ? f2 : void 0, this.fromTeamId = null !== (b2 = i2.fromTeamId) && void 0 !== b2 ? b2 : void 0, this.fromTitle = null !== (S2 = i2.fromTitle) && void 0 !== S2 ? S2 : void 0, this.id = i2.id, this.removedLabelIds = null !== (y2 = i2.removedLabelIds) && void 0 !== y2 ? y2 : void 0, this.toAssigneeId = null !== (g2 = i2.toAssigneeId) && void 0 !== g2 ? g2 : void 0, this.toConvertedProjectId = null !== (D2 = i2.toConvertedProjectId) && void 0 !== D2 ? D2 : void 0, this.toCycleId = null !== (V2 = i2.toCycleId) && void 0 !== V2 ? V2 : void 0, this.toDueDate = null !== (_2 = i2.toDueDate) && void 0 !== _2 ? _2 : void 0, this.toEstimate = null !== (F2 = i2.toEstimate) && void 0 !== F2 ? F2 : void 0, this.toParentId = null !== (A2 = i2.toParentId) && void 0 !== A2 ? A2 : void 0, this.toPriority = null !== (T2 = i2.toPriority) && void 0 !== T2 ? T2 : void 0, this.toProjectId = null !== (w2 = i2.toProjectId) && void 0 !== w2 ? w2 : void 0, this.toStateId = null !== (I2 = i2.toStateId) && void 0 !== I2 ? I2 : void 0, this.toTeamId = null !== (q2 = i2.toTeamId) && void 0 !== q2 ? q2 : void 0, this.toTitle = null !== (C2 = i2.toTitle) && void 0 !== C2 ? C2 : void 0, this.trashed = null !== (P2 = i2.trashed) && void 0 !== P2 ? P2 : void 0, this.updatedAt = null !== (j2 = ip(i2.updatedAt)) && void 0 !== j2 ? j2 : new Date(), this.updatedDescription = null !== (O2 = i2.updatedDescription) && void 0 !== O2 ? O2 : void 0, this.botActor = i2.botActor ? new ap(e2, i2.botActor) : void 0, this.issueImport = i2.issueImport ? new gN(e2, i2.issueImport) : void 0, this.actors = i2.actors ? i2.actors.map((i3) => new Hf(e2, i3)) : void 0, this.addedLabels = i2.addedLabels ? i2.addedLabels.map((i3) => new TN(e2, i3)) : void 0, this.descriptionUpdatedBy = i2.descriptionUpdatedBy ? i2.descriptionUpdatedBy.map((i3) => new Hf(e2, i3)) : void 0, this.relationChanges = i2.relationChanges ? i2.relationChanges.map((i3) => new UN(e2, i3)) : void 0, this.removedLabels = i2.removedLabels ? i2.removedLabels.map((i3) => new TN(e2, i3)) : void 0, this.triageResponsibilityNotifiedUsers = i2.triageResponsibilityNotifiedUsers ? i2.triageResponsibilityNotifiedUsers.map((i3) => new Hf(e2, i3)) : void 0, this._actor = null !== (U2 = i2.actor) && void 0 !== U2 ? U2 : void 0, this._attachment = null !== (x2 = i2.attachment) && void 0 !== x2 ? x2 : void 0, this._fromAssignee = null !== (B2 = i2.fromAssignee) && void 0 !== B2 ? B2 : void 0, this._fromCycle = null !== (R2 = i2.fromCycle) && void 0 !== R2 ? R2 : void 0, this._fromParent = null !== (E2 = i2.fromParent) && void 0 !== E2 ? E2 : void 0, this._fromProject = null !== (L2 = i2.fromProject) && void 0 !== L2 ? L2 : void 0, this._fromState = null !== (z2 = i2.fromState) && void 0 !== z2 ? z2 : void 0, this._fromTeam = null !== (M2 = i2.fromTeam) && void 0 !== M2 ? M2 : void 0, this._issue = i2.issue, this._toAssignee = null !== (H2 = i2.toAssignee) && void 0 !== H2 ? H2 : void 0, this._toConvertedProject = null !== (W2 = i2.toConvertedProject) && void 0 !== W2 ? W2 : void 0, this._toCycle = null !== (G2 = i2.toCycle) && void 0 !== G2 ? G2 : void 0, this._toParent = null !== (K2 = i2.toParent) && void 0 !== K2 ? K2 : void 0, this._toProject = null !== (J2 = i2.toProject) && void 0 !== J2 ? J2 : void 0, this._toState = null !== ($2 = i2.toState) && void 0 !== $2 ? $2 : void 0, this._toTeam = null !== (Z2 = i2.toTeam) && void 0 !== Z2 ? Z2 : void 0;
  }
  get actor() {
    var e2, i2;
    return (null === (e2 = this._actor) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._actor) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get attachment() {
    var e2, i2;
    return (null === (e2 = this._attachment) || void 0 === e2 ? void 0 : e2.id) ? new cb(this._request).fetch(null === (i2 = this._attachment) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get fromAssignee() {
    var e2, i2;
    return (null === (e2 = this._fromAssignee) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._fromAssignee) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get fromCycle() {
    var e2, i2;
    return (null === (e2 = this._fromCycle) || void 0 === e2 ? void 0 : e2.id) ? new Ub(this._request).fetch(null === (i2 = this._fromCycle) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get fromParent() {
    var e2, i2;
    return (null === (e2 = this._fromParent) || void 0 === e2 ? void 0 : e2.id) ? new mS(this._request).fetch(null === (i2 = this._fromParent) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get fromProject() {
    var e2, i2;
    return (null === (e2 = this._fromProject) || void 0 === e2 ? void 0 : e2.id) ? new qS(this._request).fetch(null === (i2 = this._fromProject) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get fromState() {
    var e2, i2;
    return (null === (e2 = this._fromState) || void 0 === e2 ? void 0 : e2.id) ? new Ny(this._request).fetch(null === (i2 = this._fromState) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get fromTeam() {
    var e2, i2;
    return (null === (e2 = this._fromTeam) || void 0 === e2 ? void 0 : e2.id) ? new QS(this._request).fetch(null === (i2 = this._fromTeam) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get issue() {
    return new mS(this._request).fetch(this._issue.id);
  }
  get issueId() {
    var e2;
    return null === (e2 = this._issue) || void 0 === e2 ? void 0 : e2.id;
  }
  get toAssignee() {
    var e2, i2;
    return (null === (e2 = this._toAssignee) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._toAssignee) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get toConvertedProject() {
    var e2, i2;
    return (null === (e2 = this._toConvertedProject) || void 0 === e2 ? void 0 : e2.id) ? new qS(this._request).fetch(null === (i2 = this._toConvertedProject) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get toCycle() {
    var e2, i2;
    return (null === (e2 = this._toCycle) || void 0 === e2 ? void 0 : e2.id) ? new Ub(this._request).fetch(null === (i2 = this._toCycle) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get toParent() {
    var e2, i2;
    return (null === (e2 = this._toParent) || void 0 === e2 ? void 0 : e2.id) ? new mS(this._request).fetch(null === (i2 = this._toParent) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get toProject() {
    var e2, i2;
    return (null === (e2 = this._toProject) || void 0 === e2 ? void 0 : e2.id) ? new qS(this._request).fetch(null === (i2 = this._toProject) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get toState() {
    var e2, i2;
    return (null === (e2 = this._toState) || void 0 === e2 ? void 0 : e2.id) ? new Ny(this._request).fetch(null === (i2 = this._toState) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get toTeam() {
    var e2, i2;
    return (null === (e2 = this._toTeam) || void 0 === e2 ? void 0 : e2.id) ? new QS(this._request).fetch(null === (i2 = this._toTeam) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
};
var yN = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new SN(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var gN = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2, u2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.creatorId = i2.creatorId, this.csvFileUrl = null !== (t2 = i2.csvFileUrl) && void 0 !== t2 ? t2 : void 0, this.displayName = i2.displayName, this.error = null !== (d2 = i2.error) && void 0 !== d2 ? d2 : void 0, this.errorMetadata = null !== (l2 = i2.errorMetadata) && void 0 !== l2 ? l2 : void 0, this.id = i2.id, this.mapping = null !== (r2 = i2.mapping) && void 0 !== r2 ? r2 : void 0, this.progress = null !== (m2 = i2.progress) && void 0 !== m2 ? m2 : void 0, this.service = i2.service, this.serviceMetadata = null !== (o2 = i2.serviceMetadata) && void 0 !== o2 ? o2 : void 0, this.status = i2.status, this.teamName = null !== (s2 = i2.teamName) && void 0 !== s2 ? s2 : void 0, this.updatedAt = null !== (u2 = ip(i2.updatedAt)) && void 0 !== u2 ? u2 : new Date();
  }
  delete(e2) {
    return new KD(this._request).fetch(e2);
  }
  update(e2) {
    return new $D(this._request).fetch(this.id, e2);
  }
};
var DN = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.success = i2.success;
  }
};
var VN = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.issueImport = i2.issueImport ? new gN(e2, i2.issueImport) : void 0;
  }
};
var _N = class extends Yv {
  constructor(e2, i2) {
    var n2, a2;
    super(e2), this.count = null !== (n2 = i2.count) && void 0 !== n2 ? n2 : void 0, this.error = null !== (a2 = i2.error) && void 0 !== a2 ? a2 : void 0, this.success = i2.success;
  }
};
var FN = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.issueImport = i2.issueImport ? new gN(e2, i2.issueImport) : void 0;
  }
};
var AN = class extends Yv {
  constructor(e2, i2) {
    var n2;
    super(e2), this.canSync = i2.canSync, this.error = null !== (n2 = i2.error) && void 0 !== n2 ? n2 : void 0;
  }
};
var TN = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.color = i2.color, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.description = null !== (t2 = i2.description) && void 0 !== t2 ? t2 : void 0, this.id = i2.id, this.isGroup = i2.isGroup, this.name = i2.name, this.updatedAt = null !== (d2 = ip(i2.updatedAt)) && void 0 !== d2 ? d2 : new Date(), this._creator = null !== (l2 = i2.creator) && void 0 !== l2 ? l2 : void 0, this._inheritedFrom = null !== (r2 = i2.inheritedFrom) && void 0 !== r2 ? r2 : void 0, this._parent = null !== (m2 = i2.parent) && void 0 !== m2 ? m2 : void 0, this._team = null !== (o2 = i2.team) && void 0 !== o2 ? o2 : void 0;
  }
  get creator() {
    var e2, i2;
    return (null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._creator) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get creatorId() {
    var e2;
    return null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id;
  }
  get inheritedFrom() {
    var e2, i2;
    return (null === (e2 = this._inheritedFrom) || void 0 === e2 ? void 0 : e2.id) ? new pS(this._request).fetch(null === (i2 = this._inheritedFrom) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get inheritedFromId() {
    var e2;
    return null === (e2 = this._inheritedFrom) || void 0 === e2 ? void 0 : e2.id;
  }
  get organization() {
    return new AS(this._request).fetch();
  }
  get parent() {
    var e2, i2;
    return (null === (e2 = this._parent) || void 0 === e2 ? void 0 : e2.id) ? new pS(this._request).fetch(null === (i2 = this._parent) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get parentId() {
    var e2;
    return null === (e2 = this._parent) || void 0 === e2 ? void 0 : e2.id;
  }
  get team() {
    var e2, i2;
    return (null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id) ? new QS(this._request).fetch(null === (i2 = this._team) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get teamId() {
    var e2;
    return null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id;
  }
  children(e2) {
    return new HF(this._request, this.id, e2).fetch(e2);
  }
  issues(e2) {
    return new WF(this._request, this.id, e2).fetch(e2);
  }
  create(e2, i2) {
    return new ZD(this._request).fetch(e2, i2);
  }
  delete() {
    return new YD(this._request).fetch(this.id);
  }
  update(e2, i2) {
    return new QD(this._request).fetch(this.id, e2, i2);
  }
};
var wN = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new TN(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var IN = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._issueLabel = i2.issueLabel;
  }
  get issueLabel() {
    return new pS(this._request).fetch(this._issueLabel.id);
  }
  get issueLabelId() {
    var e2;
    return null === (e2 = this._issueLabel) || void 0 === e2 ? void 0 : e2.id;
  }
};
var qN = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2, u2, k2, v2, p2, c2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.commentId = null !== (a2 = i2.commentId) && void 0 !== a2 ? a2 : void 0, this.createdAt = null !== (t2 = ip(i2.createdAt)) && void 0 !== t2 ? t2 : new Date(), this.emailedAt = null !== (d2 = ip(i2.emailedAt)) && void 0 !== d2 ? d2 : void 0, this.id = i2.id, this.issueId = i2.issueId, this.parentCommentId = null !== (l2 = i2.parentCommentId) && void 0 !== l2 ? l2 : void 0, this.reactionEmoji = null !== (r2 = i2.reactionEmoji) && void 0 !== r2 ? r2 : void 0, this.readAt = null !== (m2 = ip(i2.readAt)) && void 0 !== m2 ? m2 : void 0, this.snoozedUntilAt = null !== (o2 = ip(i2.snoozedUntilAt)) && void 0 !== o2 ? o2 : void 0, this.type = i2.type, this.unsnoozedAt = null !== (s2 = ip(i2.unsnoozedAt)) && void 0 !== s2 ? s2 : void 0, this.updatedAt = null !== (u2 = ip(i2.updatedAt)) && void 0 !== u2 ? u2 : new Date(), this.botActor = i2.botActor ? new ap(e2, i2.botActor) : void 0, this.subscriptions = i2.subscriptions ? i2.subscriptions.map((i3) => new nh(e2, i3)) : void 0, this._actor = null !== (k2 = i2.actor) && void 0 !== k2 ? k2 : void 0, this._comment = null !== (v2 = i2.comment) && void 0 !== v2 ? v2 : void 0, this._externalUserActor = null !== (p2 = i2.externalUserActor) && void 0 !== p2 ? p2 : void 0, this._issue = i2.issue, this._parentComment = null !== (c2 = i2.parentComment) && void 0 !== c2 ? c2 : void 0, this._team = i2.team, this._user = i2.user;
  }
  get actor() {
    var e2, i2;
    return (null === (e2 = this._actor) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._actor) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get actorId() {
    var e2;
    return null === (e2 = this._actor) || void 0 === e2 ? void 0 : e2.id;
  }
  get comment() {
    var e2, i2;
    return (null === (e2 = this._comment) || void 0 === e2 ? void 0 : e2.id) ? new Db(this._request).fetch({ id: null === (i2 = this._comment) || void 0 === i2 ? void 0 : i2.id }) : void 0;
  }
  get externalUserActor() {
    var e2, i2;
    return (null === (e2 = this._externalUserActor) || void 0 === e2 ? void 0 : e2.id) ? new Hb(this._request).fetch(null === (i2 = this._externalUserActor) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get externalUserActorId() {
    var e2;
    return null === (e2 = this._externalUserActor) || void 0 === e2 ? void 0 : e2.id;
  }
  get issue() {
    return new mS(this._request).fetch(this._issue.id);
  }
  get parentComment() {
    var e2, i2;
    return (null === (e2 = this._parentComment) || void 0 === e2 ? void 0 : e2.id) ? new Db(this._request).fetch({ id: null === (i2 = this._parentComment) || void 0 === i2 ? void 0 : i2.id }) : void 0;
  }
  get team() {
    return new QS(this._request).fetch(this._team.id);
  }
  get teamId() {
    var e2;
    return null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id;
  }
  get user() {
    return new oy(this._request).fetch(this._user.id);
  }
  get userId() {
    var e2;
    return null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id;
  }
};
var CN = class extends Yv {
  constructor(e2, i2) {
    var n2;
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._issue = null !== (n2 = i2.issue) && void 0 !== n2 ? n2 : void 0;
  }
  get issue() {
    var e2, i2;
    return (null === (e2 = this._issue) || void 0 === e2 ? void 0 : e2.id) ? new mS(this._request).fetch(null === (i2 = this._issue) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get issueId() {
    var e2;
    return null === (e2 = this._issue) || void 0 === e2 ? void 0 : e2.id;
  }
};
var PN = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.label = i2.label, this.priority = i2.priority;
  }
};
var jN = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.id = i2.id, this.type = i2.type, this.updatedAt = null !== (t2 = ip(i2.updatedAt)) && void 0 !== t2 ? t2 : new Date(), this._issue = i2.issue, this._relatedIssue = i2.relatedIssue;
  }
  get issue() {
    return new mS(this._request).fetch(this._issue.id);
  }
  get issueId() {
    var e2;
    return null === (e2 = this._issue) || void 0 === e2 ? void 0 : e2.id;
  }
  get relatedIssue() {
    return new mS(this._request).fetch(this._relatedIssue.id);
  }
  get relatedIssueId() {
    var e2;
    return null === (e2 = this._relatedIssue) || void 0 === e2 ? void 0 : e2.id;
  }
  create(e2, i2) {
    return new XD(this._request).fetch(e2, i2);
  }
  delete() {
    return new eV(this._request).fetch(this.id);
  }
  update(e2) {
    return new iV(this._request).fetch(this.id, e2);
  }
};
var ON = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new jN(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var UN = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.identifier = i2.identifier, this.type = i2.type;
  }
};
var xN = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._issueRelation = i2.issueRelation;
  }
  get issueRelation() {
    return new hS(this._request).fetch(this._issueRelation.id);
  }
  get issueRelationId() {
    var e2;
    return null === (e2 = this._issueRelation) || void 0 === e2 ? void 0 : e2.id;
  }
};
var BN = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.totalCount = i2.totalCount, this.archivePayload = new op(e2, i2.archivePayload), this.pageInfo = new yh(e2, i2.pageInfo), this.nodes = i2.nodes.map((i3) => new RN(e2, i3));
  }
};
var RN = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2, u2, k2, v2, p2, c2, N2, h2, f2, b2, S2, y2, g2, D2, V2, _2, F2, A2, T2, w2, I2, q2, C2, P2, j2, O2, U2, x2, B2;
    super(e2), this.addedToCycleAt = null !== (n2 = ip(i2.addedToCycleAt)) && void 0 !== n2 ? n2 : void 0, this.addedToProjectAt = null !== (a2 = ip(i2.addedToProjectAt)) && void 0 !== a2 ? a2 : void 0, this.addedToTeamAt = null !== (t2 = ip(i2.addedToTeamAt)) && void 0 !== t2 ? t2 : void 0, this.archivedAt = null !== (d2 = ip(i2.archivedAt)) && void 0 !== d2 ? d2 : void 0, this.autoArchivedAt = null !== (l2 = ip(i2.autoArchivedAt)) && void 0 !== l2 ? l2 : void 0, this.autoClosedAt = null !== (r2 = ip(i2.autoClosedAt)) && void 0 !== r2 ? r2 : void 0, this.boardOrder = i2.boardOrder, this.branchName = i2.branchName, this.canceledAt = null !== (m2 = ip(i2.canceledAt)) && void 0 !== m2 ? m2 : void 0, this.completedAt = null !== (o2 = ip(i2.completedAt)) && void 0 !== o2 ? o2 : void 0, this.createdAt = null !== (s2 = ip(i2.createdAt)) && void 0 !== s2 ? s2 : new Date(), this.customerTicketCount = i2.customerTicketCount, this.description = null !== (u2 = i2.description) && void 0 !== u2 ? u2 : void 0, this.dueDate = null !== (k2 = i2.dueDate) && void 0 !== k2 ? k2 : void 0, this.estimate = null !== (v2 = i2.estimate) && void 0 !== v2 ? v2 : void 0, this.id = i2.id, this.identifier = i2.identifier, this.labelIds = i2.labelIds, this.metadata = i2.metadata, this.number = i2.number, this.previousIdentifiers = i2.previousIdentifiers, this.priority = i2.priority, this.priorityLabel = i2.priorityLabel, this.prioritySortOrder = i2.prioritySortOrder, this.reactionData = i2.reactionData, this.slaBreachesAt = null !== (p2 = ip(i2.slaBreachesAt)) && void 0 !== p2 ? p2 : void 0, this.slaHighRiskAt = null !== (c2 = ip(i2.slaHighRiskAt)) && void 0 !== c2 ? c2 : void 0, this.slaMediumRiskAt = null !== (N2 = ip(i2.slaMediumRiskAt)) && void 0 !== N2 ? N2 : void 0, this.slaStartedAt = null !== (h2 = ip(i2.slaStartedAt)) && void 0 !== h2 ? h2 : void 0, this.slaType = null !== (f2 = i2.slaType) && void 0 !== f2 ? f2 : void 0, this.snoozedUntilAt = null !== (b2 = ip(i2.snoozedUntilAt)) && void 0 !== b2 ? b2 : void 0, this.sortOrder = i2.sortOrder, this.startedAt = null !== (S2 = ip(i2.startedAt)) && void 0 !== S2 ? S2 : void 0, this.startedTriageAt = null !== (y2 = ip(i2.startedTriageAt)) && void 0 !== y2 ? y2 : void 0, this.subIssueSortOrder = null !== (g2 = i2.subIssueSortOrder) && void 0 !== g2 ? g2 : void 0, this.title = i2.title, this.trashed = null !== (D2 = i2.trashed) && void 0 !== D2 ? D2 : void 0, this.triagedAt = null !== (V2 = ip(i2.triagedAt)) && void 0 !== V2 ? V2 : void 0, this.updatedAt = null !== (_2 = ip(i2.updatedAt)) && void 0 !== _2 ? _2 : new Date(), this.url = i2.url, this.botActor = i2.botActor ? new ap(e2, i2.botActor) : void 0, this.reactions = i2.reactions.map((i3) => new lf(e2, i3)), this.integrationSourceType = null !== (F2 = i2.integrationSourceType) && void 0 !== F2 ? F2 : void 0, this._assignee = null !== (A2 = i2.assignee) && void 0 !== A2 ? A2 : void 0, this._creator = null !== (T2 = i2.creator) && void 0 !== T2 ? T2 : void 0, this._cycle = null !== (w2 = i2.cycle) && void 0 !== w2 ? w2 : void 0, this._externalUserCreator = null !== (I2 = i2.externalUserCreator) && void 0 !== I2 ? I2 : void 0, this._favorite = null !== (q2 = i2.favorite) && void 0 !== q2 ? q2 : void 0, this._lastAppliedTemplate = null !== (C2 = i2.lastAppliedTemplate) && void 0 !== C2 ? C2 : void 0, this._parent = null !== (P2 = i2.parent) && void 0 !== P2 ? P2 : void 0, this._project = null !== (j2 = i2.project) && void 0 !== j2 ? j2 : void 0, this._projectMilestone = null !== (O2 = i2.projectMilestone) && void 0 !== O2 ? O2 : void 0, this._recurringIssueTemplate = null !== (U2 = i2.recurringIssueTemplate) && void 0 !== U2 ? U2 : void 0, this._snoozedBy = null !== (x2 = i2.snoozedBy) && void 0 !== x2 ? x2 : void 0, this._sourceComment = null !== (B2 = i2.sourceComment) && void 0 !== B2 ? B2 : void 0, this._state = i2.state, this._team = i2.team;
  }
  get assignee() {
    var e2, i2;
    return (null === (e2 = this._assignee) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._assignee) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get assigneeId() {
    var e2;
    return null === (e2 = this._assignee) || void 0 === e2 ? void 0 : e2.id;
  }
  get creator() {
    var e2, i2;
    return (null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._creator) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get creatorId() {
    var e2;
    return null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id;
  }
  get cycle() {
    var e2, i2;
    return (null === (e2 = this._cycle) || void 0 === e2 ? void 0 : e2.id) ? new Ub(this._request).fetch(null === (i2 = this._cycle) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get cycleId() {
    var e2;
    return null === (e2 = this._cycle) || void 0 === e2 ? void 0 : e2.id;
  }
  get externalUserCreator() {
    var e2, i2;
    return (null === (e2 = this._externalUserCreator) || void 0 === e2 ? void 0 : e2.id) ? new Hb(this._request).fetch(null === (i2 = this._externalUserCreator) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get externalUserCreatorId() {
    var e2;
    return null === (e2 = this._externalUserCreator) || void 0 === e2 ? void 0 : e2.id;
  }
  get favorite() {
    var e2, i2;
    return (null === (e2 = this._favorite) || void 0 === e2 ? void 0 : e2.id) ? new Gb(this._request).fetch(null === (i2 = this._favorite) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get favoriteId() {
    var e2;
    return null === (e2 = this._favorite) || void 0 === e2 ? void 0 : e2.id;
  }
  get lastAppliedTemplate() {
    var e2, i2;
    return (null === (e2 = this._lastAppliedTemplate) || void 0 === e2 ? void 0 : e2.id) ? new ny(this._request).fetch(null === (i2 = this._lastAppliedTemplate) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get lastAppliedTemplateId() {
    var e2;
    return null === (e2 = this._lastAppliedTemplate) || void 0 === e2 ? void 0 : e2.id;
  }
  get parent() {
    var e2, i2;
    return (null === (e2 = this._parent) || void 0 === e2 ? void 0 : e2.id) ? new mS(this._request).fetch(null === (i2 = this._parent) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get parentId() {
    var e2;
    return null === (e2 = this._parent) || void 0 === e2 ? void 0 : e2.id;
  }
  get project() {
    var e2, i2;
    return (null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id) ? new qS(this._request).fetch(null === (i2 = this._project) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get projectId() {
    var e2;
    return null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id;
  }
  get projectMilestone() {
    var e2, i2;
    return (null === (e2 = this._projectMilestone) || void 0 === e2 ? void 0 : e2.id) ? new PS(this._request).fetch(null === (i2 = this._projectMilestone) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get projectMilestoneId() {
    var e2;
    return null === (e2 = this._projectMilestone) || void 0 === e2 ? void 0 : e2.id;
  }
  get recurringIssueTemplate() {
    var e2, i2;
    return (null === (e2 = this._recurringIssueTemplate) || void 0 === e2 ? void 0 : e2.id) ? new ny(this._request).fetch(null === (i2 = this._recurringIssueTemplate) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get recurringIssueTemplateId() {
    var e2;
    return null === (e2 = this._recurringIssueTemplate) || void 0 === e2 ? void 0 : e2.id;
  }
  get snoozedBy() {
    var e2, i2;
    return (null === (e2 = this._snoozedBy) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._snoozedBy) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get snoozedById() {
    var e2;
    return null === (e2 = this._snoozedBy) || void 0 === e2 ? void 0 : e2.id;
  }
  get sourceComment() {
    var e2, i2;
    return (null === (e2 = this._sourceComment) || void 0 === e2 ? void 0 : e2.id) ? new Db(this._request).fetch({ id: null === (i2 = this._sourceComment) || void 0 === i2 ? void 0 : i2.id }) : void 0;
  }
  get sourceCommentId() {
    var e2;
    return null === (e2 = this._sourceComment) || void 0 === e2 ? void 0 : e2.id;
  }
  get state() {
    return new Ny(this._request).fetch(this._state.id);
  }
  get stateId() {
    var e2;
    return null === (e2 = this._state) || void 0 === e2 ? void 0 : e2.id;
  }
  get team() {
    return new QS(this._request).fetch(this._team.id);
  }
  get teamId() {
    var e2;
    return null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id;
  }
};
var EN = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.title = i2.title;
  }
};
var LN = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2, u2, k2, v2;
    super(e2), this.active = i2.active, this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.id = i2.id, this.notificationSubscriptionTypes = i2.notificationSubscriptionTypes, this.updatedAt = null !== (t2 = ip(i2.updatedAt)) && void 0 !== t2 ? t2 : new Date(), this.contextViewType = null !== (d2 = i2.contextViewType) && void 0 !== d2 ? d2 : void 0, this.userContextViewType = null !== (l2 = i2.userContextViewType) && void 0 !== l2 ? l2 : void 0, this._customView = null !== (r2 = i2.customView) && void 0 !== r2 ? r2 : void 0, this._customer = null !== (m2 = i2.customer) && void 0 !== m2 ? m2 : void 0, this._cycle = null !== (o2 = i2.cycle) && void 0 !== o2 ? o2 : void 0, this._initiative = null !== (s2 = i2.initiative) && void 0 !== s2 ? s2 : void 0, this._label = i2.label, this._project = null !== (u2 = i2.project) && void 0 !== u2 ? u2 : void 0, this._subscriber = i2.subscriber, this._team = null !== (k2 = i2.team) && void 0 !== k2 ? k2 : void 0, this._user = null !== (v2 = i2.user) && void 0 !== v2 ? v2 : void 0;
  }
  get customView() {
    var e2, i2;
    return (null === (e2 = this._customView) || void 0 === e2 ? void 0 : e2.id) ? new _b(this._request).fetch(null === (i2 = this._customView) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get customViewId() {
    var e2;
    return null === (e2 = this._customView) || void 0 === e2 ? void 0 : e2.id;
  }
  get customer() {
    var e2, i2;
    return (null === (e2 = this._customer) || void 0 === e2 ? void 0 : e2.id) ? new Tb(this._request).fetch(null === (i2 = this._customer) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get customerId() {
    var e2;
    return null === (e2 = this._customer) || void 0 === e2 ? void 0 : e2.id;
  }
  get cycle() {
    var e2, i2;
    return (null === (e2 = this._cycle) || void 0 === e2 ? void 0 : e2.id) ? new Ub(this._request).fetch(null === (i2 = this._cycle) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get cycleId() {
    var e2;
    return null === (e2 = this._cycle) || void 0 === e2 ? void 0 : e2.id;
  }
  get initiative() {
    var e2, i2;
    return (null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id) ? new Jb(this._request).fetch(null === (i2 = this._initiative) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get initiativeId() {
    var e2;
    return null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id;
  }
  get label() {
    return new pS(this._request).fetch(this._label.id);
  }
  get labelId() {
    var e2;
    return null === (e2 = this._label) || void 0 === e2 ? void 0 : e2.id;
  }
  get project() {
    var e2, i2;
    return (null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id) ? new qS(this._request).fetch(null === (i2 = this._project) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get projectId() {
    var e2;
    return null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id;
  }
  get subscriber() {
    return new oy(this._request).fetch(this._subscriber.id);
  }
  get subscriberId() {
    var e2;
    return null === (e2 = this._subscriber) || void 0 === e2 ? void 0 : e2.id;
  }
  get team() {
    var e2, i2;
    return (null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id) ? new QS(this._request).fetch(null === (i2 = this._team) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get teamId() {
    var e2;
    return null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id;
  }
  get user() {
    var e2, i2;
    return (null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._user) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get userId() {
    var e2;
    return null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id;
  }
};
var zN = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.success = i2.success;
  }
};
var WN = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.emailedAt = null !== (t2 = ip(i2.emailedAt)) && void 0 !== t2 ? t2 : void 0, this.id = i2.id, this.readAt = null !== (d2 = ip(i2.readAt)) && void 0 !== d2 ? d2 : void 0, this.snoozedUntilAt = null !== (l2 = ip(i2.snoozedUntilAt)) && void 0 !== l2 ? l2 : void 0, this.type = i2.type, this.unsnoozedAt = null !== (r2 = ip(i2.unsnoozedAt)) && void 0 !== r2 ? r2 : void 0, this.updatedAt = null !== (m2 = ip(i2.updatedAt)) && void 0 !== m2 ? m2 : new Date(), this.botActor = i2.botActor ? new ap(e2, i2.botActor) : void 0, this._actor = null !== (o2 = i2.actor) && void 0 !== o2 ? o2 : void 0, this._externalUserActor = null !== (s2 = i2.externalUserActor) && void 0 !== s2 ? s2 : void 0, this._user = i2.user;
  }
  get actor() {
    var e2, i2;
    return (null === (e2 = this._actor) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._actor) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get actorId() {
    var e2;
    return null === (e2 = this._actor) || void 0 === e2 ? void 0 : e2.id;
  }
  get externalUserActor() {
    var e2, i2;
    return (null === (e2 = this._externalUserActor) || void 0 === e2 ? void 0 : e2.id) ? new Hb(this._request).fetch(null === (i2 = this._externalUserActor) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get externalUserActorId() {
    var e2;
    return null === (e2 = this._externalUserActor) || void 0 === e2 ? void 0 : e2.id;
  }
  get user() {
    return new oy(this._request).fetch(this._user.id);
  }
  get userId() {
    var e2;
    return null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id;
  }
  archive() {
    return new pV(this._request).fetch(this.id);
  }
  unarchive() {
    return new DV(this._request).fetch(this.id);
  }
  update(e2) {
    return new _V(this._request).fetch(this.id, e2);
  }
};
var GN = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success;
  }
};
var KN = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.notifications = i2.notifications.map((i3) => new WN(e2, i3));
  }
};
var JN = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.appsAndIntegrations = new $N(e2, i2.appsAndIntegrations), this.assignments = new $N(e2, i2.assignments), this.commentsAndReplies = new $N(e2, i2.commentsAndReplies), this.customers = new $N(e2, i2.customers), this.documentChanges = new $N(e2, i2.documentChanges), this.mentions = new $N(e2, i2.mentions), this.postsAndUpdates = new $N(e2, i2.postsAndUpdates), this.reactions = new $N(e2, i2.reactions), this.reminders = new $N(e2, i2.reminders), this.reviews = new $N(e2, i2.reviews), this.statusChanges = new $N(e2, i2.statusChanges), this.subscriptions = new $N(e2, i2.subscriptions), this.system = new $N(e2, i2.system), this.triage = new $N(e2, i2.triage);
  }
};
var $N = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.desktop = i2.desktop, this.email = i2.email, this.mobile = i2.mobile, this.slack = i2.slack;
  }
};
var ZN = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => {
      switch (i3.__typename) {
        case "DocumentNotification":
          return new lc(e2, i3);
        case "InitiativeNotification":
          return new Wc(e2, i3);
        case "IssueNotification":
          return new qN(e2, i3);
        case "OauthClientApprovalNotification":
          return new lh(e2, i3);
        case "ProjectNotification":
          return new Uh(e2, i3);
        default:
          return new WN(e2, i3);
      }
    }), new yh(e2, n2.pageInfo));
  }
};
var YN = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.mobile = i2.mobile ? new QN(e2, i2.mobile) : void 0;
  }
};
var QN = class extends Yv {
  constructor(e2, i2) {
    var n2;
    super(e2), this.notificationsDisabled = null !== (n2 = i2.notificationsDisabled) && void 0 !== n2 ? n2 : void 0, this.schedule = i2.schedule ? new eh(e2, i2.schedule) : void 0;
  }
};
var XN = class extends Yv {
  constructor(e2, i2) {
    var n2, a2;
    super(e2), this.end = null !== (n2 = i2.end) && void 0 !== n2 ? n2 : void 0, this.start = null !== (a2 = i2.start) && void 0 !== a2 ? a2 : void 0;
  }
};
var eh = class extends Yv {
  constructor(e2, i2) {
    var n2;
    super(e2), this.disabled = null !== (n2 = i2.disabled) && void 0 !== n2 ? n2 : void 0, this.friday = new XN(e2, i2.friday), this.monday = new XN(e2, i2.monday), this.saturday = new XN(e2, i2.saturday), this.sunday = new XN(e2, i2.sunday), this.thursday = new XN(e2, i2.thursday), this.tuesday = new XN(e2, i2.tuesday), this.wednesday = new XN(e2, i2.wednesday);
  }
};
var ih = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success;
  }
};
var nh = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2, u2, k2, v2, p2;
    super(e2), this.active = i2.active, this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.id = i2.id, this.updatedAt = null !== (t2 = ip(i2.updatedAt)) && void 0 !== t2 ? t2 : new Date(), this.contextViewType = null !== (d2 = i2.contextViewType) && void 0 !== d2 ? d2 : void 0, this.userContextViewType = null !== (l2 = i2.userContextViewType) && void 0 !== l2 ? l2 : void 0, this._customView = null !== (r2 = i2.customView) && void 0 !== r2 ? r2 : void 0, this._customer = null !== (m2 = i2.customer) && void 0 !== m2 ? m2 : void 0, this._cycle = null !== (o2 = i2.cycle) && void 0 !== o2 ? o2 : void 0, this._initiative = null !== (s2 = i2.initiative) && void 0 !== s2 ? s2 : void 0, this._label = null !== (u2 = i2.label) && void 0 !== u2 ? u2 : void 0, this._project = null !== (k2 = i2.project) && void 0 !== k2 ? k2 : void 0, this._subscriber = i2.subscriber, this._team = null !== (v2 = i2.team) && void 0 !== v2 ? v2 : void 0, this._user = null !== (p2 = i2.user) && void 0 !== p2 ? p2 : void 0;
  }
  get customView() {
    var e2, i2;
    return (null === (e2 = this._customView) || void 0 === e2 ? void 0 : e2.id) ? new _b(this._request).fetch(null === (i2 = this._customView) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get customViewId() {
    var e2;
    return null === (e2 = this._customView) || void 0 === e2 ? void 0 : e2.id;
  }
  get customer() {
    var e2, i2;
    return (null === (e2 = this._customer) || void 0 === e2 ? void 0 : e2.id) ? new Tb(this._request).fetch(null === (i2 = this._customer) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get customerId() {
    var e2;
    return null === (e2 = this._customer) || void 0 === e2 ? void 0 : e2.id;
  }
  get cycle() {
    var e2, i2;
    return (null === (e2 = this._cycle) || void 0 === e2 ? void 0 : e2.id) ? new Ub(this._request).fetch(null === (i2 = this._cycle) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get cycleId() {
    var e2;
    return null === (e2 = this._cycle) || void 0 === e2 ? void 0 : e2.id;
  }
  get initiative() {
    var e2, i2;
    return (null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id) ? new Jb(this._request).fetch(null === (i2 = this._initiative) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get initiativeId() {
    var e2;
    return null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id;
  }
  get label() {
    var e2, i2;
    return (null === (e2 = this._label) || void 0 === e2 ? void 0 : e2.id) ? new pS(this._request).fetch(null === (i2 = this._label) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get labelId() {
    var e2;
    return null === (e2 = this._label) || void 0 === e2 ? void 0 : e2.id;
  }
  get project() {
    var e2, i2;
    return (null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id) ? new qS(this._request).fetch(null === (i2 = this._project) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get projectId() {
    var e2;
    return null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id;
  }
  get subscriber() {
    return new oy(this._request).fetch(this._subscriber.id);
  }
  get subscriberId() {
    var e2;
    return null === (e2 = this._subscriber) || void 0 === e2 ? void 0 : e2.id;
  }
  get team() {
    var e2, i2;
    return (null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id) ? new QS(this._request).fetch(null === (i2 = this._team) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get teamId() {
    var e2;
    return null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id;
  }
  get user() {
    var e2, i2;
    return (null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._user) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get userId() {
    var e2;
    return null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id;
  }
  create(e2) {
    return new SV(this._request).fetch(e2);
  }
  delete() {
    return new yV(this._request).fetch(this.id);
  }
  update(e2) {
    return new gV(this._request).fetch(this.id, e2);
  }
};
var ah = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => {
      switch (i3.__typename) {
        case "CustomViewNotificationSubscription":
          return new Cp(e2, i3);
        case "CustomerNotificationSubscription":
          return new Lp(e2, i3);
        case "CycleNotificationSubscription":
          return new Yp(e2, i3);
        case "InitiativeNotificationSubscription":
          return new Gc(e2, i3);
        case "LabelNotificationSubscription":
          return new LN(e2, i3);
        case "ProjectNotificationSubscription":
          return new xh(e2, i3);
        case "TeamNotificationSubscription":
          return new Tf(e2, i3);
        case "UserNotificationSubscription":
          return new Jf(e2, i3);
        default:
          return new nh(e2, i3);
      }
    }), new yh(e2, n2.pageInfo));
  }
};
var th = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success;
  }
};
var dh = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.denyReason = null !== (t2 = i2.denyReason) && void 0 !== t2 ? t2 : void 0, this.id = i2.id, this.oauthClientId = i2.oauthClientId, this.requestReason = null !== (d2 = i2.requestReason) && void 0 !== d2 ? d2 : void 0, this.requesterId = i2.requesterId, this.responderId = null !== (l2 = i2.responderId) && void 0 !== l2 ? l2 : void 0, this.scopes = i2.scopes, this.updatedAt = null !== (r2 = ip(i2.updatedAt)) && void 0 !== r2 ? r2 : new Date(), this.status = i2.status;
  }
};
var lh = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.emailedAt = null !== (t2 = ip(i2.emailedAt)) && void 0 !== t2 ? t2 : void 0, this.id = i2.id, this.oauthClientApprovalId = i2.oauthClientApprovalId, this.readAt = null !== (d2 = ip(i2.readAt)) && void 0 !== d2 ? d2 : void 0, this.snoozedUntilAt = null !== (l2 = ip(i2.snoozedUntilAt)) && void 0 !== l2 ? l2 : void 0, this.type = i2.type, this.unsnoozedAt = null !== (r2 = ip(i2.unsnoozedAt)) && void 0 !== r2 ? r2 : void 0, this.updatedAt = null !== (m2 = ip(i2.updatedAt)) && void 0 !== m2 ? m2 : new Date(), this.botActor = i2.botActor ? new ap(e2, i2.botActor) : void 0, this.oauthClientApproval = new dh(e2, i2.oauthClientApproval), this._actor = null !== (o2 = i2.actor) && void 0 !== o2 ? o2 : void 0, this._externalUserActor = null !== (s2 = i2.externalUserActor) && void 0 !== s2 ? s2 : void 0, this._user = i2.user;
  }
  get actor() {
    var e2, i2;
    return (null === (e2 = this._actor) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._actor) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get actorId() {
    var e2;
    return null === (e2 = this._actor) || void 0 === e2 ? void 0 : e2.id;
  }
  get externalUserActor() {
    var e2, i2;
    return (null === (e2 = this._externalUserActor) || void 0 === e2 ? void 0 : e2.id) ? new Hb(this._request).fetch(null === (i2 = this._externalUserActor) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get externalUserActorId() {
    var e2;
    return null === (e2 = this._externalUserActor) || void 0 === e2 ? void 0 : e2.id;
  }
  get user() {
    return new oy(this._request).fetch(this._user.id);
  }
  get userId() {
    var e2;
    return null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id;
  }
};
var rh = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2, u2, k2, v2;
    super(e2), this.allowMembersToInvite = null !== (n2 = i2.allowMembersToInvite) && void 0 !== n2 ? n2 : void 0, this.allowedAuthServices = i2.allowedAuthServices, this.archivedAt = null !== (a2 = ip(i2.archivedAt)) && void 0 !== a2 ? a2 : void 0, this.createdAt = null !== (t2 = ip(i2.createdAt)) && void 0 !== t2 ? t2 : new Date(), this.createdIssueCount = i2.createdIssueCount, this.customerCount = i2.customerCount, this.customersConfiguration = i2.customersConfiguration, this.customersEnabled = i2.customersEnabled, this.deletionRequestedAt = null !== (d2 = ip(i2.deletionRequestedAt)) && void 0 !== d2 ? d2 : void 0, this.feedEnabled = i2.feedEnabled, this.fiscalYearStartMonth = i2.fiscalYearStartMonth, this.gitBranchFormat = null !== (l2 = i2.gitBranchFormat) && void 0 !== l2 ? l2 : void 0, this.gitLinkbackMessagesEnabled = i2.gitLinkbackMessagesEnabled, this.gitPublicLinkbackMessagesEnabled = i2.gitPublicLinkbackMessagesEnabled, this.id = i2.id, this.initiativeUpdateReminderFrequencyInWeeks = null !== (r2 = i2.initiativeUpdateReminderFrequencyInWeeks) && void 0 !== r2 ? r2 : void 0, this.initiativeUpdateRemindersHour = i2.initiativeUpdateRemindersHour, this.logoUrl = null !== (m2 = i2.logoUrl) && void 0 !== m2 ? m2 : void 0, this.name = i2.name, this.periodUploadVolume = i2.periodUploadVolume, this.previousUrlKeys = i2.previousUrlKeys, this.projectUpdateReminderFrequencyInWeeks = null !== (o2 = i2.projectUpdateReminderFrequencyInWeeks) && void 0 !== o2 ? o2 : void 0, this.projectUpdateRemindersHour = i2.projectUpdateRemindersHour, this.restrictTeamCreationToAdmins = null !== (s2 = i2.restrictTeamCreationToAdmins) && void 0 !== s2 ? s2 : void 0, this.roadmapEnabled = i2.roadmapEnabled, this.samlEnabled = i2.samlEnabled, this.scimEnabled = i2.scimEnabled, this.trialEndsAt = null !== (u2 = ip(i2.trialEndsAt)) && void 0 !== u2 ? u2 : void 0, this.updatedAt = null !== (k2 = ip(i2.updatedAt)) && void 0 !== k2 ? k2 : new Date(), this.urlKey = i2.urlKey, this.userCount = i2.userCount, this.subscription = i2.subscription ? new gh(e2, i2.subscription) : void 0, this.ipRestrictions = i2.ipRestrictions ? i2.ipRestrictions.map((i3) => new hh(e2, i3)) : void 0, this.projectStatuses = i2.projectStatuses.map((i3) => new Hh(e2, i3)), this.defaultFeedSummarySchedule = null !== (v2 = i2.defaultFeedSummarySchedule) && void 0 !== v2 ? v2 : void 0, this.initiativeUpdateRemindersDay = i2.initiativeUpdateRemindersDay, this.projectUpdateRemindersDay = i2.projectUpdateRemindersDay, this.projectUpdatesReminderFrequency = i2.projectUpdatesReminderFrequency, this.releaseChannel = i2.releaseChannel, this.slaDayCount = i2.slaDayCount;
  }
  integrations(e2) {
    return new nA(this._request, e2).fetch(e2);
  }
  labels(e2) {
    return new aA(this._request, e2).fetch(e2);
  }
  teams(e2) {
    return new dA(this._request, e2).fetch(e2);
  }
  templates(e2) {
    return new lA(this._request, e2).fetch(e2);
  }
  users(e2) {
    return new rA(this._request, e2).fetch(e2);
  }
  delete(e2) {
    return new AV(this._request).fetch(e2);
  }
  update(e2) {
    return new OV(this._request).fetch(e2);
  }
};
var oh = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.success = i2.success;
  }
};
var sh = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.success = i2.success;
  }
};
var kh = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.exists = i2.exists, this.success = i2.success;
  }
};
var vh = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2;
    super(e2), this.acceptedAt = null !== (n2 = ip(i2.acceptedAt)) && void 0 !== n2 ? n2 : void 0, this.archivedAt = null !== (a2 = ip(i2.archivedAt)) && void 0 !== a2 ? a2 : void 0, this.createdAt = null !== (t2 = ip(i2.createdAt)) && void 0 !== t2 ? t2 : new Date(), this.email = i2.email, this.expiresAt = null !== (d2 = ip(i2.expiresAt)) && void 0 !== d2 ? d2 : void 0, this.external = i2.external, this.id = i2.id, this.metadata = null !== (l2 = i2.metadata) && void 0 !== l2 ? l2 : void 0, this.updatedAt = null !== (r2 = ip(i2.updatedAt)) && void 0 !== r2 ? r2 : new Date(), this.role = i2.role, this._invitee = null !== (m2 = i2.invitee) && void 0 !== m2 ? m2 : void 0, this._inviter = i2.inviter;
  }
  get invitee() {
    var e2, i2;
    return (null === (e2 = this._invitee) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._invitee) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get inviteeId() {
    var e2;
    return null === (e2 = this._invitee) || void 0 === e2 ? void 0 : e2.id;
  }
  get inviter() {
    return new oy(this._request).fetch(this._inviter.id);
  }
  get inviterId() {
    var e2;
    return null === (e2 = this._inviter) || void 0 === e2 ? void 0 : e2.id;
  }
  get organization() {
    return new AS(this._request).fetch();
  }
  create(e2) {
    return new IV(this._request).fetch(e2);
  }
  delete() {
    return new qV(this._request).fetch(this.id);
  }
  update(e2) {
    return new CV(this._request).fetch(this.id, e2);
  }
};
var ph = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new vh(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var Nh = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._organizationInvite = i2.organizationInvite;
  }
  get organizationInvite() {
    return new wS(this._request).fetch(this._organizationInvite.id);
  }
  get organizationInviteId() {
    var e2;
    return null === (e2 = this._organizationInvite) || void 0 === e2 ? void 0 : e2.id;
  }
};
var hh = class extends Yv {
  constructor(e2, i2) {
    var n2;
    super(e2), this.description = null !== (n2 = i2.description) && void 0 !== n2 ? n2 : void 0, this.enabled = i2.enabled, this.range = i2.range, this.type = i2.type;
  }
};
var bh = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success;
  }
  get organization() {
    return new AS(this._request).fetch();
  }
};
var Sh = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.success = i2.success;
  }
};
var yh = class extends Yv {
  constructor(e2, i2) {
    var n2, a2;
    super(e2), this.endCursor = null !== (n2 = i2.endCursor) && void 0 !== n2 ? n2 : void 0, this.hasNextPage = i2.hasNextPage, this.hasPreviousPage = i2.hasPreviousPage, this.startCursor = null !== (a2 = i2.startCursor) && void 0 !== a2 ? a2 : void 0;
  }
};
var gh = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2, u2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.cancelAt = null !== (a2 = ip(i2.cancelAt)) && void 0 !== a2 ? a2 : void 0, this.canceledAt = null !== (t2 = ip(i2.canceledAt)) && void 0 !== t2 ? t2 : void 0, this.collectionMethod = i2.collectionMethod, this.createdAt = null !== (d2 = ip(i2.createdAt)) && void 0 !== d2 ? d2 : new Date(), this.id = i2.id, this.nextBillingAt = null !== (l2 = ip(i2.nextBillingAt)) && void 0 !== l2 ? l2 : void 0, this.pendingChangeType = null !== (r2 = i2.pendingChangeType) && void 0 !== r2 ? r2 : void 0, this.seats = i2.seats, this.seatsMaximum = null !== (m2 = i2.seatsMaximum) && void 0 !== m2 ? m2 : void 0, this.seatsMinimum = null !== (o2 = i2.seatsMinimum) && void 0 !== o2 ? o2 : void 0, this.type = i2.type, this.updatedAt = null !== (s2 = ip(i2.updatedAt)) && void 0 !== s2 ? s2 : new Date(), this._creator = null !== (u2 = i2.creator) && void 0 !== u2 ? u2 : void 0;
  }
  get creator() {
    var e2, i2;
    return (null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._creator) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get creatorId() {
    var e2;
    return null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id;
  }
  get organization() {
    return new AS(this._request).fetch();
  }
};
var Vh = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2, u2, k2, v2, p2, c2, N2, h2, f2, b2, S2, y2, g2, D2, V2, _2, F2, A2, T2, w2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.autoArchivedAt = null !== (a2 = ip(i2.autoArchivedAt)) && void 0 !== a2 ? a2 : void 0, this.canceledAt = null !== (t2 = ip(i2.canceledAt)) && void 0 !== t2 ? t2 : void 0, this.color = i2.color, this.completedAt = null !== (d2 = ip(i2.completedAt)) && void 0 !== d2 ? d2 : void 0, this.completedIssueCountHistory = i2.completedIssueCountHistory, this.completedScopeHistory = i2.completedScopeHistory, this.content = null !== (l2 = i2.content) && void 0 !== l2 ? l2 : void 0, this.createdAt = null !== (r2 = ip(i2.createdAt)) && void 0 !== r2 ? r2 : new Date(), this.description = i2.description, this.healthUpdatedAt = null !== (m2 = ip(i2.healthUpdatedAt)) && void 0 !== m2 ? m2 : void 0, this.icon = null !== (o2 = i2.icon) && void 0 !== o2 ? o2 : void 0, this.id = i2.id, this.inProgressScopeHistory = i2.inProgressScopeHistory, this.issueCountHistory = i2.issueCountHistory, this.labelIds = i2.labelIds, this.name = i2.name, this.priority = i2.priority, this.priorityLabel = i2.priorityLabel, this.prioritySortOrder = i2.prioritySortOrder, this.progress = i2.progress, this.projectUpdateRemindersPausedUntilAt = null !== (s2 = ip(i2.projectUpdateRemindersPausedUntilAt)) && void 0 !== s2 ? s2 : void 0, this.scope = i2.scope, this.scopeHistory = i2.scopeHistory, this.slackIssueComments = i2.slackIssueComments, this.slackIssueStatuses = i2.slackIssueStatuses, this.slackNewIssue = i2.slackNewIssue, this.slugId = i2.slugId, this.sortOrder = i2.sortOrder, this.startDate = null !== (u2 = i2.startDate) && void 0 !== u2 ? u2 : void 0, this.startedAt = null !== (k2 = ip(i2.startedAt)) && void 0 !== k2 ? k2 : void 0, this.state = i2.state, this.targetDate = null !== (v2 = i2.targetDate) && void 0 !== v2 ? v2 : void 0, this.trashed = null !== (p2 = i2.trashed) && void 0 !== p2 ? p2 : void 0, this.updateReminderFrequency = null !== (c2 = i2.updateReminderFrequency) && void 0 !== c2 ? c2 : void 0, this.updateReminderFrequencyInWeeks = null !== (N2 = i2.updateReminderFrequencyInWeeks) && void 0 !== N2 ? N2 : void 0, this.updateRemindersHour = null !== (h2 = i2.updateRemindersHour) && void 0 !== h2 ? h2 : void 0, this.updatedAt = null !== (f2 = ip(i2.updatedAt)) && void 0 !== f2 ? f2 : new Date(), this.url = i2.url, this.documentContent = i2.documentContent ? new ac(e2, i2.documentContent) : void 0, this.frequencyResolution = i2.frequencyResolution, this.health = null !== (b2 = i2.health) && void 0 !== b2 ? b2 : void 0, this.startDateResolution = null !== (S2 = i2.startDateResolution) && void 0 !== S2 ? S2 : void 0, this.targetDateResolution = null !== (y2 = i2.targetDateResolution) && void 0 !== y2 ? y2 : void 0, this.updateRemindersDay = null !== (g2 = i2.updateRemindersDay) && void 0 !== g2 ? g2 : void 0, this._convertedFromIssue = null !== (D2 = i2.convertedFromIssue) && void 0 !== D2 ? D2 : void 0, this._creator = null !== (V2 = i2.creator) && void 0 !== V2 ? V2 : void 0, this._favorite = null !== (_2 = i2.favorite) && void 0 !== _2 ? _2 : void 0, this._integrationsSettings = null !== (F2 = i2.integrationsSettings) && void 0 !== F2 ? F2 : void 0, this._lastAppliedTemplate = null !== (A2 = i2.lastAppliedTemplate) && void 0 !== A2 ? A2 : void 0, this._lastUpdate = null !== (T2 = i2.lastUpdate) && void 0 !== T2 ? T2 : void 0, this._lead = null !== (w2 = i2.lead) && void 0 !== w2 ? w2 : void 0, this._status = i2.status;
  }
  get convertedFromIssue() {
    var e2, i2;
    return (null === (e2 = this._convertedFromIssue) || void 0 === e2 ? void 0 : e2.id) ? new mS(this._request).fetch(null === (i2 = this._convertedFromIssue) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get convertedFromIssueId() {
    var e2;
    return null === (e2 = this._convertedFromIssue) || void 0 === e2 ? void 0 : e2.id;
  }
  get creator() {
    var e2, i2;
    return (null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._creator) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get creatorId() {
    var e2;
    return null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id;
  }
  get favorite() {
    var e2, i2;
    return (null === (e2 = this._favorite) || void 0 === e2 ? void 0 : e2.id) ? new Gb(this._request).fetch(null === (i2 = this._favorite) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get favoriteId() {
    var e2;
    return null === (e2 = this._favorite) || void 0 === e2 ? void 0 : e2.id;
  }
  get integrationsSettings() {
    var e2, i2;
    return (null === (e2 = this._integrationsSettings) || void 0 === e2 ? void 0 : e2.id) ? new rS(this._request).fetch(null === (i2 = this._integrationsSettings) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get integrationsSettingsId() {
    var e2;
    return null === (e2 = this._integrationsSettings) || void 0 === e2 ? void 0 : e2.id;
  }
  get lastAppliedTemplate() {
    var e2, i2;
    return (null === (e2 = this._lastAppliedTemplate) || void 0 === e2 ? void 0 : e2.id) ? new ny(this._request).fetch(null === (i2 = this._lastAppliedTemplate) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get lastAppliedTemplateId() {
    var e2;
    return null === (e2 = this._lastAppliedTemplate) || void 0 === e2 ? void 0 : e2.id;
  }
  get lastUpdate() {
    var e2, i2;
    return (null === (e2 = this._lastUpdate) || void 0 === e2 ? void 0 : e2.id) ? new RS(this._request).fetch(null === (i2 = this._lastUpdate) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get lastUpdateId() {
    var e2;
    return null === (e2 = this._lastUpdate) || void 0 === e2 ? void 0 : e2.id;
  }
  get lead() {
    var e2, i2;
    return (null === (e2 = this._lead) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._lead) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get leadId() {
    var e2;
    return null === (e2 = this._lead) || void 0 === e2 ? void 0 : e2.id;
  }
  get status() {
    return new xS(this._request).fetch(this._status.id);
  }
  get statusId() {
    var e2;
    return null === (e2 = this._status) || void 0 === e2 ? void 0 : e2.id;
  }
  comments(e2) {
    return new mA(this._request, this.id, e2).fetch(e2);
  }
  documents(e2) {
    return new sA(this._request, this.id, e2).fetch(e2);
  }
  externalLinks(e2) {
    return new uA(this._request, this.id, e2).fetch(e2);
  }
  history(e2) {
    return new kA(this._request, this.id, e2).fetch(e2);
  }
  initiatives(e2) {
    return new vA(this._request, this.id, e2).fetch(e2);
  }
  inverseRelations(e2) {
    return new pA(this._request, this.id, e2).fetch(e2);
  }
  issues(e2) {
    return new cA(this._request, this.id, e2).fetch(e2);
  }
  members(e2) {
    return new NA(this._request, this.id, e2).fetch(e2);
  }
  needs(e2) {
    return new hA(this._request, this.id, e2).fetch(e2);
  }
  projectMilestones(e2) {
    return new fA(this._request, this.id, e2).fetch(e2);
  }
  projectUpdates(e2) {
    return new bA(this._request, this.id, e2).fetch(e2);
  }
  relations(e2) {
    return new SA(this._request, this.id, e2).fetch(e2);
  }
  teams(e2) {
    return new yA(this._request, this.id, e2).fetch(e2);
  }
  archive(e2) {
    return new UV(this._request).fetch(this.id, e2);
  }
  create(e2, i2) {
    return new xV(this._request).fetch(e2, i2);
  }
  delete() {
    return new BV(this._request).fetch(this.id);
  }
  unarchive() {
    return new $V(this._request).fetch(this.id);
  }
  update() {
    return new RS(this._request).fetch(this.id);
  }
};
var _h = class extends Yv {
  constructor(e2, i2) {
    var n2;
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._entity = null !== (n2 = i2.entity) && void 0 !== n2 ? n2 : void 0;
  }
  get entity() {
    var e2, i2;
    return (null === (e2 = this._entity) || void 0 === e2 ? void 0 : e2.id) ? new qS(this._request).fetch(null === (i2 = this._entity) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get entityId() {
    var e2;
    return null === (e2 = this._entity) || void 0 === e2 ? void 0 : e2.id;
  }
};
var Fh = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new Vh(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var Ah = class extends Yv {
  constructor(e2, i2) {
    var n2, a2;
    super(e2), this.filter = null !== (n2 = i2.filter) && void 0 !== n2 ? n2 : void 0, this.logId = null !== (a2 = i2.logId) && void 0 !== a2 ? a2 : void 0;
  }
};
var Th = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.entries = i2.entries, this.id = i2.id, this.updatedAt = null !== (t2 = ip(i2.updatedAt)) && void 0 !== t2 ? t2 : new Date(), this._project = i2.project;
  }
  get project() {
    return new qS(this._request).fetch(this._project.id);
  }
  get projectId() {
    var e2;
    return null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id;
  }
};
var wh = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new Th(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var Ih = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.description = null !== (t2 = i2.description) && void 0 !== t2 ? t2 : void 0, this.id = i2.id, this.name = i2.name, this.progress = i2.progress, this.sortOrder = i2.sortOrder, this.targetDate = null !== (d2 = i2.targetDate) && void 0 !== d2 ? d2 : void 0, this.updatedAt = null !== (l2 = ip(i2.updatedAt)) && void 0 !== l2 ? l2 : new Date(), this.documentContent = i2.documentContent ? new ac(e2, i2.documentContent) : void 0, this.status = i2.status, this._project = i2.project;
  }
  get project() {
    return new qS(this._request).fetch(this._project.id);
  }
  get projectId() {
    var e2;
    return null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id;
  }
  issues(e2) {
    return new DA(this._request, this.id, e2).fetch(e2);
  }
  create(e2) {
    return new RV(this._request).fetch(e2);
  }
  delete() {
    return new EV(this._request).fetch(this.id);
  }
  update(e2) {
    return new LV(this._request).fetch(this.id, e2);
  }
};
var qh = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new Ih(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var Oh = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._projectMilestone = i2.projectMilestone;
  }
  get projectMilestone() {
    return new PS(this._request).fetch(this._projectMilestone.id);
  }
  get projectMilestoneId() {
    var e2;
    return null === (e2 = this._projectMilestone) || void 0 === e2 ? void 0 : e2.id;
  }
};
var Uh = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2, u2, k2, v2, p2, c2, N2, h2, f2, b2, S2, y2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.commentId = null !== (a2 = i2.commentId) && void 0 !== a2 ? a2 : void 0, this.createdAt = null !== (t2 = ip(i2.createdAt)) && void 0 !== t2 ? t2 : new Date(), this.emailedAt = null !== (d2 = ip(i2.emailedAt)) && void 0 !== d2 ? d2 : void 0, this.id = i2.id, this.parentCommentId = null !== (l2 = i2.parentCommentId) && void 0 !== l2 ? l2 : void 0, this.projectId = i2.projectId, this.projectMilestoneId = null !== (r2 = i2.projectMilestoneId) && void 0 !== r2 ? r2 : void 0, this.projectUpdateId = null !== (m2 = i2.projectUpdateId) && void 0 !== m2 ? m2 : void 0, this.reactionEmoji = null !== (o2 = i2.reactionEmoji) && void 0 !== o2 ? o2 : void 0, this.readAt = null !== (s2 = ip(i2.readAt)) && void 0 !== s2 ? s2 : void 0, this.snoozedUntilAt = null !== (u2 = ip(i2.snoozedUntilAt)) && void 0 !== u2 ? u2 : void 0, this.type = i2.type, this.unsnoozedAt = null !== (k2 = ip(i2.unsnoozedAt)) && void 0 !== k2 ? k2 : void 0, this.updatedAt = null !== (v2 = ip(i2.updatedAt)) && void 0 !== v2 ? v2 : new Date(), this.botActor = i2.botActor ? new ap(e2, i2.botActor) : void 0, this._actor = null !== (p2 = i2.actor) && void 0 !== p2 ? p2 : void 0, this._comment = null !== (c2 = i2.comment) && void 0 !== c2 ? c2 : void 0, this._document = null !== (N2 = i2.document) && void 0 !== N2 ? N2 : void 0, this._externalUserActor = null !== (h2 = i2.externalUserActor) && void 0 !== h2 ? h2 : void 0, this._initiative = null !== (f2 = i2.initiative) && void 0 !== f2 ? f2 : void 0, this._initiativeUpdate = null !== (b2 = i2.initiativeUpdate) && void 0 !== b2 ? b2 : void 0, this._parentComment = null !== (S2 = i2.parentComment) && void 0 !== S2 ? S2 : void 0, this._project = i2.project, this._projectUpdate = null !== (y2 = i2.projectUpdate) && void 0 !== y2 ? y2 : void 0, this._user = i2.user;
  }
  get actor() {
    var e2, i2;
    return (null === (e2 = this._actor) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._actor) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get actorId() {
    var e2;
    return null === (e2 = this._actor) || void 0 === e2 ? void 0 : e2.id;
  }
  get comment() {
    var e2, i2;
    return (null === (e2 = this._comment) || void 0 === e2 ? void 0 : e2.id) ? new Db(this._request).fetch({ id: null === (i2 = this._comment) || void 0 === i2 ? void 0 : i2.id }) : void 0;
  }
  get document() {
    var e2, i2;
    return (null === (e2 = this._document) || void 0 === e2 ? void 0 : e2.id) ? new Bb(this._request).fetch(null === (i2 = this._document) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get documentId() {
    var e2;
    return null === (e2 = this._document) || void 0 === e2 ? void 0 : e2.id;
  }
  get externalUserActor() {
    var e2, i2;
    return (null === (e2 = this._externalUserActor) || void 0 === e2 ? void 0 : e2.id) ? new Hb(this._request).fetch(null === (i2 = this._externalUserActor) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get externalUserActorId() {
    var e2;
    return null === (e2 = this._externalUserActor) || void 0 === e2 ? void 0 : e2.id;
  }
  get initiative() {
    var e2, i2;
    return (null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id) ? new Jb(this._request).fetch(null === (i2 = this._initiative) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get initiativeId() {
    var e2;
    return null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id;
  }
  get initiativeUpdate() {
    var e2, i2;
    return (null === (e2 = this._initiativeUpdate) || void 0 === e2 ? void 0 : e2.id) ? new Xb(this._request).fetch(null === (i2 = this._initiativeUpdate) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get initiativeUpdateId() {
    var e2;
    return null === (e2 = this._initiativeUpdate) || void 0 === e2 ? void 0 : e2.id;
  }
  get parentComment() {
    var e2, i2;
    return (null === (e2 = this._parentComment) || void 0 === e2 ? void 0 : e2.id) ? new Db(this._request).fetch({ id: null === (i2 = this._parentComment) || void 0 === i2 ? void 0 : i2.id }) : void 0;
  }
  get project() {
    return new qS(this._request).fetch(this._project.id);
  }
  get projectUpdate() {
    var e2, i2;
    return (null === (e2 = this._projectUpdate) || void 0 === e2 ? void 0 : e2.id) ? new RS(this._request).fetch(null === (i2 = this._projectUpdate) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get user() {
    return new oy(this._request).fetch(this._user.id);
  }
  get userId() {
    var e2;
    return null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id;
  }
};
var xh = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2, u2, k2, v2;
    super(e2), this.active = i2.active, this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.id = i2.id, this.notificationSubscriptionTypes = i2.notificationSubscriptionTypes, this.updatedAt = null !== (t2 = ip(i2.updatedAt)) && void 0 !== t2 ? t2 : new Date(), this.contextViewType = null !== (d2 = i2.contextViewType) && void 0 !== d2 ? d2 : void 0, this.userContextViewType = null !== (l2 = i2.userContextViewType) && void 0 !== l2 ? l2 : void 0, this._customView = null !== (r2 = i2.customView) && void 0 !== r2 ? r2 : void 0, this._customer = null !== (m2 = i2.customer) && void 0 !== m2 ? m2 : void 0, this._cycle = null !== (o2 = i2.cycle) && void 0 !== o2 ? o2 : void 0, this._initiative = null !== (s2 = i2.initiative) && void 0 !== s2 ? s2 : void 0, this._label = null !== (u2 = i2.label) && void 0 !== u2 ? u2 : void 0, this._project = i2.project, this._subscriber = i2.subscriber, this._team = null !== (k2 = i2.team) && void 0 !== k2 ? k2 : void 0, this._user = null !== (v2 = i2.user) && void 0 !== v2 ? v2 : void 0;
  }
  get customView() {
    var e2, i2;
    return (null === (e2 = this._customView) || void 0 === e2 ? void 0 : e2.id) ? new _b(this._request).fetch(null === (i2 = this._customView) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get customViewId() {
    var e2;
    return null === (e2 = this._customView) || void 0 === e2 ? void 0 : e2.id;
  }
  get customer() {
    var e2, i2;
    return (null === (e2 = this._customer) || void 0 === e2 ? void 0 : e2.id) ? new Tb(this._request).fetch(null === (i2 = this._customer) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get customerId() {
    var e2;
    return null === (e2 = this._customer) || void 0 === e2 ? void 0 : e2.id;
  }
  get cycle() {
    var e2, i2;
    return (null === (e2 = this._cycle) || void 0 === e2 ? void 0 : e2.id) ? new Ub(this._request).fetch(null === (i2 = this._cycle) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get cycleId() {
    var e2;
    return null === (e2 = this._cycle) || void 0 === e2 ? void 0 : e2.id;
  }
  get initiative() {
    var e2, i2;
    return (null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id) ? new Jb(this._request).fetch(null === (i2 = this._initiative) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get initiativeId() {
    var e2;
    return null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id;
  }
  get label() {
    var e2, i2;
    return (null === (e2 = this._label) || void 0 === e2 ? void 0 : e2.id) ? new pS(this._request).fetch(null === (i2 = this._label) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get labelId() {
    var e2;
    return null === (e2 = this._label) || void 0 === e2 ? void 0 : e2.id;
  }
  get project() {
    return new qS(this._request).fetch(this._project.id);
  }
  get projectId() {
    var e2;
    return null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id;
  }
  get subscriber() {
    return new oy(this._request).fetch(this._subscriber.id);
  }
  get subscriberId() {
    var e2;
    return null === (e2 = this._subscriber) || void 0 === e2 ? void 0 : e2.id;
  }
  get team() {
    var e2, i2;
    return (null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id) ? new QS(this._request).fetch(null === (i2 = this._team) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get teamId() {
    var e2;
    return null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id;
  }
  get user() {
    var e2, i2;
    return (null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._user) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get userId() {
    var e2;
    return null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id;
  }
};
var Bh = class extends Yv {
  constructor(e2, i2) {
    var n2;
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._project = null !== (n2 = i2.project) && void 0 !== n2 ? n2 : void 0;
  }
  get project() {
    var e2, i2;
    return (null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id) ? new qS(this._request).fetch(null === (i2 = this._project) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get projectId() {
    var e2;
    return null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id;
  }
};
var Rh = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2;
    super(e2), this.anchorType = i2.anchorType, this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.id = i2.id, this.relatedAnchorType = i2.relatedAnchorType, this.type = i2.type, this.updatedAt = null !== (t2 = ip(i2.updatedAt)) && void 0 !== t2 ? t2 : new Date(), this._project = i2.project, this._projectMilestone = null !== (d2 = i2.projectMilestone) && void 0 !== d2 ? d2 : void 0, this._relatedProject = i2.relatedProject, this._relatedProjectMilestone = null !== (l2 = i2.relatedProjectMilestone) && void 0 !== l2 ? l2 : void 0, this._user = null !== (r2 = i2.user) && void 0 !== r2 ? r2 : void 0;
  }
  get project() {
    return new qS(this._request).fetch(this._project.id);
  }
  get projectId() {
    var e2;
    return null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id;
  }
  get projectMilestone() {
    var e2, i2;
    return (null === (e2 = this._projectMilestone) || void 0 === e2 ? void 0 : e2.id) ? new PS(this._request).fetch(null === (i2 = this._projectMilestone) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get projectMilestoneId() {
    var e2;
    return null === (e2 = this._projectMilestone) || void 0 === e2 ? void 0 : e2.id;
  }
  get relatedProject() {
    return new qS(this._request).fetch(this._relatedProject.id);
  }
  get relatedProjectId() {
    var e2;
    return null === (e2 = this._relatedProject) || void 0 === e2 ? void 0 : e2.id;
  }
  get relatedProjectMilestone() {
    var e2, i2;
    return (null === (e2 = this._relatedProjectMilestone) || void 0 === e2 ? void 0 : e2.id) ? new PS(this._request).fetch(null === (i2 = this._relatedProjectMilestone) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get relatedProjectMilestoneId() {
    var e2;
    return null === (e2 = this._relatedProjectMilestone) || void 0 === e2 ? void 0 : e2.id;
  }
  get user() {
    var e2, i2;
    return (null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._user) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get userId() {
    var e2;
    return null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id;
  }
  create(e2) {
    return new zV(this._request).fetch(e2);
  }
  delete() {
    return new MV(this._request).fetch(this.id);
  }
  update(e2) {
    return new HV(this._request).fetch(this.id, e2);
  }
};
var Eh = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new Rh(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var Lh = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._projectRelation = i2.projectRelation;
  }
  get projectRelation() {
    return new OS(this._request).fetch(this._projectRelation.id);
  }
  get projectRelationId() {
    var e2;
    return null === (e2 = this._projectRelation) || void 0 === e2 ? void 0 : e2.id;
  }
};
var zh = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.totalCount = i2.totalCount, this.archivePayload = new op(e2, i2.archivePayload), this.pageInfo = new yh(e2, i2.pageInfo), this.nodes = i2.nodes.map((i3) => new Mh(e2, i3));
  }
};
var Mh = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2, u2, k2, v2, p2, c2, N2, h2, f2, b2, S2, y2, g2, D2, V2, _2, F2, A2, T2, w2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.autoArchivedAt = null !== (a2 = ip(i2.autoArchivedAt)) && void 0 !== a2 ? a2 : void 0, this.canceledAt = null !== (t2 = ip(i2.canceledAt)) && void 0 !== t2 ? t2 : void 0, this.color = i2.color, this.completedAt = null !== (d2 = ip(i2.completedAt)) && void 0 !== d2 ? d2 : void 0, this.completedIssueCountHistory = i2.completedIssueCountHistory, this.completedScopeHistory = i2.completedScopeHistory, this.content = null !== (l2 = i2.content) && void 0 !== l2 ? l2 : void 0, this.createdAt = null !== (r2 = ip(i2.createdAt)) && void 0 !== r2 ? r2 : new Date(), this.description = i2.description, this.healthUpdatedAt = null !== (m2 = ip(i2.healthUpdatedAt)) && void 0 !== m2 ? m2 : void 0, this.icon = null !== (o2 = i2.icon) && void 0 !== o2 ? o2 : void 0, this.id = i2.id, this.inProgressScopeHistory = i2.inProgressScopeHistory, this.issueCountHistory = i2.issueCountHistory, this.labelIds = i2.labelIds, this.metadata = i2.metadata, this.name = i2.name, this.priority = i2.priority, this.priorityLabel = i2.priorityLabel, this.prioritySortOrder = i2.prioritySortOrder, this.progress = i2.progress, this.projectUpdateRemindersPausedUntilAt = null !== (s2 = ip(i2.projectUpdateRemindersPausedUntilAt)) && void 0 !== s2 ? s2 : void 0, this.scope = i2.scope, this.scopeHistory = i2.scopeHistory, this.slackIssueComments = i2.slackIssueComments, this.slackIssueStatuses = i2.slackIssueStatuses, this.slackNewIssue = i2.slackNewIssue, this.slugId = i2.slugId, this.sortOrder = i2.sortOrder, this.startDate = null !== (u2 = i2.startDate) && void 0 !== u2 ? u2 : void 0, this.startedAt = null !== (k2 = ip(i2.startedAt)) && void 0 !== k2 ? k2 : void 0, this.state = i2.state, this.targetDate = null !== (v2 = i2.targetDate) && void 0 !== v2 ? v2 : void 0, this.trashed = null !== (p2 = i2.trashed) && void 0 !== p2 ? p2 : void 0, this.updateReminderFrequency = null !== (c2 = i2.updateReminderFrequency) && void 0 !== c2 ? c2 : void 0, this.updateReminderFrequencyInWeeks = null !== (N2 = i2.updateReminderFrequencyInWeeks) && void 0 !== N2 ? N2 : void 0, this.updateRemindersHour = null !== (h2 = i2.updateRemindersHour) && void 0 !== h2 ? h2 : void 0, this.updatedAt = null !== (f2 = ip(i2.updatedAt)) && void 0 !== f2 ? f2 : new Date(), this.url = i2.url, this.documentContent = i2.documentContent ? new ac(e2, i2.documentContent) : void 0, this.frequencyResolution = i2.frequencyResolution, this.health = null !== (b2 = i2.health) && void 0 !== b2 ? b2 : void 0, this.startDateResolution = null !== (S2 = i2.startDateResolution) && void 0 !== S2 ? S2 : void 0, this.targetDateResolution = null !== (y2 = i2.targetDateResolution) && void 0 !== y2 ? y2 : void 0, this.updateRemindersDay = null !== (g2 = i2.updateRemindersDay) && void 0 !== g2 ? g2 : void 0, this._convertedFromIssue = null !== (D2 = i2.convertedFromIssue) && void 0 !== D2 ? D2 : void 0, this._creator = null !== (V2 = i2.creator) && void 0 !== V2 ? V2 : void 0, this._favorite = null !== (_2 = i2.favorite) && void 0 !== _2 ? _2 : void 0, this._integrationsSettings = null !== (F2 = i2.integrationsSettings) && void 0 !== F2 ? F2 : void 0, this._lastAppliedTemplate = null !== (A2 = i2.lastAppliedTemplate) && void 0 !== A2 ? A2 : void 0, this._lastUpdate = null !== (T2 = i2.lastUpdate) && void 0 !== T2 ? T2 : void 0, this._lead = null !== (w2 = i2.lead) && void 0 !== w2 ? w2 : void 0, this._status = i2.status;
  }
  get convertedFromIssue() {
    var e2, i2;
    return (null === (e2 = this._convertedFromIssue) || void 0 === e2 ? void 0 : e2.id) ? new mS(this._request).fetch(null === (i2 = this._convertedFromIssue) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get convertedFromIssueId() {
    var e2;
    return null === (e2 = this._convertedFromIssue) || void 0 === e2 ? void 0 : e2.id;
  }
  get creator() {
    var e2, i2;
    return (null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._creator) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get creatorId() {
    var e2;
    return null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id;
  }
  get favorite() {
    var e2, i2;
    return (null === (e2 = this._favorite) || void 0 === e2 ? void 0 : e2.id) ? new Gb(this._request).fetch(null === (i2 = this._favorite) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get favoriteId() {
    var e2;
    return null === (e2 = this._favorite) || void 0 === e2 ? void 0 : e2.id;
  }
  get integrationsSettings() {
    var e2, i2;
    return (null === (e2 = this._integrationsSettings) || void 0 === e2 ? void 0 : e2.id) ? new rS(this._request).fetch(null === (i2 = this._integrationsSettings) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get integrationsSettingsId() {
    var e2;
    return null === (e2 = this._integrationsSettings) || void 0 === e2 ? void 0 : e2.id;
  }
  get lastAppliedTemplate() {
    var e2, i2;
    return (null === (e2 = this._lastAppliedTemplate) || void 0 === e2 ? void 0 : e2.id) ? new ny(this._request).fetch(null === (i2 = this._lastAppliedTemplate) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get lastAppliedTemplateId() {
    var e2;
    return null === (e2 = this._lastAppliedTemplate) || void 0 === e2 ? void 0 : e2.id;
  }
  get lastUpdate() {
    var e2, i2;
    return (null === (e2 = this._lastUpdate) || void 0 === e2 ? void 0 : e2.id) ? new RS(this._request).fetch(null === (i2 = this._lastUpdate) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get lastUpdateId() {
    var e2;
    return null === (e2 = this._lastUpdate) || void 0 === e2 ? void 0 : e2.id;
  }
  get lead() {
    var e2, i2;
    return (null === (e2 = this._lead) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._lead) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get leadId() {
    var e2;
    return null === (e2 = this._lead) || void 0 === e2 ? void 0 : e2.id;
  }
  get status() {
    return new xS(this._request).fetch(this._status.id);
  }
  get statusId() {
    var e2;
    return null === (e2 = this._status) || void 0 === e2 ? void 0 : e2.id;
  }
};
var Hh = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.color = i2.color, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.description = null !== (t2 = i2.description) && void 0 !== t2 ? t2 : void 0, this.id = i2.id, this.indefinite = i2.indefinite, this.name = i2.name, this.position = i2.position, this.updatedAt = null !== (d2 = ip(i2.updatedAt)) && void 0 !== d2 ? d2 : new Date(), this.type = i2.type;
  }
  archive() {
    return new WV(this._request).fetch(this.id);
  }
  create(e2) {
    return new GV(this._request).fetch(e2);
  }
  unarchive() {
    return new KV(this._request).fetch(this.id);
  }
  update(e2) {
    return new JV(this._request).fetch(this.id, e2);
  }
};
var Wh = class extends Yv {
  constructor(e2, i2) {
    var n2;
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._entity = null !== (n2 = i2.entity) && void 0 !== n2 ? n2 : void 0;
  }
  get entity() {
    var e2, i2;
    return (null === (e2 = this._entity) || void 0 === e2 ? void 0 : e2.id) ? new xS(this._request).fetch(null === (i2 = this._entity) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get entityId() {
    var e2;
    return null === (e2 = this._entity) || void 0 === e2 ? void 0 : e2.id;
  }
};
var Gh = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new Hh(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var Jh = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._status = i2.status;
  }
  get status() {
    return new xS(this._request).fetch(this._status.id);
  }
  get statusId() {
    var e2;
    return null === (e2 = this._status) || void 0 === e2 ? void 0 : e2.id;
  }
};
var $h = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.body = i2.body, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.diff = null !== (t2 = i2.diff) && void 0 !== t2 ? t2 : void 0, this.diffMarkdown = null !== (d2 = i2.diffMarkdown) && void 0 !== d2 ? d2 : void 0, this.editedAt = null !== (l2 = ip(i2.editedAt)) && void 0 !== l2 ? l2 : void 0, this.id = i2.id, this.isDiffHidden = i2.isDiffHidden, this.isStale = i2.isStale, this.reactionData = i2.reactionData, this.slugId = i2.slugId, this.updatedAt = null !== (r2 = ip(i2.updatedAt)) && void 0 !== r2 ? r2 : new Date(), this.url = i2.url, this.reactions = i2.reactions.map((i3) => new lf(e2, i3)), this.health = i2.health, this._project = i2.project, this._user = i2.user;
  }
  get project() {
    return new qS(this._request).fetch(this._project.id);
  }
  get projectId() {
    var e2;
    return null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id;
  }
  get user() {
    return new oy(this._request).fetch(this._user.id);
  }
  get userId() {
    var e2;
    return null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id;
  }
  comments(e2) {
    return new VA(this._request, this.id, e2).fetch(e2);
  }
  archive() {
    return new YV(this._request).fetch(this.id);
  }
  create(e2) {
    return new QV(this._request).fetch(e2);
  }
  delete() {
    return new XV(this._request).fetch(this.id);
  }
  unarchive() {
    return new e_(this._request).fetch(this.id);
  }
  update(e2) {
    return new i_(this._request).fetch(this.id, e2);
  }
};
var Zh = class extends Yv {
  constructor(e2, i2) {
    var n2;
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._entity = null !== (n2 = i2.entity) && void 0 !== n2 ? n2 : void 0;
  }
  get entity() {
    var e2, i2;
    return (null === (e2 = this._entity) || void 0 === e2 ? void 0 : e2.id) ? new RS(this._request).fetch(null === (i2 = this._entity) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get entityId() {
    var e2;
    return null === (e2 = this._entity) || void 0 === e2 ? void 0 : e2.id;
  }
};
var Yh = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new $h(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var Qh = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._projectUpdate = i2.projectUpdate;
  }
  get projectUpdate() {
    return new RS(this._request).fetch(this._projectUpdate.id);
  }
  get projectUpdateId() {
    var e2;
    return null === (e2 = this._projectUpdate) || void 0 === e2 ? void 0 : e2.id;
  }
};
var Xh = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success;
  }
};
var ef = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.id = i2.id, this.updatedAt = null !== (t2 = ip(i2.updatedAt)) && void 0 !== t2 ? t2 : new Date();
  }
  create(e2) {
    return new n_(this._request).fetch(e2);
  }
  delete() {
    return new a_(this._request).fetch(this.id);
  }
};
var nf = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.entity = new ef(e2, i2.entity);
  }
};
var af = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.success = i2.success;
  }
};
var tf = class extends Yv {
  constructor(e2, i2) {
    var n2;
    super(e2), this.identifier = null !== (n2 = i2.identifier) && void 0 !== n2 ? n2 : void 0, this.kind = i2.kind, this.limits = i2.limits.map((i3) => new df(e2, i3));
  }
};
var df = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.allowedAmount = i2.allowedAmount, this.period = i2.period, this.remainingAmount = i2.remainingAmount, this.requestedAmount = i2.requestedAmount, this.reset = i2.reset, this.type = i2.type;
  }
};
var lf = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.emoji = i2.emoji, this.id = i2.id, this.updatedAt = null !== (t2 = ip(i2.updatedAt)) && void 0 !== t2 ? t2 : new Date(), this._comment = null !== (d2 = i2.comment) && void 0 !== d2 ? d2 : void 0, this._externalUser = null !== (l2 = i2.externalUser) && void 0 !== l2 ? l2 : void 0, this._initiativeUpdate = null !== (r2 = i2.initiativeUpdate) && void 0 !== r2 ? r2 : void 0, this._issue = null !== (m2 = i2.issue) && void 0 !== m2 ? m2 : void 0, this._projectUpdate = null !== (o2 = i2.projectUpdate) && void 0 !== o2 ? o2 : void 0, this._user = null !== (s2 = i2.user) && void 0 !== s2 ? s2 : void 0;
  }
  get comment() {
    var e2, i2;
    return (null === (e2 = this._comment) || void 0 === e2 ? void 0 : e2.id) ? new Db(this._request).fetch({ id: null === (i2 = this._comment) || void 0 === i2 ? void 0 : i2.id }) : void 0;
  }
  get commentId() {
    var e2;
    return null === (e2 = this._comment) || void 0 === e2 ? void 0 : e2.id;
  }
  get externalUser() {
    var e2, i2;
    return (null === (e2 = this._externalUser) || void 0 === e2 ? void 0 : e2.id) ? new Hb(this._request).fetch(null === (i2 = this._externalUser) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get externalUserId() {
    var e2;
    return null === (e2 = this._externalUser) || void 0 === e2 ? void 0 : e2.id;
  }
  get initiativeUpdate() {
    var e2, i2;
    return (null === (e2 = this._initiativeUpdate) || void 0 === e2 ? void 0 : e2.id) ? new Xb(this._request).fetch(null === (i2 = this._initiativeUpdate) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get initiativeUpdateId() {
    var e2;
    return null === (e2 = this._initiativeUpdate) || void 0 === e2 ? void 0 : e2.id;
  }
  get issue() {
    var e2, i2;
    return (null === (e2 = this._issue) || void 0 === e2 ? void 0 : e2.id) ? new mS(this._request).fetch(null === (i2 = this._issue) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get issueId() {
    var e2;
    return null === (e2 = this._issue) || void 0 === e2 ? void 0 : e2.id;
  }
  get projectUpdate() {
    var e2, i2;
    return (null === (e2 = this._projectUpdate) || void 0 === e2 ? void 0 : e2.id) ? new RS(this._request).fetch(null === (i2 = this._projectUpdate) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get projectUpdateId() {
    var e2;
    return null === (e2 = this._projectUpdate) || void 0 === e2 ? void 0 : e2.id;
  }
  get user() {
    var e2, i2;
    return (null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._user) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get userId() {
    var e2;
    return null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id;
  }
  create(e2) {
    return new t_(this._request).fetch(e2);
  }
  delete() {
    return new d_(this._request).fetch(this.id);
  }
};
var rf = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.reaction = new lf(e2, i2.reaction);
  }
};
var mf = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.color = null !== (a2 = i2.color) && void 0 !== a2 ? a2 : void 0, this.createdAt = null !== (t2 = ip(i2.createdAt)) && void 0 !== t2 ? t2 : new Date(), this.description = null !== (d2 = i2.description) && void 0 !== d2 ? d2 : void 0, this.id = i2.id, this.name = i2.name, this.slugId = i2.slugId, this.sortOrder = i2.sortOrder, this.updatedAt = null !== (l2 = ip(i2.updatedAt)) && void 0 !== l2 ? l2 : new Date(), this.url = i2.url, this._creator = i2.creator, this._owner = null !== (r2 = i2.owner) && void 0 !== r2 ? r2 : void 0;
  }
  get creator() {
    return new oy(this._request).fetch(this._creator.id);
  }
  get creatorId() {
    var e2;
    return null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id;
  }
  get organization() {
    return new AS(this._request).fetch();
  }
  get owner() {
    var e2, i2;
    return (null === (e2 = this._owner) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._owner) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get ownerId() {
    var e2;
    return null === (e2 = this._owner) || void 0 === e2 ? void 0 : e2.id;
  }
  projects(e2) {
    return new _A(this._request, this.id, e2).fetch(e2);
  }
  archive() {
    return new o_(this._request).fetch(this.id);
  }
  create(e2) {
    return new s_(this._request).fetch(e2);
  }
  delete() {
    return new u_(this._request).fetch(this.id);
  }
  unarchive() {
    return new c_(this._request).fetch(this.id);
  }
  update(e2) {
    return new N_(this._request).fetch(this.id, e2);
  }
};
var of = class extends Yv {
  constructor(e2, i2) {
    var n2;
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._entity = null !== (n2 = i2.entity) && void 0 !== n2 ? n2 : void 0;
  }
  get entity() {
    var e2, i2;
    return (null === (e2 = this._entity) || void 0 === e2 ? void 0 : e2.id) ? new HS(this._request).fetch(null === (i2 = this._entity) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get entityId() {
    var e2;
    return null === (e2 = this._entity) || void 0 === e2 ? void 0 : e2.id;
  }
};
var sf = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new mf(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var uf = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._roadmap = i2.roadmap;
  }
  get roadmap() {
    return new HS(this._request).fetch(this._roadmap.id);
  }
  get roadmapId() {
    var e2;
    return null === (e2 = this._roadmap) || void 0 === e2 ? void 0 : e2.id;
  }
};
var kf = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.id = i2.id, this.sortOrder = i2.sortOrder, this.updatedAt = null !== (t2 = ip(i2.updatedAt)) && void 0 !== t2 ? t2 : new Date(), this._project = i2.project, this._roadmap = i2.roadmap;
  }
  get project() {
    return new qS(this._request).fetch(this._project.id);
  }
  get projectId() {
    var e2;
    return null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id;
  }
  get roadmap() {
    return new HS(this._request).fetch(this._roadmap.id);
  }
  get roadmapId() {
    var e2;
    return null === (e2 = this._roadmap) || void 0 === e2 ? void 0 : e2.id;
  }
  create(e2) {
    return new k_(this._request).fetch(e2);
  }
  delete() {
    return new v_(this._request).fetch(this.id);
  }
  update(e2) {
    return new p_(this._request).fetch(this.id, e2);
  }
};
var vf = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new kf(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var pf = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._roadmapToProject = i2.roadmapToProject;
  }
  get roadmapToProject() {
    return new WS(this._request).fetch(this._roadmapToProject.id);
  }
  get roadmapToProjectId() {
    var e2;
    return null === (e2 = this._roadmapToProject) || void 0 === e2 ? void 0 : e2.id;
  }
};
var cf = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.hasDefaultAsk = i2.hasDefaultAsk, this.id = i2.id;
  }
};
var Nf = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2;
    super(e2), this.addBot = i2.addBot, this.lastSyncId = i2.lastSyncId, this.nudgeToConnectMainSlackIntegration = null !== (n2 = i2.nudgeToConnectMainSlackIntegration) && void 0 !== n2 ? n2 : void 0, this.nudgeToUpdateMainSlackIntegration = null !== (a2 = i2.nudgeToUpdateMainSlackIntegration) && void 0 !== a2 ? a2 : void 0, this.success = i2.success, this._integration = null !== (t2 = i2.integration) && void 0 !== t2 ? t2 : void 0;
  }
  get integration() {
    var e2, i2;
    return (null === (e2 = this._integration) || void 0 === e2 ? void 0 : e2.id) ? new nS(this._request).fetch(null === (i2 = this._integration) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get integrationId() {
    var e2;
    return null === (e2 = this._integration) || void 0 === e2 ? void 0 : e2.id;
  }
};
var hf = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2, u2, k2;
    super(e2), this.aiTitles = null !== (n2 = i2.aiTitles) && void 0 !== n2 ? n2 : void 0, this.autoCreateOnBotMention = null !== (a2 = i2.autoCreateOnBotMention) && void 0 !== a2 ? a2 : void 0, this.autoCreateOnEmoji = null !== (t2 = i2.autoCreateOnEmoji) && void 0 !== t2 ? t2 : void 0, this.autoCreateOnMessage = null !== (d2 = i2.autoCreateOnMessage) && void 0 !== d2 ? d2 : void 0, this.autoCreateTemplateId = null !== (l2 = i2.autoCreateTemplateId) && void 0 !== l2 ? l2 : void 0, this.botAdded = null !== (r2 = i2.botAdded) && void 0 !== r2 ? r2 : void 0, this.id = i2.id, this.isPrivate = null !== (m2 = i2.isPrivate) && void 0 !== m2 ? m2 : void 0, this.isShared = null !== (o2 = i2.isShared) && void 0 !== o2 ? o2 : void 0, this.name = i2.name, this.postAcceptedFromTriageUpdates = null !== (s2 = i2.postAcceptedFromTriageUpdates) && void 0 !== s2 ? s2 : void 0, this.postCancellationUpdates = null !== (u2 = i2.postCancellationUpdates) && void 0 !== u2 ? u2 : void 0, this.postCompletionUpdates = null !== (k2 = i2.postCompletionUpdates) && void 0 !== k2 ? k2 : void 0, this.teams = i2.teams.map((i3) => new cf(e2, i3));
  }
};
var ff = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.samlSsoUrl = i2.samlSsoUrl, this.success = i2.success;
  }
};
var bf = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success;
  }
};
var yf = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2;
    super(e2), this.displayName = null !== (n2 = i2.displayName) && void 0 !== n2 ? n2 : void 0, this.id = null !== (a2 = i2.id) && void 0 !== a2 ? a2 : void 0, this.isConnected = i2.isConnected, this.isPersonalIntegrationConnected = i2.isPersonalIntegrationConnected, this.isPersonalIntegrationRequired = i2.isPersonalIntegrationRequired, this.name = null !== (t2 = i2.name) && void 0 !== t2 ? t2 : void 0, this.subType = null !== (d2 = i2.subType) && void 0 !== d2 ? d2 : void 0, this.type = i2.type, this.url = null !== (l2 = i2.url) && void 0 !== l2 ? l2 : void 0;
  }
};
var gf = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2, u2, k2, v2, p2, c2, N2, h2, f2, b2, S2, y2, g2, D2, V2, _2, F2, A2, T2;
    super(e2), this.aiThreadSummariesEnabled = i2.aiThreadSummariesEnabled, this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.autoArchivePeriod = i2.autoArchivePeriod, this.autoCloseChildIssues = null !== (a2 = i2.autoCloseChildIssues) && void 0 !== a2 ? a2 : void 0, this.autoCloseParentIssues = null !== (t2 = i2.autoCloseParentIssues) && void 0 !== t2 ? t2 : void 0, this.autoClosePeriod = null !== (d2 = i2.autoClosePeriod) && void 0 !== d2 ? d2 : void 0, this.autoCloseStateId = null !== (l2 = i2.autoCloseStateId) && void 0 !== l2 ? l2 : void 0, this.color = null !== (r2 = i2.color) && void 0 !== r2 ? r2 : void 0, this.createdAt = null !== (m2 = ip(i2.createdAt)) && void 0 !== m2 ? m2 : new Date(), this.cycleCalenderUrl = i2.cycleCalenderUrl, this.cycleCooldownTime = i2.cycleCooldownTime, this.cycleDuration = i2.cycleDuration, this.cycleIssueAutoAssignCompleted = i2.cycleIssueAutoAssignCompleted, this.cycleIssueAutoAssignStarted = i2.cycleIssueAutoAssignStarted, this.cycleLockToActive = i2.cycleLockToActive, this.cycleStartDay = i2.cycleStartDay, this.cyclesEnabled = i2.cyclesEnabled, this.defaultIssueEstimate = i2.defaultIssueEstimate, this.defaultTemplateForMembersId = null !== (o2 = i2.defaultTemplateForMembersId) && void 0 !== o2 ? o2 : void 0, this.defaultTemplateForNonMembersId = null !== (s2 = i2.defaultTemplateForNonMembersId) && void 0 !== s2 ? s2 : void 0, this.description = null !== (u2 = i2.description) && void 0 !== u2 ? u2 : void 0, this.displayName = i2.displayName, this.groupIssueHistory = i2.groupIssueHistory, this.icon = null !== (k2 = i2.icon) && void 0 !== k2 ? k2 : void 0, this.id = i2.id, this.inheritIssueEstimation = i2.inheritIssueEstimation, this.inheritWorkflowStatuses = i2.inheritWorkflowStatuses, this.inviteHash = i2.inviteHash, this.issueCount = i2.issueCount, this.issueEstimationAllowZero = i2.issueEstimationAllowZero, this.issueEstimationExtended = i2.issueEstimationExtended, this.issueEstimationType = i2.issueEstimationType, this.issueOrderingNoPriorityFirst = i2.issueOrderingNoPriorityFirst, this.issueSortOrderDefaultToBottom = i2.issueSortOrderDefaultToBottom, this.key = i2.key, this.name = i2.name, this.private = i2.private, this.requirePriorityToLeaveTriage = i2.requirePriorityToLeaveTriage, this.scimGroupName = null !== (v2 = i2.scimGroupName) && void 0 !== v2 ? v2 : void 0, this.scimManaged = i2.scimManaged, this.setIssueSortOrderOnStateChange = i2.setIssueSortOrderOnStateChange, this.slackIssueComments = i2.slackIssueComments, this.slackIssueStatuses = i2.slackIssueStatuses, this.slackNewIssue = i2.slackNewIssue, this.timezone = i2.timezone, this.triageEnabled = i2.triageEnabled, this.upcomingCycleCount = i2.upcomingCycleCount, this.updatedAt = null !== (p2 = ip(i2.updatedAt)) && void 0 !== p2 ? p2 : new Date(), this._activeCycle = null !== (c2 = i2.activeCycle) && void 0 !== c2 ? c2 : void 0, this._defaultIssueState = null !== (N2 = i2.defaultIssueState) && void 0 !== N2 ? N2 : void 0, this._defaultProjectTemplate = null !== (h2 = i2.defaultProjectTemplate) && void 0 !== h2 ? h2 : void 0, this._defaultTemplateForMembers = null !== (f2 = i2.defaultTemplateForMembers) && void 0 !== f2 ? f2 : void 0, this._defaultTemplateForNonMembers = null !== (b2 = i2.defaultTemplateForNonMembers) && void 0 !== b2 ? b2 : void 0, this._draftWorkflowState = null !== (S2 = i2.draftWorkflowState) && void 0 !== S2 ? S2 : void 0, this._integrationsSettings = null !== (y2 = i2.integrationsSettings) && void 0 !== y2 ? y2 : void 0, this._markedAsDuplicateWorkflowState = null !== (g2 = i2.markedAsDuplicateWorkflowState) && void 0 !== g2 ? g2 : void 0, this._mergeWorkflowState = null !== (D2 = i2.mergeWorkflowState) && void 0 !== D2 ? D2 : void 0, this._mergeableWorkflowState = null !== (V2 = i2.mergeableWorkflowState) && void 0 !== V2 ? V2 : void 0, this._reviewWorkflowState = null !== (_2 = i2.reviewWorkflowState) && void 0 !== _2 ? _2 : void 0, this._startWorkflowState = null !== (F2 = i2.startWorkflowState) && void 0 !== F2 ? F2 : void 0, this._triageIssueState = null !== (A2 = i2.triageIssueState) && void 0 !== A2 ? A2 : void 0, this._triageResponsibility = null !== (T2 = i2.triageResponsibility) && void 0 !== T2 ? T2 : void 0;
  }
  get activeCycle() {
    var e2, i2;
    return (null === (e2 = this._activeCycle) || void 0 === e2 ? void 0 : e2.id) ? new Ub(this._request).fetch(null === (i2 = this._activeCycle) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get activeCycleId() {
    var e2;
    return null === (e2 = this._activeCycle) || void 0 === e2 ? void 0 : e2.id;
  }
  get defaultIssueState() {
    var e2, i2;
    return (null === (e2 = this._defaultIssueState) || void 0 === e2 ? void 0 : e2.id) ? new Ny(this._request).fetch(null === (i2 = this._defaultIssueState) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get defaultIssueStateId() {
    var e2;
    return null === (e2 = this._defaultIssueState) || void 0 === e2 ? void 0 : e2.id;
  }
  get defaultProjectTemplate() {
    var e2, i2;
    return (null === (e2 = this._defaultProjectTemplate) || void 0 === e2 ? void 0 : e2.id) ? new ny(this._request).fetch(null === (i2 = this._defaultProjectTemplate) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get defaultProjectTemplateId() {
    var e2;
    return null === (e2 = this._defaultProjectTemplate) || void 0 === e2 ? void 0 : e2.id;
  }
  get defaultTemplateForMembers() {
    var e2, i2;
    return (null === (e2 = this._defaultTemplateForMembers) || void 0 === e2 ? void 0 : e2.id) ? new ny(this._request).fetch(null === (i2 = this._defaultTemplateForMembers) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get defaultTemplateForNonMembers() {
    var e2, i2;
    return (null === (e2 = this._defaultTemplateForNonMembers) || void 0 === e2 ? void 0 : e2.id) ? new ny(this._request).fetch(null === (i2 = this._defaultTemplateForNonMembers) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get draftWorkflowState() {
    var e2, i2;
    return (null === (e2 = this._draftWorkflowState) || void 0 === e2 ? void 0 : e2.id) ? new Ny(this._request).fetch(null === (i2 = this._draftWorkflowState) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get draftWorkflowStateId() {
    var e2;
    return null === (e2 = this._draftWorkflowState) || void 0 === e2 ? void 0 : e2.id;
  }
  get integrationsSettings() {
    var e2, i2;
    return (null === (e2 = this._integrationsSettings) || void 0 === e2 ? void 0 : e2.id) ? new rS(this._request).fetch(null === (i2 = this._integrationsSettings) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get integrationsSettingsId() {
    var e2;
    return null === (e2 = this._integrationsSettings) || void 0 === e2 ? void 0 : e2.id;
  }
  get markedAsDuplicateWorkflowState() {
    var e2, i2;
    return (null === (e2 = this._markedAsDuplicateWorkflowState) || void 0 === e2 ? void 0 : e2.id) ? new Ny(this._request).fetch(null === (i2 = this._markedAsDuplicateWorkflowState) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get markedAsDuplicateWorkflowStateId() {
    var e2;
    return null === (e2 = this._markedAsDuplicateWorkflowState) || void 0 === e2 ? void 0 : e2.id;
  }
  get mergeWorkflowState() {
    var e2, i2;
    return (null === (e2 = this._mergeWorkflowState) || void 0 === e2 ? void 0 : e2.id) ? new Ny(this._request).fetch(null === (i2 = this._mergeWorkflowState) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get mergeWorkflowStateId() {
    var e2;
    return null === (e2 = this._mergeWorkflowState) || void 0 === e2 ? void 0 : e2.id;
  }
  get mergeableWorkflowState() {
    var e2, i2;
    return (null === (e2 = this._mergeableWorkflowState) || void 0 === e2 ? void 0 : e2.id) ? new Ny(this._request).fetch(null === (i2 = this._mergeableWorkflowState) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get mergeableWorkflowStateId() {
    var e2;
    return null === (e2 = this._mergeableWorkflowState) || void 0 === e2 ? void 0 : e2.id;
  }
  get organization() {
    return new AS(this._request).fetch();
  }
  get reviewWorkflowState() {
    var e2, i2;
    return (null === (e2 = this._reviewWorkflowState) || void 0 === e2 ? void 0 : e2.id) ? new Ny(this._request).fetch(null === (i2 = this._reviewWorkflowState) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get reviewWorkflowStateId() {
    var e2;
    return null === (e2 = this._reviewWorkflowState) || void 0 === e2 ? void 0 : e2.id;
  }
  get startWorkflowState() {
    var e2, i2;
    return (null === (e2 = this._startWorkflowState) || void 0 === e2 ? void 0 : e2.id) ? new Ny(this._request).fetch(null === (i2 = this._startWorkflowState) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get startWorkflowStateId() {
    var e2;
    return null === (e2 = this._startWorkflowState) || void 0 === e2 ? void 0 : e2.id;
  }
  get triageIssueState() {
    var e2, i2;
    return (null === (e2 = this._triageIssueState) || void 0 === e2 ? void 0 : e2.id) ? new Ny(this._request).fetch(null === (i2 = this._triageIssueState) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get triageIssueStateId() {
    var e2;
    return null === (e2 = this._triageIssueState) || void 0 === e2 ? void 0 : e2.id;
  }
  get triageResponsibility() {
    var e2, i2;
    return (null === (e2 = this._triageResponsibility) || void 0 === e2 ? void 0 : e2.id) ? new my(this._request).fetch(null === (i2 = this._triageResponsibility) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get triageResponsibilityId() {
    var e2;
    return null === (e2 = this._triageResponsibility) || void 0 === e2 ? void 0 : e2.id;
  }
  cycles(e2) {
    return new wA(this._request, this.id, e2).fetch(e2);
  }
  gitAutomationStates(e2) {
    return new IA(this._request, this.id, e2).fetch(e2);
  }
  issues(e2) {
    return new qA(this._request, this.id, e2).fetch(e2);
  }
  labels(e2) {
    return new CA(this._request, this.id, e2).fetch(e2);
  }
  members(e2) {
    return new PA(this._request, this.id, e2).fetch(e2);
  }
  memberships(e2) {
    return new jA(this._request, this.id, e2).fetch(e2);
  }
  projects(e2) {
    return new OA(this._request, this.id, e2).fetch(e2);
  }
  states(e2) {
    return new UA(this._request, this.id, e2).fetch(e2);
  }
  templates(e2) {
    return new xA(this._request, this.id, e2).fetch(e2);
  }
  webhooks(e2) {
    return new BA(this._request, this.id, e2).fetch(e2);
  }
  create(e2, i2) {
    return new f_(this._request).fetch(e2, i2);
  }
  delete() {
    return new S_(this._request).fetch(this.id);
  }
  unarchive() {
    return new __(this._request).fetch(this.id);
  }
  update(e2, i2) {
    return new F_(this._request).fetch(this.id, e2, i2);
  }
};
var Df = class extends Yv {
  constructor(e2, i2) {
    var n2;
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._entity = null !== (n2 = i2.entity) && void 0 !== n2 ? n2 : void 0;
  }
  get entity() {
    var e2, i2;
    return (null === (e2 = this._entity) || void 0 === e2 ? void 0 : e2.id) ? new QS(this._request).fetch(null === (i2 = this._entity) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get entityId() {
    var e2;
    return null === (e2 = this._entity) || void 0 === e2 ? void 0 : e2.id;
  }
};
var Vf = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new gf(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var _f = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.id = i2.id, this.owner = i2.owner, this.sortOrder = i2.sortOrder, this.updatedAt = null !== (t2 = ip(i2.updatedAt)) && void 0 !== t2 ? t2 : new Date(), this._team = i2.team, this._user = i2.user;
  }
  get team() {
    return new QS(this._request).fetch(this._team.id);
  }
  get teamId() {
    var e2;
    return null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id;
  }
  get user() {
    return new oy(this._request).fetch(this._user.id);
  }
  get userId() {
    var e2;
    return null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id;
  }
  create(e2) {
    return new g_(this._request).fetch(e2);
  }
  delete(e2) {
    return new D_(this._request).fetch(this.id, e2);
  }
  update(e2) {
    return new V_(this._request).fetch(this.id, e2);
  }
};
var Ff = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new _f(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var Af = class extends Yv {
  constructor(e2, i2) {
    var n2;
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._teamMembership = null !== (n2 = i2.teamMembership) && void 0 !== n2 ? n2 : void 0;
  }
  get teamMembership() {
    var e2, i2;
    return (null === (e2 = this._teamMembership) || void 0 === e2 ? void 0 : e2.id) ? new XS(this._request).fetch(null === (i2 = this._teamMembership) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get teamMembershipId() {
    var e2;
    return null === (e2 = this._teamMembership) || void 0 === e2 ? void 0 : e2.id;
  }
};
var Tf = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2, u2, k2, v2;
    super(e2), this.active = i2.active, this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.id = i2.id, this.notificationSubscriptionTypes = i2.notificationSubscriptionTypes, this.updatedAt = null !== (t2 = ip(i2.updatedAt)) && void 0 !== t2 ? t2 : new Date(), this.contextViewType = null !== (d2 = i2.contextViewType) && void 0 !== d2 ? d2 : void 0, this.userContextViewType = null !== (l2 = i2.userContextViewType) && void 0 !== l2 ? l2 : void 0, this._customView = null !== (r2 = i2.customView) && void 0 !== r2 ? r2 : void 0, this._customer = null !== (m2 = i2.customer) && void 0 !== m2 ? m2 : void 0, this._cycle = null !== (o2 = i2.cycle) && void 0 !== o2 ? o2 : void 0, this._initiative = null !== (s2 = i2.initiative) && void 0 !== s2 ? s2 : void 0, this._label = null !== (u2 = i2.label) && void 0 !== u2 ? u2 : void 0, this._project = null !== (k2 = i2.project) && void 0 !== k2 ? k2 : void 0, this._subscriber = i2.subscriber, this._team = i2.team, this._user = null !== (v2 = i2.user) && void 0 !== v2 ? v2 : void 0;
  }
  get customView() {
    var e2, i2;
    return (null === (e2 = this._customView) || void 0 === e2 ? void 0 : e2.id) ? new _b(this._request).fetch(null === (i2 = this._customView) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get customViewId() {
    var e2;
    return null === (e2 = this._customView) || void 0 === e2 ? void 0 : e2.id;
  }
  get customer() {
    var e2, i2;
    return (null === (e2 = this._customer) || void 0 === e2 ? void 0 : e2.id) ? new Tb(this._request).fetch(null === (i2 = this._customer) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get customerId() {
    var e2;
    return null === (e2 = this._customer) || void 0 === e2 ? void 0 : e2.id;
  }
  get cycle() {
    var e2, i2;
    return (null === (e2 = this._cycle) || void 0 === e2 ? void 0 : e2.id) ? new Ub(this._request).fetch(null === (i2 = this._cycle) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get cycleId() {
    var e2;
    return null === (e2 = this._cycle) || void 0 === e2 ? void 0 : e2.id;
  }
  get initiative() {
    var e2, i2;
    return (null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id) ? new Jb(this._request).fetch(null === (i2 = this._initiative) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get initiativeId() {
    var e2;
    return null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id;
  }
  get label() {
    var e2, i2;
    return (null === (e2 = this._label) || void 0 === e2 ? void 0 : e2.id) ? new pS(this._request).fetch(null === (i2 = this._label) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get labelId() {
    var e2;
    return null === (e2 = this._label) || void 0 === e2 ? void 0 : e2.id;
  }
  get project() {
    var e2, i2;
    return (null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id) ? new qS(this._request).fetch(null === (i2 = this._project) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get projectId() {
    var e2;
    return null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id;
  }
  get subscriber() {
    return new oy(this._request).fetch(this._subscriber.id);
  }
  get subscriberId() {
    var e2;
    return null === (e2 = this._subscriber) || void 0 === e2 ? void 0 : e2.id;
  }
  get team() {
    return new QS(this._request).fetch(this._team.id);
  }
  get teamId() {
    var e2;
    return null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id;
  }
  get user() {
    var e2, i2;
    return (null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._user) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get userId() {
    var e2;
    return null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id;
  }
};
var wf = class extends Yv {
  constructor(e2, i2) {
    var n2;
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._team = null !== (n2 = i2.team) && void 0 !== n2 ? n2 : void 0;
  }
  get team() {
    var e2, i2;
    return (null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id) ? new QS(this._request).fetch(null === (i2 = this._team) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get teamId() {
    var e2;
    return null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id;
  }
};
var If = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.description = null !== (t2 = i2.description) && void 0 !== t2 ? t2 : void 0, this.id = i2.id, this.name = i2.name, this.sortOrder = i2.sortOrder, this.templateData = null !== (d2 = np(i2.templateData)) && void 0 !== d2 ? d2 : {}, this.type = i2.type, this.updatedAt = null !== (l2 = ip(i2.updatedAt)) && void 0 !== l2 ? l2 : new Date(), this._creator = null !== (r2 = i2.creator) && void 0 !== r2 ? r2 : void 0, this._inheritedFrom = null !== (m2 = i2.inheritedFrom) && void 0 !== m2 ? m2 : void 0, this._lastUpdatedBy = null !== (o2 = i2.lastUpdatedBy) && void 0 !== o2 ? o2 : void 0, this._team = null !== (s2 = i2.team) && void 0 !== s2 ? s2 : void 0;
  }
  get creator() {
    var e2, i2;
    return (null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._creator) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get creatorId() {
    var e2;
    return null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id;
  }
  get inheritedFrom() {
    var e2, i2;
    return (null === (e2 = this._inheritedFrom) || void 0 === e2 ? void 0 : e2.id) ? new ny(this._request).fetch(null === (i2 = this._inheritedFrom) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get inheritedFromId() {
    var e2;
    return null === (e2 = this._inheritedFrom) || void 0 === e2 ? void 0 : e2.id;
  }
  get lastUpdatedBy() {
    var e2, i2;
    return (null === (e2 = this._lastUpdatedBy) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._lastUpdatedBy) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get lastUpdatedById() {
    var e2;
    return null === (e2 = this._lastUpdatedBy) || void 0 === e2 ? void 0 : e2.id;
  }
  get organization() {
    return new AS(this._request).fetch();
  }
  get team() {
    var e2, i2;
    return (null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id) ? new QS(this._request).fetch(null === (i2 = this._team) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get teamId() {
    var e2;
    return null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id;
  }
  create(e2) {
    return new A_(this._request).fetch(e2);
  }
  delete() {
    return new T_(this._request).fetch(this.id);
  }
  update(e2) {
    return new w_(this._request).fetch(this.id, e2);
  }
};
var qf = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new If(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var Cf = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._template = i2.template;
  }
  get template() {
    return new ny(this._request).fetch(this._template.id);
  }
  get templateId() {
    var e2;
    return null === (e2 = this._template) || void 0 === e2 ? void 0 : e2.id;
  }
};
var Pf = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.externalId = null !== (t2 = i2.externalId) && void 0 !== t2 ? t2 : void 0, this.externalUrl = null !== (d2 = i2.externalUrl) && void 0 !== d2 ? d2 : void 0, this.id = i2.id, this.name = i2.name, this.updatedAt = null !== (l2 = ip(i2.updatedAt)) && void 0 !== l2 ? l2 : new Date(), this.entries = i2.entries ? i2.entries.map((i3) => new Of(e2, i3)) : void 0, this._integration = null !== (r2 = i2.integration) && void 0 !== r2 ? r2 : void 0;
  }
  get integration() {
    var e2, i2;
    return (null === (e2 = this._integration) || void 0 === e2 ? void 0 : e2.id) ? new nS(this._request).fetch(null === (i2 = this._integration) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get integrationId() {
    var e2;
    return null === (e2 = this._integration) || void 0 === e2 ? void 0 : e2.id;
  }
  get organization() {
    return new AS(this._request).fetch();
  }
  create(e2) {
    return new I_(this._request).fetch(e2);
  }
  delete() {
    return new q_(this._request).fetch(this.id);
  }
  update(e2) {
    return new P_(this._request).fetch(this.id, e2);
  }
};
var jf = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new Pf(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var Of = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2;
    super(e2), this.endsAt = null !== (n2 = ip(i2.endsAt)) && void 0 !== n2 ? n2 : new Date(), this.startsAt = null !== (a2 = ip(i2.startsAt)) && void 0 !== a2 ? a2 : new Date(), this.userEmail = null !== (t2 = i2.userEmail) && void 0 !== t2 ? t2 : void 0, this.userId = null !== (d2 = i2.userId) && void 0 !== d2 ? d2 : void 0;
  }
};
var Uf = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._timeSchedule = i2.timeSchedule;
  }
  get timeSchedule() {
    return new dy(this._request).fetch(this._timeSchedule.id);
  }
  get timeScheduleId() {
    var e2;
    return null === (e2 = this._timeSchedule) || void 0 === e2 ? void 0 : e2.id;
  }
};
var xf = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.id = i2.id, this.updatedAt = null !== (t2 = ip(i2.updatedAt)) && void 0 !== t2 ? t2 : new Date(), this.manualSelection = i2.manualSelection ? new Rf(e2, i2.manualSelection) : void 0, this.action = i2.action, this._currentUser = null !== (d2 = i2.currentUser) && void 0 !== d2 ? d2 : void 0, this._team = i2.team, this._timeSchedule = null !== (l2 = i2.timeSchedule) && void 0 !== l2 ? l2 : void 0;
  }
  get currentUser() {
    var e2, i2;
    return (null === (e2 = this._currentUser) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._currentUser) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get currentUserId() {
    var e2;
    return null === (e2 = this._currentUser) || void 0 === e2 ? void 0 : e2.id;
  }
  get team() {
    return new QS(this._request).fetch(this._team.id);
  }
  get teamId() {
    var e2;
    return null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id;
  }
  get timeSchedule() {
    var e2, i2;
    return (null === (e2 = this._timeSchedule) || void 0 === e2 ? void 0 : e2.id) ? new dy(this._request).fetch(null === (i2 = this._timeSchedule) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get timeScheduleId() {
    var e2;
    return null === (e2 = this._timeSchedule) || void 0 === e2 ? void 0 : e2.id;
  }
  create(e2) {
    return new O_(this._request).fetch(e2);
  }
  delete() {
    return new U_(this._request).fetch(this.id);
  }
  update(e2) {
    return new x_(this._request).fetch(this.id, e2);
  }
};
var Bf = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new xf(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var Rf = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.userIds = i2.userIds;
  }
};
var Ef = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._triageResponsibility = i2.triageResponsibility;
  }
  get triageResponsibility() {
    return new my(this._request).fetch(this._triageResponsibility.id);
  }
  get triageResponsibilityId() {
    var e2;
    return null === (e2 = this._triageResponsibility) || void 0 === e2 ? void 0 : e2.id;
  }
};
var Lf = class extends Yv {
  constructor(e2, i2) {
    var n2;
    super(e2), this.assetUrl = i2.assetUrl, this.contentType = i2.contentType, this.filename = i2.filename, this.metaData = null !== (n2 = i2.metaData) && void 0 !== n2 ? n2 : void 0, this.size = i2.size, this.uploadUrl = i2.uploadUrl, this.headers = i2.headers.map((i3) => new zf(e2, i3));
  }
};
var zf = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.key = i2.key, this.value = i2.value;
  }
};
var Mf = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.uploadFile = i2.uploadFile ? new Lf(e2, i2.uploadFile) : void 0;
  }
};
var Hf = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2, u2, k2, v2;
    super(e2), this.active = i2.active, this.admin = i2.admin, this.app = i2.app, this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.avatarBackgroundColor = i2.avatarBackgroundColor, this.avatarUrl = null !== (a2 = i2.avatarUrl) && void 0 !== a2 ? a2 : void 0, this.calendarHash = null !== (t2 = i2.calendarHash) && void 0 !== t2 ? t2 : void 0, this.createdAt = null !== (d2 = ip(i2.createdAt)) && void 0 !== d2 ? d2 : new Date(), this.createdIssueCount = i2.createdIssueCount, this.description = null !== (l2 = i2.description) && void 0 !== l2 ? l2 : void 0, this.disableReason = null !== (r2 = i2.disableReason) && void 0 !== r2 ? r2 : void 0, this.displayName = i2.displayName, this.email = i2.email, this.guest = i2.guest, this.id = i2.id, this.initials = i2.initials, this.inviteHash = i2.inviteHash, this.isMe = i2.isMe, this.lastSeen = null !== (m2 = ip(i2.lastSeen)) && void 0 !== m2 ? m2 : void 0, this.name = i2.name, this.statusEmoji = null !== (o2 = i2.statusEmoji) && void 0 !== o2 ? o2 : void 0, this.statusLabel = null !== (s2 = i2.statusLabel) && void 0 !== s2 ? s2 : void 0, this.statusUntilAt = null !== (u2 = ip(i2.statusUntilAt)) && void 0 !== u2 ? u2 : void 0, this.timezone = null !== (k2 = i2.timezone) && void 0 !== k2 ? k2 : void 0, this.updatedAt = null !== (v2 = ip(i2.updatedAt)) && void 0 !== v2 ? v2 : new Date(), this.url = i2.url;
  }
  get organization() {
    return new AS(this._request).fetch();
  }
  assignedIssues(e2) {
    return new EA(this._request, this.id, e2).fetch(e2);
  }
  createdIssues(e2) {
    return new LA(this._request, this.id, e2).fetch(e2);
  }
  drafts(e2) {
    return new zA(this._request, this.id, e2).fetch(e2);
  }
  teamMemberships(e2) {
    return new MA(this._request, this.id, e2).fetch(e2);
  }
  teams(e2) {
    return new HA(this._request, this.id, e2).fetch(e2);
  }
  suspend() {
    return new K_(this._request).fetch(this.id);
  }
  unsuspend() {
    return new J_(this._request).fetch(this.id);
  }
  update(e2) {
    return new $_(this._request).fetch(this.id, e2);
  }
};
var Wf = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.success = i2.success;
  }
};
var Gf = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2;
    super(e2), this.approvalErrorCode = null !== (n2 = i2.approvalErrorCode) && void 0 !== n2 ? n2 : void 0, this.clientId = i2.clientId, this.createdByLinear = i2.createdByLinear, this.description = null !== (a2 = i2.description) && void 0 !== a2 ? a2 : void 0, this.developer = i2.developer, this.developerUrl = i2.developerUrl, this.id = i2.id, this.imageUrl = null !== (t2 = i2.imageUrl) && void 0 !== t2 ? t2 : void 0, this.isAuthorized = i2.isAuthorized, this.name = i2.name, this.webhooksEnabled = i2.webhooksEnabled;
  }
};
var Kf = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new Hf(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var Jf = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2, s2, u2, k2, v2;
    super(e2), this.active = i2.active, this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.id = i2.id, this.notificationSubscriptionTypes = i2.notificationSubscriptionTypes, this.updatedAt = null !== (t2 = ip(i2.updatedAt)) && void 0 !== t2 ? t2 : new Date(), this.contextViewType = null !== (d2 = i2.contextViewType) && void 0 !== d2 ? d2 : void 0, this.userContextViewType = null !== (l2 = i2.userContextViewType) && void 0 !== l2 ? l2 : void 0, this._customView = null !== (r2 = i2.customView) && void 0 !== r2 ? r2 : void 0, this._customer = null !== (m2 = i2.customer) && void 0 !== m2 ? m2 : void 0, this._cycle = null !== (o2 = i2.cycle) && void 0 !== o2 ? o2 : void 0, this._initiative = null !== (s2 = i2.initiative) && void 0 !== s2 ? s2 : void 0, this._label = null !== (u2 = i2.label) && void 0 !== u2 ? u2 : void 0, this._project = null !== (k2 = i2.project) && void 0 !== k2 ? k2 : void 0, this._subscriber = i2.subscriber, this._team = null !== (v2 = i2.team) && void 0 !== v2 ? v2 : void 0, this._user = i2.user;
  }
  get customView() {
    var e2, i2;
    return (null === (e2 = this._customView) || void 0 === e2 ? void 0 : e2.id) ? new _b(this._request).fetch(null === (i2 = this._customView) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get customViewId() {
    var e2;
    return null === (e2 = this._customView) || void 0 === e2 ? void 0 : e2.id;
  }
  get customer() {
    var e2, i2;
    return (null === (e2 = this._customer) || void 0 === e2 ? void 0 : e2.id) ? new Tb(this._request).fetch(null === (i2 = this._customer) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get customerId() {
    var e2;
    return null === (e2 = this._customer) || void 0 === e2 ? void 0 : e2.id;
  }
  get cycle() {
    var e2, i2;
    return (null === (e2 = this._cycle) || void 0 === e2 ? void 0 : e2.id) ? new Ub(this._request).fetch(null === (i2 = this._cycle) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get cycleId() {
    var e2;
    return null === (e2 = this._cycle) || void 0 === e2 ? void 0 : e2.id;
  }
  get initiative() {
    var e2, i2;
    return (null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id) ? new Jb(this._request).fetch(null === (i2 = this._initiative) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get initiativeId() {
    var e2;
    return null === (e2 = this._initiative) || void 0 === e2 ? void 0 : e2.id;
  }
  get label() {
    var e2, i2;
    return (null === (e2 = this._label) || void 0 === e2 ? void 0 : e2.id) ? new pS(this._request).fetch(null === (i2 = this._label) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get labelId() {
    var e2;
    return null === (e2 = this._label) || void 0 === e2 ? void 0 : e2.id;
  }
  get project() {
    var e2, i2;
    return (null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id) ? new qS(this._request).fetch(null === (i2 = this._project) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get projectId() {
    var e2;
    return null === (e2 = this._project) || void 0 === e2 ? void 0 : e2.id;
  }
  get subscriber() {
    return new oy(this._request).fetch(this._subscriber.id);
  }
  get subscriberId() {
    var e2;
    return null === (e2 = this._subscriber) || void 0 === e2 ? void 0 : e2.id;
  }
  get team() {
    var e2, i2;
    return (null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id) ? new QS(this._request).fetch(null === (i2 = this._team) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get teamId() {
    var e2;
    return null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id;
  }
  get user() {
    return new oy(this._request).fetch(this._user.id);
  }
  get userId() {
    var e2;
    return null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id;
  }
};
var $f = class extends Yv {
  constructor(e2, i2) {
    var n2;
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._user = null !== (n2 = i2.user) && void 0 !== n2 ? n2 : void 0;
  }
  get user() {
    var e2, i2;
    return (null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._user) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get userId() {
    var e2;
    return null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id;
  }
};
var Zf = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.autoAssignToSelf = i2.autoAssignToSelf, this.calendarHash = null !== (a2 = i2.calendarHash) && void 0 !== a2 ? a2 : void 0, this.createdAt = null !== (t2 = ip(i2.createdAt)) && void 0 !== t2 ? t2 : new Date(), this.id = i2.id, this.showFullUserNames = i2.showFullUserNames, this.subscribedToChangelog = i2.subscribedToChangelog, this.subscribedToDPA = i2.subscribedToDPA, this.subscribedToInviteAccepted = i2.subscribedToInviteAccepted, this.subscribedToPrivacyLegalUpdates = i2.subscribedToPrivacyLegalUpdates, this.unsubscribedFrom = i2.unsubscribedFrom, this.updatedAt = null !== (d2 = ip(i2.updatedAt)) && void 0 !== d2 ? d2 : new Date(), this.notificationCategoryPreferences = new JN(e2, i2.notificationCategoryPreferences), this.notificationChannelPreferences = new $N(e2, i2.notificationChannelPreferences), this.notificationDeliveryPreferences = new YN(e2, i2.notificationDeliveryPreferences), this._user = i2.user;
  }
  get user() {
    return new oy(this._request).fetch(this._user.id);
  }
  get userId() {
    var e2;
    return null === (e2 = this._user) || void 0 === e2 ? void 0 : e2.id;
  }
  update(e2) {
    return new G_(this._request).fetch(this.id, e2);
  }
};
var Yf = class extends Yv {
  constructor(e2, i2) {
    var n2, a2;
    super(e2), this.flag = null !== (n2 = i2.flag) && void 0 !== n2 ? n2 : void 0, this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.value = null !== (a2 = i2.value) && void 0 !== a2 ? a2 : void 0;
  }
};
var Qf = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success;
  }
};
var Xf = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success;
  }
  get userSettings() {
    return new sy(this._request).fetch();
  }
};
var eb = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.id = i2.id, this.type = i2.type, this.updatedAt = null !== (t2 = ip(i2.updatedAt)) && void 0 !== t2 ? t2 : new Date(), this.viewType = i2.viewType, this.preferences = new nb(e2, i2.preferences);
  }
  create(e2) {
    return new Z_(this._request).fetch(e2);
  }
  delete() {
    return new Y_(this._request).fetch(this.id);
  }
  update(e2) {
    return new Q_(this._request).fetch(this.id, e2);
  }
};
var ib = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this.viewPreferences = new eb(e2, i2.viewPreferences);
  }
};
var nb = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2;
    super(e2), this.issueGrouping = null !== (n2 = i2.issueGrouping) && void 0 !== n2 ? n2 : void 0, this.showCompletedIssues = null !== (a2 = i2.showCompletedIssues) && void 0 !== a2 ? a2 : void 0, this.viewOrdering = null !== (t2 = i2.viewOrdering) && void 0 !== t2 ? t2 : void 0;
  }
};
var ab = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2, r2, m2, o2;
    super(e2), this.allPublicTeams = i2.allPublicTeams, this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.enabled = i2.enabled, this.id = i2.id, this.label = null !== (t2 = i2.label) && void 0 !== t2 ? t2 : void 0, this.resourceTypes = i2.resourceTypes, this.secret = null !== (d2 = i2.secret) && void 0 !== d2 ? d2 : void 0, this.updatedAt = null !== (l2 = ip(i2.updatedAt)) && void 0 !== l2 ? l2 : new Date(), this.url = null !== (r2 = i2.url) && void 0 !== r2 ? r2 : void 0, this._creator = null !== (m2 = i2.creator) && void 0 !== m2 ? m2 : void 0, this._team = null !== (o2 = i2.team) && void 0 !== o2 ? o2 : void 0;
  }
  get creator() {
    var e2, i2;
    return (null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id) ? new oy(this._request).fetch(null === (i2 = this._creator) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get creatorId() {
    var e2;
    return null === (e2 = this._creator) || void 0 === e2 ? void 0 : e2.id;
  }
  get team() {
    var e2, i2;
    return (null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id) ? new QS(this._request).fetch(null === (i2 = this._team) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get teamId() {
    var e2;
    return null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id;
  }
  create(e2) {
    return new X_(this._request).fetch(e2);
  }
  delete() {
    return new eF(this._request).fetch(this.id);
  }
  update(e2) {
    return new iF(this._request).fetch(this.id, e2);
  }
};
var tb = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new ab(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var lb = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._webhook = i2.webhook;
  }
  get webhook() {
    return new py(this._request).fetch(this._webhook.id);
  }
  get webhookId() {
    var e2;
    return null === (e2 = this._webhook) || void 0 === e2 ? void 0 : e2.id;
  }
};
var rb = class extends Yv {
  constructor(e2, i2) {
    var n2, a2, t2, d2, l2;
    super(e2), this.archivedAt = null !== (n2 = ip(i2.archivedAt)) && void 0 !== n2 ? n2 : void 0, this.color = i2.color, this.createdAt = null !== (a2 = ip(i2.createdAt)) && void 0 !== a2 ? a2 : new Date(), this.description = null !== (t2 = i2.description) && void 0 !== t2 ? t2 : void 0, this.id = i2.id, this.name = i2.name, this.position = i2.position, this.type = i2.type, this.updatedAt = null !== (d2 = ip(i2.updatedAt)) && void 0 !== d2 ? d2 : new Date(), this._inheritedFrom = null !== (l2 = i2.inheritedFrom) && void 0 !== l2 ? l2 : void 0, this._team = i2.team;
  }
  get inheritedFrom() {
    var e2, i2;
    return (null === (e2 = this._inheritedFrom) || void 0 === e2 ? void 0 : e2.id) ? new Ny(this._request).fetch(null === (i2 = this._inheritedFrom) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get inheritedFromId() {
    var e2;
    return null === (e2 = this._inheritedFrom) || void 0 === e2 ? void 0 : e2.id;
  }
  get team() {
    return new QS(this._request).fetch(this._team.id);
  }
  get teamId() {
    var e2;
    return null === (e2 = this._team) || void 0 === e2 ? void 0 : e2.id;
  }
  issues(e2) {
    return new gT(this._request, this.id, e2).fetch(e2);
  }
  archive() {
    return new nF(this._request).fetch(this.id);
  }
  create(e2) {
    return new aF(this._request).fetch(e2);
  }
  update(e2) {
    return new tF(this._request).fetch(this.id, e2);
  }
};
var mb = class extends Yv {
  constructor(e2, i2) {
    var n2;
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._entity = null !== (n2 = i2.entity) && void 0 !== n2 ? n2 : void 0;
  }
  get entity() {
    var e2, i2;
    return (null === (e2 = this._entity) || void 0 === e2 ? void 0 : e2.id) ? new Ny(this._request).fetch(null === (i2 = this._entity) || void 0 === i2 ? void 0 : i2.id) : void 0;
  }
  get entityId() {
    var e2;
    return null === (e2 = this._entity) || void 0 === e2 ? void 0 : e2.id;
  }
};
var ob = class extends ep {
  constructor(e2, i2, n2) {
    super(e2, i2, n2.nodes.map((i3) => new rb(e2, i3)), new yh(e2, n2.pageInfo));
  }
};
var sb = class extends Yv {
  constructor(e2, i2) {
    super(e2), this.lastSyncId = i2.lastSyncId, this.success = i2.success, this._workflowState = i2.workflowState;
  }
  get workflowState() {
    return new Ny(this._request).fetch(this._workflowState.id);
  }
  get workflowStateId() {
    var e2;
    return null === (e2 = this._workflowState) || void 0 === e2 ? void 0 : e2.id;
  }
};
var ub = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(jt, e2)).administrableTeams;
      return new Vf(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var kb = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Ot, e2)).apiKeys;
      return new dp(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var vb = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Ut, { clientId: e2 })).applicationInfo;
      return new rp(this._request, i2);
    });
  }
};
var pb = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2, n2) {
    return Zv(this, void 0, void 0, function* () {
      const a2 = (yield this._request(xt, Object.assign({ clientId: e2, scope: i2 }, n2))).applicationWithAuthorization;
      return new Gf(this._request, a2);
    });
  }
};
var cb = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Bt, { id: e2 })).attachment;
      return new up(this._request, i2);
    });
  }
};
var Nb = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Rt, { id: e2 })).attachmentIssue;
      return new cN(this._request, i2);
    });
  }
};
var hb = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Zt, e2)).attachments;
      return new kp(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var fb = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Yt, Object.assign({ url: e2 }, i2))).attachmentsForURL;
      return new kp(this._request, (n3) => this.fetch(e2, Qv(Object.assign(Object.assign({}, i2), n3))), n2);
    });
  }
};
var bb = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Qt, e2)).auditEntries;
      return new Np(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var Sb = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch() {
    return Zv(this, void 0, void 0, function* () {
      return (yield this._request(Xt, {})).auditEntryTypes.map((e2) => new hp(this._request, e2));
    });
  }
};
var yb = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch() {
    return Zv(this, void 0, void 0, function* () {
      return (yield this._request(ed, {})).authenticationSessions.map((e2) => new yp(this._request, e2));
    });
  }
};
var gb = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch() {
    return Zv(this, void 0, void 0, function* () {
      const e2 = (yield this._request(id, {})).availableUsers;
      return new bp(this._request, e2);
    });
  }
};
var Db = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(nd, e2)).comment;
      return new Dp(this._request, i2);
    });
  }
};
var Vb = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(rd, e2)).comments;
      return new Vp(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var _b = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(md, { id: e2 })).customView;
      return new wp(this._request, i2);
    });
  }
};
var Fb = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Nd, { id: e2 })).customViewHasSubscribers;
      return new qp(this._request, i2);
    });
  }
};
var Ab = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(hd, e2)).customViews;
      return new Ip(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var Tb = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(fd, { id: e2 })).customer;
      return new Op(this._request, i2);
    });
  }
};
var wb = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(bd, e2)).customerNeed;
      return new xp(this._request, i2);
    });
  }
};
var Ib = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Sd, e2)).customerNeeds;
      return new Rp(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var qb = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(yd, { id: e2 })).customerStatus;
      return new Mp(this._request, i2);
    });
  }
};
var Cb = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(gd, e2)).customerStatuses;
      return new Hp(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var Pb = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Dd, { id: e2 })).customerTier;
      return new Wp(this._request, i2);
    });
  }
};
var jb = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Vd, e2)).customerTiers;
      return new Gp(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var Ob = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(_d, e2)).customers;
      return new Up(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var Ub = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Fd, { id: e2 })).cycle;
      return new Jp(this._request, i2);
    });
  }
};
var xb = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(wd, e2)).cycles;
      return new Zp(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var Bb = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Id, { id: e2 })).document;
      return new ec(this._request, i2);
    });
  }
};
var Rb = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Cd, { id: e2 })).documentContentHistory;
      return new tc(this._request, i2);
    });
  }
};
var Eb = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Pd, e2)).documents;
      return new nc(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var Lb = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(jd, { id: e2 })).emoji;
      return new Nc(this._request, i2);
    });
  }
};
var zb = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Od, e2)).emojis;
      return new hc(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var Mb = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Ud, { id: e2 })).entityExternalLink;
      return new Sc(this._request, i2);
    });
  }
};
var Hb = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(xd, { id: e2 })).externalUser;
      return new Dc(this._request, i2);
    });
  }
};
var Wb = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Bd, e2)).externalUsers;
      return new Vc(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var Gb = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Rd, { id: e2 })).favorite;
      return new Fc(this._request, i2);
    });
  }
};
var Kb = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Ld, e2)).favorites;
      return new Ac(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var Jb = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(zd, { id: e2 })).initiative;
      return new Ec(this._request, i2);
    });
  }
};
var $b = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Gd, { id: e2 })).initiativeRelation;
      return new Rh(this._request, i2);
    });
  }
};
var Zb = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Kd, e2)).initiativeRelations;
      return new $c(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var Yb = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Jd, { id: e2 })).initiativeToProject;
      return new Yc(this._request, i2);
    });
  }
};
var Qb = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request($d, e2)).initiativeToProjects;
      return new Qc(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var Xb = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Zd, { id: e2 })).initiativeUpdate;
      return new eN(this._request, i2);
    });
  }
};
var eS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Qd, e2)).initiativeUpdates;
      return new nN(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var iS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Xd, e2)).initiatives;
      return new zc(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var nS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(el, { id: e2 })).integration;
      return new dN(this._request, i2);
    });
  }
};
var aS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(il, { integrationId: e2, scopes: i2 })).integrationHasScopes;
      return new rN(this._request, n2);
    });
  }
};
var tS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(nl, { id: e2 })).integrationTemplate;
      return new sN(this._request, i2);
    });
  }
};
var dS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(al, e2)).integrationTemplates;
      return new uN(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var lS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(tl, e2)).integrations;
      return new lN(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var rS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(dl, { id: e2 })).integrationsSettings;
      return new vN(this._request, i2);
    });
  }
};
var mS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(ll, { id: e2 })).issue;
      return new cN(this._request, i2);
    });
  }
};
var oS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(hl, Object.assign({ fileKey: e2 }, i2))).issueFigmaFileKeySearch;
      return new fN(this._request, (n3) => this.fetch(e2, Qv(Object.assign(Object.assign({}, i2), n3))), n2);
    });
  }
};
var sS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(fl, Object.assign({ prompt: e2 }, i2))).issueFilterSuggestion;
      return new bN(this._request, n2);
    });
  }
};
var uS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(bl, { csvUrl: e2, service: i2 })).issueImportCheckCSV;
      return new DN(this._request, n2);
    });
  }
};
var kS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Sl, { issueImportId: e2 })).issueImportCheckSync;
      return new AN(this._request, i2);
    });
  }
};
var vS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2, n2, a2, t2) {
    return Zv(this, void 0, void 0, function* () {
      const d2 = (yield this._request(yl, { jiraEmail: e2, jiraHostname: i2, jiraProject: n2, jiraToken: a2, jql: t2 })).issueImportJqlCheck;
      return new _N(this._request, d2);
    });
  }
};
var pS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(gl, { id: e2 })).issueLabel;
      return new TN(this._request, i2);
    });
  }
};
var cS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(_l, e2)).issueLabels;
      return new wN(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var NS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch() {
    return Zv(this, void 0, void 0, function* () {
      return (yield this._request(Fl, {})).issuePriorityValues.map((e2) => new PN(this._request, e2));
    });
  }
};
var hS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Al, { id: e2 })).issueRelation;
      return new jN(this._request, i2);
    });
  }
};
var fS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Tl, e2)).issueRelations;
      return new ON(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var bS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(wl, e2)).issueSearch;
      return new fN(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var SS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Il, { request: e2 })).issueTitleSuggestionFromCustomerRequest;
      return new EN(this._request, i2);
    });
  }
};
var yS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(ql, { branchName: e2 })).issueVcsBranchSearch;
      return i2 ? new cN(this._request, i2) : void 0;
    });
  }
};
var gS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(zl, e2)).issues;
      return new fN(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var DS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Ml, { id: e2 })).notification;
      switch (i2.__typename) {
        case "DocumentNotification":
          return new lc(this._request, i2);
        case "InitiativeNotification":
          return new Wc(this._request, i2);
        case "IssueNotification":
          return new qN(this._request, i2);
        case "OauthClientApprovalNotification":
          return new lh(this._request, i2);
        case "ProjectNotification":
          return new Uh(this._request, i2);
        default:
          return new WN(this._request, i2);
      }
    });
  }
};
var VS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Hl, { id: e2 })).notificationSubscription;
      switch (i2.__typename) {
        case "CustomViewNotificationSubscription":
          return new Cp(this._request, i2);
        case "CustomerNotificationSubscription":
          return new Lp(this._request, i2);
        case "CycleNotificationSubscription":
          return new Yp(this._request, i2);
        case "InitiativeNotificationSubscription":
          return new Gc(this._request, i2);
        case "LabelNotificationSubscription":
          return new LN(this._request, i2);
        case "ProjectNotificationSubscription":
          return new xh(this._request, i2);
        case "TeamNotificationSubscription":
          return new Tf(this._request, i2);
        case "UserNotificationSubscription":
          return new Jf(this._request, i2);
        default:
          return new nh(this._request, i2);
      }
    });
  }
};
var _S = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Wl, e2)).notificationSubscriptions;
      return new ah(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var FS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Gl, e2)).notifications;
      return new ZN(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var AS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch() {
    return Zv(this, void 0, void 0, function* () {
      const e2 = (yield this._request(Kl, {})).organization;
      return new rh(this._request, e2);
    });
  }
};
var TS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(er, { urlKey: e2 })).organizationExists;
      return new kh(this._request, i2);
    });
  }
};
var wS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(ir, { id: e2 })).organizationInvite;
      return new vh(this._request, i2);
    });
  }
};
var IS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(nr, e2)).organizationInvites;
      return new ph(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var qS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(ar, { id: e2 })).project;
      return new Vh(this._request, i2);
    });
  }
};
var CS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(fr, { prompt: e2 })).projectFilterSuggestion;
      return new Ah(this._request, i2);
    });
  }
};
var PS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(br, { id: e2 })).projectMilestone;
      return new Ih(this._request, i2);
    });
  }
};
var jS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(gr, e2)).projectMilestones;
      return new qh(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var OS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Dr, { id: e2 })).projectRelation;
      return new Rh(this._request, i2);
    });
  }
};
var US = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Vr, e2)).projectRelations;
      return new Eh(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var xS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(_r, { id: e2 })).projectStatus;
      return new Hh(this._request, i2);
    });
  }
};
var BS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Fr, e2)).projectStatuses;
      return new Gh(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var RS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Ar, { id: e2 })).projectUpdate;
      return new $h(this._request, i2);
    });
  }
};
var ES = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(wr, e2)).projectUpdates;
      return new Yh(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var LS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Ir, e2)).projects;
      return new Fh(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var zS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(qr, e2)).pushSubscriptionTest;
      return new af(this._request, i2);
    });
  }
};
var MS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch() {
    return Zv(this, void 0, void 0, function* () {
      const e2 = (yield this._request(Cr, {})).rateLimitStatus;
      return new tf(this._request, e2);
    });
  }
};
var HS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Pr, { id: e2 })).roadmap;
      return new mf(this._request, i2);
    });
  }
};
var WS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Or, { id: e2 })).roadmapToProject;
      return new kf(this._request, i2);
    });
  }
};
var GS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Ur, e2)).roadmapToProjects;
      return new vf(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var KS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(xr, e2)).roadmaps;
      return new sf(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var JS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Br, Object.assign({ term: e2 }, i2))).searchDocuments;
      return new mc(this._request, n2);
    });
  }
};
var $S = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Er, Object.assign({ term: e2 }, i2))).searchIssues;
      return new BN(this._request, n2);
    });
  }
};
var ZS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(zr, Object.assign({ term: e2 }, i2))).searchProjects;
      return new zh(this._request, n2);
    });
  }
};
var YS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Hr, Object.assign({ email: e2 }, i2))).ssoUrlFromEmail;
      return new ff(this._request, n2);
    });
  }
};
var QS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Wr, { id: e2 })).team;
      return new gf(this._request, i2);
    });
  }
};
var XS = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(nm, { id: e2 })).teamMembership;
      return new _f(this._request, i2);
    });
  }
};
var ey = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(am, e2)).teamMemberships;
      return new Ff(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var iy = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(tm, e2)).teams;
      return new Vf(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var ny = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(dm, { id: e2 })).template;
      return new If(this._request, i2);
    });
  }
};
var ay = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch() {
    return Zv(this, void 0, void 0, function* () {
      return (yield this._request(lm, {})).templates.map((e2) => new If(this._request, e2));
    });
  }
};
var ty = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      return (yield this._request(rm, { integrationType: e2 })).templatesForIntegration.map((e3) => new If(this._request, e3));
    });
  }
};
var dy = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(mm, { id: e2 })).timeSchedule;
      return new Pf(this._request, i2);
    });
  }
};
var ly = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(om, e2)).timeSchedules;
      return new jf(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var ry = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(sm, e2)).triageResponsibilities;
      return new Bf(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var my = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(um, { id: e2 })).triageResponsibility;
      return new xf(this._request, i2);
    });
  }
};
var oy = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(vm, { id: e2 })).user;
      return new Hf(this._request, i2);
    });
  }
};
var sy = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch() {
    return Zv(this, void 0, void 0, function* () {
      const e2 = (yield this._request(bm, {})).userSettings;
      return new Zf(this._request, e2);
    });
  }
};
var uy = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Gm, e2)).users;
      return new Kf(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var ky = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch() {
    return Zv(this, void 0, void 0, function* () {
      const e2 = (yield this._request(Km, {})).verifyGitHubEnterpriseServerInstallation;
      return new Uc(this._request, e2);
    });
  }
};
var vy = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch() {
    return Zv(this, void 0, void 0, function* () {
      const e2 = (yield this._request(Jm, {})).viewer;
      return new Hf(this._request, e2);
    });
  }
};
var py = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(eo, { id: e2 })).webhook;
      return new ab(this._request, i2);
    });
  }
};
var cy = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(io, e2)).webhooks;
      return new tb(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var Ny = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(no, { id: e2 })).workflowState;
      return new rb(this._request, i2);
    });
  }
};
var hy = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(to, e2)).workflowStates;
      return new ob(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign({}, e2), i3))), i2);
    });
  }
};
var fy = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(lo, { input: e2 })).airbyteIntegrationConnect;
      return new mN(this._request, i2);
    });
  }
};
var by = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(ro, { input: e2 })).attachmentCreate;
      return new vp(this._request, i2);
    });
  }
};
var Sy = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(mo, { id: e2 })).attachmentDelete;
      return new Xp(this._request, i2);
    });
  }
};
var yy = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2, n2, a2, t2) {
    return Zv(this, void 0, void 0, function* () {
      const d2 = (yield this._request(oo, Object.assign({ channelId: e2, issueId: i2, messageId: n2, url: a2 }, t2))).attachmentLinkDiscord;
      return new vp(this._request, d2);
    });
  }
};
var gy = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2, n2) {
    return Zv(this, void 0, void 0, function* () {
      const a2 = (yield this._request(so, Object.assign({ conversationId: e2, issueId: i2 }, n2))).attachmentLinkFront;
      return new wc(this._request, a2);
    });
  }
};
var Dy = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2, n2) {
    return Zv(this, void 0, void 0, function* () {
      const a2 = (yield this._request(uo, Object.assign({ issueId: e2, url: i2 }, n2))).attachmentLinkGitHubIssue;
      return new vp(this._request, a2);
    });
  }
};
var Vy = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2, n2) {
    return Zv(this, void 0, void 0, function* () {
      const a2 = (yield this._request(ko, Object.assign({ issueId: e2, url: i2 }, n2))).attachmentLinkGitHubPR;
      return new vp(this._request, a2);
    });
  }
};
var _y = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2, n2, a2, t2) {
    return Zv(this, void 0, void 0, function* () {
      const d2 = (yield this._request(vo, Object.assign({ issueId: e2, number: i2, projectPathWithNamespace: n2, url: a2 }, t2))).attachmentLinkGitLabMR;
      return new vp(this._request, d2);
    });
  }
};
var Fy = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2, n2) {
    return Zv(this, void 0, void 0, function* () {
      const a2 = (yield this._request(po, Object.assign({ conversationId: e2, issueId: i2 }, n2))).attachmentLinkIntercom;
      return new vp(this._request, a2);
    });
  }
};
var Ay = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2, n2) {
    return Zv(this, void 0, void 0, function* () {
      const a2 = (yield this._request(co, Object.assign({ issueId: e2, jiraIssueId: i2 }, n2))).attachmentLinkJiraIssue;
      return new vp(this._request, a2);
    });
  }
};
var Ty = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2, n2) {
    return Zv(this, void 0, void 0, function* () {
      const a2 = (yield this._request(No, Object.assign({ issueId: e2, url: i2 }, n2))).attachmentLinkSlack;
      return new vp(this._request, a2);
    });
  }
};
var wy = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2, n2) {
    return Zv(this, void 0, void 0, function* () {
      const a2 = (yield this._request(ho, Object.assign({ issueId: e2, url: i2 }, n2))).attachmentLinkURL;
      return new vp(this._request, a2);
    });
  }
};
var Iy = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2, n2) {
    return Zv(this, void 0, void 0, function* () {
      const a2 = (yield this._request(fo, Object.assign({ issueId: e2, ticketId: i2 }, n2))).attachmentLinkZendesk;
      return new vp(this._request, a2);
    });
  }
};
var qy = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(bo, { id: e2 })).attachmentSyncToSlack;
      return new vp(this._request, i2);
    });
  }
};
var Cy = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(So, { id: e2, input: i2 })).attachmentUpdate;
      return new vp(this._request, n2);
    });
  }
};
var Py = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(yo, { input: e2 })).commentCreate;
      return new _p(this._request, i2);
    });
  }
};
var jy = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(go, { id: e2 })).commentDelete;
      return new Xp(this._request, i2);
    });
  }
};
var Oy = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Do, Object.assign({ id: e2 }, i2))).commentResolve;
      return new _p(this._request, n2);
    });
  }
};
var Uy = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Vo, { id: e2 })).commentUnresolve;
      return new _p(this._request, i2);
    });
  }
};
var xy = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(_o, { id: e2, input: i2 })).commentUpdate;
      return new _p(this._request, n2);
    });
  }
};
var By = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Fo, { input: e2 })).contactCreate;
      return new Fp(this._request, i2);
    });
  }
};
var Ry = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Ao, e2)).createCsvExportReport;
      return new Ap(this._request, i2);
    });
  }
};
var Ey = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(To, Object.assign({ initiativeId: e2 }, i2))).createInitiativeUpdateReminder;
      return new tN(this._request, n2);
    });
  }
};
var Ly = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(wo, Object.assign({ input: e2 }, i2))).createOrganizationFromOnboarding;
      return new Tp(this._request, n2);
    });
  }
};
var zy = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Io, Object.assign({ projectId: e2 }, i2))).createProjectUpdateReminder;
      return new Xh(this._request, n2);
    });
  }
};
var My = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(qo, { input: e2 })).customViewCreate;
      return new Pp(this._request, i2);
    });
  }
};
var Hy = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Co, { id: e2 })).customViewDelete;
      return new Xp(this._request, i2);
    });
  }
};
var Wy = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Po, { id: e2, input: i2 })).customViewUpdate;
      return new Pp(this._request, n2);
    });
  }
};
var Gy = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(jo, { input: e2 })).customerCreate;
      return new zp(this._request, i2);
    });
  }
};
var Ky = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Oo, { id: e2 })).customerDelete;
      return new Xp(this._request, i2);
    });
  }
};
var Jy = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Uo, { sourceCustomerId: e2, targetCustomerId: i2 })).customerMerge;
      return new zp(this._request, n2);
    });
  }
};
var $y = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(xo, { id: e2 })).customerNeedArchive;
      return new Bp(this._request, i2);
    });
  }
};
var Zy = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Bo, { input: e2 })).customerNeedCreate;
      return new Ep(this._request, i2);
    });
  }
};
var Yy = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Ro, { input: e2 })).customerNeedCreateFromAttachment;
      return new Ep(this._request, i2);
    });
  }
};
var Qy = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Eo, Object.assign({ id: e2 }, i2))).customerNeedDelete;
      return new Xp(this._request, n2);
    });
  }
};
var Xy = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Lo, { id: e2 })).customerNeedUnarchive;
      return new Bp(this._request, i2);
    });
  }
};
var eg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(zo, { id: e2, input: i2 })).customerNeedUpdate;
      return new Ep(this._request, n2);
    });
  }
};
var ig = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Mo, { input: e2 })).customerTierCreate;
      return new Kp(this._request, i2);
    });
  }
};
var ng = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Ho, { id: e2 })).customerTierDelete;
      return new Xp(this._request, i2);
    });
  }
};
var ag = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Wo, { id: e2, input: i2 })).customerTierUpdate;
      return new Kp(this._request, n2);
    });
  }
};
var tg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Go, { id: e2, input: i2 })).customerUpdate;
      return new zp(this._request, n2);
    });
  }
};
var dg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Ko, { input: e2 })).customerUpsert;
      return new zp(this._request, i2);
    });
  }
};
var lg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Jo, { id: e2 })).cycleArchive;
      return new $p(this._request, i2);
    });
  }
};
var rg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request($o, { input: e2 })).cycleCreate;
      return new Qp(this._request, i2);
    });
  }
};
var mg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Zo, { input: e2 })).cycleShiftAll;
      return new Qp(this._request, i2);
    });
  }
};
var og = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Yo, { id: e2 })).cycleStartUpcomingCycleToday;
      return new Qp(this._request, i2);
    });
  }
};
var sg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Qo, { id: e2, input: i2 })).cycleUpdate;
      return new Qp(this._request, n2);
    });
  }
};
var ug = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Xo, { input: e2 })).documentCreate;
      return new rc(this._request, i2);
    });
  }
};
var kg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(es, { id: e2 })).documentDelete;
      return new ic(this._request, i2);
    });
  }
};
var vg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(is, { id: e2 })).documentUnarchive;
      return new ic(this._request, i2);
    });
  }
};
var pg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(ns, { id: e2, input: i2 })).documentUpdate;
      return new rc(this._request, n2);
    });
  }
};
var cg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(as, { input: e2 })).emailIntakeAddressCreate;
      return new vc(this._request, i2);
    });
  }
};
var Ng = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(ts, { id: e2 })).emailIntakeAddressDelete;
      return new Xp(this._request, i2);
    });
  }
};
var hg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(ds, { id: e2 })).emailIntakeAddressRotate;
      return new vc(this._request, i2);
    });
  }
};
var fg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(ls, { id: e2, input: i2 })).emailIntakeAddressUpdate;
      return new vc(this._request, n2);
    });
  }
};
var bg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(rs, { input: e2 })).emailTokenUserAccountAuth;
      return new bp(this._request, i2);
    });
  }
};
var Sg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(ms, { input: e2 })).emailUnsubscribe;
      return new pc(this._request, i2);
    });
  }
};
var yg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(os, { input: e2 })).emailUserAccountAuthChallenge;
      return new cc(this._request, i2);
    });
  }
};
var gg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(ss, { input: e2 })).emojiCreate;
      return new fc(this._request, i2);
    });
  }
};
var Dg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(us, { id: e2 })).emojiDelete;
      return new Xp(this._request, i2);
    });
  }
};
var Vg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(ks, { input: e2 })).entityExternalLinkCreate;
      return new gc(this._request, i2);
    });
  }
};
var _g = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(vs, { id: e2 })).entityExternalLinkDelete;
      return new Xp(this._request, i2);
    });
  }
};
var Fg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(ps, { id: e2, input: i2 })).entityExternalLinkUpdate;
      return new gc(this._request, n2);
    });
  }
};
var Ag = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(cs, { input: e2 })).favoriteCreate;
      return new Tc(this._request, i2);
    });
  }
};
var Tg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Ns, { id: e2 })).favoriteDelete;
      return new Xp(this._request, i2);
    });
  }
};
var wg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(hs, { id: e2, input: i2 })).favoriteUpdate;
      return new Tc(this._request, n2);
    });
  }
};
var Ig = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2, n2, a2) {
    return Zv(this, void 0, void 0, function* () {
      const t2 = (yield this._request(fs, Object.assign({ contentType: e2, filename: i2, size: n2 }, a2))).fileUpload;
      return new Mf(this._request, t2);
    });
  }
};
var qg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(bs, { input: e2 })).gitAutomationStateCreate;
      return new Cc(this._request, i2);
    });
  }
};
var Cg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Ss, { id: e2 })).gitAutomationStateDelete;
      return new Xp(this._request, i2);
    });
  }
};
var Pg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(ys, { id: e2, input: i2 })).gitAutomationStateUpdate;
      return new Cc(this._request, n2);
    });
  }
};
var jg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(gs, { input: e2 })).gitAutomationTargetBranchCreate;
      return new jc(this._request, i2);
    });
  }
};
var Og = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Ds, { id: e2 })).gitAutomationTargetBranchDelete;
      return new Xp(this._request, i2);
    });
  }
};
var Ug = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Vs, { id: e2, input: i2 })).gitAutomationTargetBranchUpdate;
      return new jc(this._request, n2);
    });
  }
};
var xg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(_s, { input: e2 })).googleUserAccountAuth;
      return new bp(this._request, i2);
    });
  }
};
var Bg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Fs, { url: e2 })).imageUploadFromUrl;
      return new Rc(this._request, i2);
    });
  }
};
var Rg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2, n2, a2) {
    return Zv(this, void 0, void 0, function* () {
      const t2 = (yield this._request(As, Object.assign({ contentType: e2, filename: i2, size: n2 }, a2))).importFileUpload;
      return new Mf(this._request, t2);
    });
  }
};
var Eg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Ts, { id: e2 })).initiativeArchive;
      return new Lc(this._request, i2);
    });
  }
};
var Lg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(ws, { input: e2 })).initiativeCreate;
      return new Kc(this._request, i2);
    });
  }
};
var zg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Is, { id: e2 })).initiativeDelete;
      return new Xp(this._request, i2);
    });
  }
};
var Mg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(qs, { input: e2 })).initiativeRelationCreate;
      return new Zc(this._request, i2);
    });
  }
};
var Hg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Cs, { id: e2 })).initiativeRelationDelete;
      return new Xp(this._request, i2);
    });
  }
};
var Wg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Ps, { id: e2, input: i2 })).initiativeRelationUpdate;
      return new Xp(this._request, n2);
    });
  }
};
var Gg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(js, { input: e2 })).initiativeToProjectCreate;
      return new Xc(this._request, i2);
    });
  }
};
var Kg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Os, { id: e2 })).initiativeToProjectDelete;
      return new Xp(this._request, i2);
    });
  }
};
var Jg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Us, { id: e2, input: i2 })).initiativeToProjectUpdate;
      return new Xc(this._request, n2);
    });
  }
};
var $g = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(xs, { id: e2 })).initiativeUnarchive;
      return new Lc(this._request, i2);
    });
  }
};
var Zg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Bs, { id: e2, input: i2 })).initiativeUpdate;
      return new Kc(this._request, n2);
    });
  }
};
var Yg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Rs, { id: e2 })).initiativeUpdateArchive;
      return new iN(this._request, i2);
    });
  }
};
var Qg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Es, { input: e2 })).initiativeUpdateCreate;
      return new aN(this._request, i2);
    });
  }
};
var Xg = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Ls, { id: e2 })).initiativeUpdateUnarchive;
      return new iN(this._request, i2);
    });
  }
};
var eD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(zs, { id: e2, input: i2 })).initiativeUpdateUpdate;
      return new aN(this._request, n2);
    });
  }
};
var iD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Ms, { id: e2 })).integrationArchive;
      return new Xp(this._request, i2);
    });
  }
};
var nD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Hs, { code: e2, redirectUri: i2 })).integrationAsksConnectChannel;
      return new sp(this._request, n2);
    });
  }
};
var aD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Ws, { id: e2 })).integrationDelete;
      return new Xp(this._request, i2);
    });
  }
};
var tD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Gs, { code: e2, redirectUri: i2 })).integrationDiscord;
      return new mN(this._request, n2);
    });
  }
};
var dD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Ks, { code: e2, redirectUri: i2 })).integrationFigma;
      return new mN(this._request, n2);
    });
  }
};
var lD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Js, { code: e2, redirectUri: i2 })).integrationFront;
      return new mN(this._request, n2);
    });
  }
};
var rD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request($s, Object.assign({ githubUrl: e2 }, i2))).integrationGitHubEnterpriseServerConnect;
      return new xc(this._request, n2);
    });
  }
};
var mD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Zs, { code: e2 })).integrationGitHubPersonal;
      return new mN(this._request, i2);
    });
  }
};
var oD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch() {
    return Zv(this, void 0, void 0, function* () {
      const e2 = (yield this._request(Ys, {})).integrationGithubCommitCreate;
      return new Oc(this._request, e2);
    });
  }
};
var sD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Qs, { code: e2, installationId: i2 })).integrationGithubConnect;
      return new mN(this._request, n2);
    });
  }
};
var uD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Xs, { code: e2, installationId: i2 })).integrationGithubImportConnect;
      return new mN(this._request, n2);
    });
  }
};
var kD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(eu, { id: e2 })).integrationGithubImportRefresh;
      return new mN(this._request, i2);
    });
  }
};
var vD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(iu, { accessToken: e2, gitlabUrl: i2 })).integrationGitlabConnect;
      return new Bc(this._request, n2);
    });
  }
};
var pD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(nu, { code: e2 })).integrationGoogleSheets;
      return new mN(this._request, i2);
    });
  }
};
var cD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2, n2) {
    return Zv(this, void 0, void 0, function* () {
      const a2 = (yield this._request(au, Object.assign({ code: e2, redirectUri: i2 }, n2))).integrationIntercom;
      return new mN(this._request, a2);
    });
  }
};
var ND = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch() {
    return Zv(this, void 0, void 0, function* () {
      const e2 = (yield this._request(tu, {})).integrationIntercomDelete;
      return new mN(this._request, e2);
    });
  }
};
var hD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(du, { input: e2 })).integrationIntercomSettingsUpdate;
      return new mN(this._request, i2);
    });
  }
};
var fD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(lu, e2)).integrationJiraPersonal;
      return new mN(this._request, i2);
    });
  }
};
var bD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch() {
    return Zv(this, void 0, void 0, function* () {
      const e2 = (yield this._request(ru, {})).integrationLoom;
      return new mN(this._request, e2);
    });
  }
};
var SD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(mu, { input: e2 })).integrationRequest;
      return new oN(this._request, i2);
    });
  }
};
var yD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2, n2) {
    return Zv(this, void 0, void 0, function* () {
      const a2 = (yield this._request(ou, { code: e2, installationId: i2, organizationSlug: n2 })).integrationSentryConnect;
      return new mN(this._request, a2);
    });
  }
};
var gD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2, n2) {
    return Zv(this, void 0, void 0, function* () {
      const a2 = (yield this._request(su, Object.assign({ code: e2, redirectUri: i2 }, n2))).integrationSlack;
      return new mN(this._request, a2);
    });
  }
};
var DD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(uu, { code: e2, redirectUri: i2 })).integrationSlackAsks;
      return new mN(this._request, n2);
    });
  }
};
var VD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2, n2) {
    return Zv(this, void 0, void 0, function* () {
      const a2 = (yield this._request(ku, { code: e2, customViewId: i2, redirectUri: n2 })).integrationSlackCustomViewNotifications;
      return new Nf(this._request, a2);
    });
  }
};
var _D = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2, n2) {
    return Zv(this, void 0, void 0, function* () {
      const a2 = (yield this._request(vu, { code: e2, customerId: i2, redirectUri: n2 })).integrationSlackCustomerChannelLink;
      return new bf(this._request, a2);
    });
  }
};
var FD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(pu, { code: e2, redirectUri: i2 })).integrationSlackImportEmojis;
      return new mN(this._request, n2);
    });
  }
};
var AD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(cu, { code: e2, redirectUri: i2 })).integrationSlackOrgProjectUpdatesPost;
      return new Nf(this._request, n2);
    });
  }
};
var TD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Nu, { code: e2, redirectUri: i2 })).integrationSlackPersonal;
      return new mN(this._request, n2);
    });
  }
};
var wD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2, n2, a2) {
    return Zv(this, void 0, void 0, function* () {
      const t2 = (yield this._request(hu, Object.assign({ code: e2, redirectUri: i2, teamId: n2 }, a2))).integrationSlackPost;
      return new Nf(this._request, t2);
    });
  }
};
var ID = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2, n2, a2) {
    return Zv(this, void 0, void 0, function* () {
      const t2 = (yield this._request(fu, { code: e2, projectId: i2, redirectUri: n2, service: a2 })).integrationSlackProjectPost;
      return new Nf(this._request, t2);
    });
  }
};
var qD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(bu, { input: e2 })).integrationTemplateCreate;
      return new kN(this._request, i2);
    });
  }
};
var CD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Su, { id: e2 })).integrationTemplateDelete;
      return new Xp(this._request, i2);
    });
  }
};
var PD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2, n2, a2) {
    return Zv(this, void 0, void 0, function* () {
      const t2 = (yield this._request(yu, { code: e2, redirectUri: i2, scope: n2, subdomain: a2 })).integrationZendesk;
      return new mN(this._request, t2);
    });
  }
};
var jD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(gu, { input: e2 })).integrationsSettingsCreate;
      return new pN(this._request, i2);
    });
  }
};
var OD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Du, { id: e2, input: i2 })).integrationsSettingsUpdate;
      return new pN(this._request, n2);
    });
  }
};
var UD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Vu, { id: e2, labelId: i2 })).issueAddLabel;
      return new CN(this._request, n2);
    });
  }
};
var xD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(_u, Object.assign({ id: e2 }, i2))).issueArchive;
      return new NN(this._request, n2);
    });
  }
};
var BD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Fu, { input: e2 })).issueBatchCreate;
      return new hN(this._request, i2);
    });
  }
};
var RD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Au, { ids: e2, input: i2 })).issueBatchUpdate;
      return new hN(this._request, n2);
    });
  }
};
var ED = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Tu, { input: e2 })).issueCreate;
      return new CN(this._request, i2);
    });
  }
};
var LD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(wu, Object.assign({ id: e2 }, i2))).issueDelete;
      return new NN(this._request, n2);
    });
  }
};
var zD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2, n2) {
    return Zv(this, void 0, void 0, function* () {
      const a2 = (yield this._request(Iu, Object.assign({ asanaTeamName: e2, asanaToken: i2 }, n2))).issueImportCreateAsana;
      return new FN(this._request, a2);
    });
  }
};
var MD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(qu, Object.assign({ csvUrl: e2 }, i2))).issueImportCreateCSVJira;
      return new FN(this._request, n2);
    });
  }
};
var HD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2, n2) {
    return Zv(this, void 0, void 0, function* () {
      const a2 = (yield this._request(Cu, Object.assign({ clubhouseGroupName: e2, clubhouseToken: i2 }, n2))).issueImportCreateClubhouse;
      return new FN(this._request, a2);
    });
  }
};
var WD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Pu, e2)).issueImportCreateGithub;
      return new FN(this._request, i2);
    });
  }
};
var GD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2, n2, a2, t2) {
    return Zv(this, void 0, void 0, function* () {
      const d2 = (yield this._request(ju, Object.assign({ jiraEmail: e2, jiraHostname: i2, jiraProject: n2, jiraToken: a2 }, t2))).issueImportCreateJira;
      return new FN(this._request, d2);
    });
  }
};
var KD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Ou, { issueImportId: e2 })).issueImportDelete;
      return new VN(this._request, i2);
    });
  }
};
var JD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Uu, { issueImportId: e2, mapping: i2 })).issueImportProcess;
      return new FN(this._request, n2);
    });
  }
};
var $D = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(xu, { id: e2, input: i2 })).issueImportUpdate;
      return new FN(this._request, n2);
    });
  }
};
var ZD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Bu, Object.assign({ input: e2 }, i2))).issueLabelCreate;
      return new IN(this._request, n2);
    });
  }
};
var YD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Ru, { id: e2 })).issueLabelDelete;
      return new Xp(this._request, i2);
    });
  }
};
var QD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2, n2) {
    return Zv(this, void 0, void 0, function* () {
      const a2 = (yield this._request(Eu, Object.assign({ id: e2, input: i2 }, n2))).issueLabelUpdate;
      return new IN(this._request, a2);
    });
  }
};
var XD = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Lu, Object.assign({ input: e2 }, i2))).issueRelationCreate;
      return new xN(this._request, n2);
    });
  }
};
var eV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(zu, { id: e2 })).issueRelationDelete;
      return new Xp(this._request, i2);
    });
  }
};
var iV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Mu, { id: e2, input: i2 })).issueRelationUpdate;
      return new xN(this._request, n2);
    });
  }
};
var nV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Hu, { id: e2, reminderAt: i2 })).issueReminder;
      return new CN(this._request, n2);
    });
  }
};
var aV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Wu, { id: e2, labelId: i2 })).issueRemoveLabel;
      return new CN(this._request, n2);
    });
  }
};
var tV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Gu, Object.assign({ id: e2 }, i2))).issueSubscribe;
      return new CN(this._request, n2);
    });
  }
};
var dV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Ku, { id: e2 })).issueUnarchive;
      return new NN(this._request, i2);
    });
  }
};
var lV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Ju, Object.assign({ id: e2 }, i2))).issueUnsubscribe;
      return new CN(this._request, n2);
    });
  }
};
var rV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request($u, { id: e2, input: i2 })).issueUpdate;
      return new CN(this._request, n2);
    });
  }
};
var mV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Zu, { input: e2 })).joinOrganizationFromOnboarding;
      return new Tp(this._request, i2);
    });
  }
};
var oV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Yu, { organizationId: e2 })).leaveOrganization;
      return new Tp(this._request, i2);
    });
  }
};
var sV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Qu, e2)).logout;
      return new zN(this._request, i2);
    });
  }
};
var uV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Xu, e2)).logoutAllSessions;
      return new zN(this._request, i2);
    });
  }
};
var kV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(ek, e2)).logoutOtherSessions;
      return new zN(this._request, i2);
    });
  }
};
var vV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(ik, { sessionId: e2 })).logoutSession;
      return new zN(this._request, i2);
    });
  }
};
var pV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(nk, { id: e2 })).notificationArchive;
      return new GN(this._request, i2);
    });
  }
};
var cV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(ak, { input: e2 })).notificationArchiveAll;
      return new KN(this._request, i2);
    });
  }
};
var NV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2, n2) {
    return Zv(this, void 0, void 0, function* () {
      const a2 = (yield this._request(tk, { category: e2, channel: i2, subscribe: n2 })).notificationCategoryChannelSubscriptionUpdate;
      return new Xf(this._request, a2);
    });
  }
};
var hV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(dk, { input: e2, readAt: i2 })).notificationMarkReadAll;
      return new KN(this._request, n2);
    });
  }
};
var fV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(lk, { input: e2 })).notificationMarkUnreadAll;
      return new KN(this._request, i2);
    });
  }
};
var bV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(rk, { input: e2, snoozedUntilAt: i2 })).notificationSnoozeAll;
      return new KN(this._request, n2);
    });
  }
};
var SV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(mk, { input: e2 })).notificationSubscriptionCreate;
      return new th(this._request, i2);
    });
  }
};
var yV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(ok, { id: e2 })).notificationSubscriptionDelete;
      return new Xp(this._request, i2);
    });
  }
};
var gV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(sk, { id: e2, input: i2 })).notificationSubscriptionUpdate;
      return new th(this._request, n2);
    });
  }
};
var DV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(uk, { id: e2 })).notificationUnarchive;
      return new GN(this._request, i2);
    });
  }
};
var VV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(kk, { input: e2, unsnoozedAt: i2 })).notificationUnsnoozeAll;
      return new KN(this._request, n2);
    });
  }
};
var _V = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(vk, { id: e2, input: i2 })).notificationUpdate;
      return new ih(this._request, n2);
    });
  }
};
var FV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch() {
    return Zv(this, void 0, void 0, function* () {
      const e2 = (yield this._request(pk, {})).organizationCancelDelete;
      return new oh(this._request, e2);
    });
  }
};
var AV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(ck, { input: e2 })).organizationDelete;
      return new sh(this._request, i2);
    });
  }
};
var TV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch() {
    return Zv(this, void 0, void 0, function* () {
      const e2 = (yield this._request(Nk, {})).organizationDeleteChallenge;
      return new sh(this._request, e2);
    });
  }
};
var wV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(hk, { id: e2 })).organizationDomainDelete;
      return new Xp(this._request, i2);
    });
  }
};
var IV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(fk, { input: e2 })).organizationInviteCreate;
      return new Nh(this._request, i2);
    });
  }
};
var qV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(bk, { id: e2 })).organizationInviteDelete;
      return new Xp(this._request, i2);
    });
  }
};
var CV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Sk, { id: e2, input: i2 })).organizationInviteUpdate;
      return new Nh(this._request, n2);
    });
  }
};
var PV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch() {
    return Zv(this, void 0, void 0, function* () {
      const e2 = (yield this._request(yk, {})).organizationStartTrial;
      return new Sh(this._request, e2);
    });
  }
};
var jV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(gk, { input: e2 })).organizationStartTrialForPlan;
      return new Sh(this._request, i2);
    });
  }
};
var OV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Dk, { input: e2 })).organizationUpdate;
      return new bh(this._request, i2);
    });
  }
};
var UV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Vk, Object.assign({ id: e2 }, i2))).projectArchive;
      return new _h(this._request, n2);
    });
  }
};
var xV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(_k, Object.assign({ input: e2 }, i2))).projectCreate;
      return new Bh(this._request, n2);
    });
  }
};
var BV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Fk, { id: e2 })).projectDelete;
      return new _h(this._request, i2);
    });
  }
};
var RV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Ak, { input: e2 })).projectMilestoneCreate;
      return new Oh(this._request, i2);
    });
  }
};
var EV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Tk, { id: e2 })).projectMilestoneDelete;
      return new Xp(this._request, i2);
    });
  }
};
var LV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(wk, { id: e2, input: i2 })).projectMilestoneUpdate;
      return new Oh(this._request, n2);
    });
  }
};
var zV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Ik, { input: e2 })).projectRelationCreate;
      return new Lh(this._request, i2);
    });
  }
};
var MV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(qk, { id: e2 })).projectRelationDelete;
      return new Xp(this._request, i2);
    });
  }
};
var HV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Ck, { id: e2, input: i2 })).projectRelationUpdate;
      return new Lh(this._request, n2);
    });
  }
};
var WV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Pk, { id: e2 })).projectStatusArchive;
      return new Wh(this._request, i2);
    });
  }
};
var GV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(jk, { input: e2 })).projectStatusCreate;
      return new Jh(this._request, i2);
    });
  }
};
var KV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Ok, { id: e2 })).projectStatusUnarchive;
      return new Wh(this._request, i2);
    });
  }
};
var JV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Uk, { id: e2, input: i2 })).projectStatusUpdate;
      return new Jh(this._request, n2);
    });
  }
};
var $V = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(xk, { id: e2 })).projectUnarchive;
      return new _h(this._request, i2);
    });
  }
};
var ZV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Bk, { id: e2, input: i2 })).projectUpdate;
      return new Bh(this._request, n2);
    });
  }
};
var YV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Rk, { id: e2 })).projectUpdateArchive;
      return new Zh(this._request, i2);
    });
  }
};
var QV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Ek, { input: e2 })).projectUpdateCreate;
      return new Qh(this._request, i2);
    });
  }
};
var XV = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Lk, { id: e2 })).projectUpdateDelete;
      return new Xp(this._request, i2);
    });
  }
};
var e_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(zk, { id: e2 })).projectUpdateUnarchive;
      return new Zh(this._request, i2);
    });
  }
};
var i_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Mk, { id: e2, input: i2 })).projectUpdateUpdate;
      return new Qh(this._request, n2);
    });
  }
};
var n_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Hk, { input: e2 })).pushSubscriptionCreate;
      return new nf(this._request, i2);
    });
  }
};
var a_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Wk, { id: e2 })).pushSubscriptionDelete;
      return new nf(this._request, i2);
    });
  }
};
var t_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Gk, { input: e2 })).reactionCreate;
      return new rf(this._request, i2);
    });
  }
};
var d_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Kk, { id: e2 })).reactionDelete;
      return new Xp(this._request, i2);
    });
  }
};
var l_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Jk, Object.assign({ id: e2 }, i2))).refreshGoogleSheetsData;
      return new mN(this._request, n2);
    });
  }
};
var r_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request($k, { id: e2 })).resendOrganizationInvite;
      return new Xp(this._request, i2);
    });
  }
};
var m_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Zk, { email: e2 })).resendOrganizationInviteByEmail;
      return new Xp(this._request, i2);
    });
  }
};
var o_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Yk, { id: e2 })).roadmapArchive;
      return new of(this._request, i2);
    });
  }
};
var s_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Qk, { input: e2 })).roadmapCreate;
      return new uf(this._request, i2);
    });
  }
};
var u_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Xk, { id: e2 })).roadmapDelete;
      return new Xp(this._request, i2);
    });
  }
};
var k_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(ev, { input: e2 })).roadmapToProjectCreate;
      return new pf(this._request, i2);
    });
  }
};
var v_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(iv, { id: e2 })).roadmapToProjectDelete;
      return new Xp(this._request, i2);
    });
  }
};
var p_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(nv, { id: e2, input: i2 })).roadmapToProjectUpdate;
      return new pf(this._request, n2);
    });
  }
};
var c_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(av, { id: e2 })).roadmapUnarchive;
      return new of(this._request, i2);
    });
  }
};
var N_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(tv, { id: e2, input: i2 })).roadmapUpdate;
      return new uf(this._request, n2);
    });
  }
};
var h_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(dv, { input: e2 })).samlTokenUserAccountAuth;
      return new bp(this._request, i2);
    });
  }
};
var f_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(lv, Object.assign({ input: e2 }, i2))).teamCreate;
      return new wf(this._request, n2);
    });
  }
};
var b_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(rv, { id: e2 })).teamCyclesDelete;
      return new wf(this._request, i2);
    });
  }
};
var S_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(mv, { id: e2 })).teamDelete;
      return new Xp(this._request, i2);
    });
  }
};
var y_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(ov, { id: e2 })).teamKeyDelete;
      return new Xp(this._request, i2);
    });
  }
};
var g_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(sv, { input: e2 })).teamMembershipCreate;
      return new Af(this._request, i2);
    });
  }
};
var D_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(uv, Object.assign({ id: e2 }, i2))).teamMembershipDelete;
      return new Xp(this._request, n2);
    });
  }
};
var V_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(kv, { id: e2, input: i2 })).teamMembershipUpdate;
      return new Af(this._request, n2);
    });
  }
};
var __ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(vv, { id: e2 })).teamUnarchive;
      return new Df(this._request, i2);
    });
  }
};
var F_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2, n2) {
    return Zv(this, void 0, void 0, function* () {
      const a2 = (yield this._request(pv, Object.assign({ id: e2, input: i2 }, n2))).teamUpdate;
      return new wf(this._request, a2);
    });
  }
};
var A_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(cv, { input: e2 })).templateCreate;
      return new Cf(this._request, i2);
    });
  }
};
var T_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Nv, { id: e2 })).templateDelete;
      return new Xp(this._request, i2);
    });
  }
};
var w_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(hv, { id: e2, input: i2 })).templateUpdate;
      return new Cf(this._request, n2);
    });
  }
};
var I_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(fv, { input: e2 })).timeScheduleCreate;
      return new Uf(this._request, i2);
    });
  }
};
var q_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(bv, { id: e2 })).timeScheduleDelete;
      return new Xp(this._request, i2);
    });
  }
};
var C_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Sv, { id: e2 })).timeScheduleRefreshIntegrationSchedule;
      return new Uf(this._request, i2);
    });
  }
};
var P_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(yv, { id: e2, input: i2 })).timeScheduleUpdate;
      return new Uf(this._request, n2);
    });
  }
};
var j_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(gv, { externalId: e2, input: i2 })).timeScheduleUpsertExternal;
      return new Uf(this._request, n2);
    });
  }
};
var O_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Dv, { input: e2 })).triageResponsibilityCreate;
      return new Ef(this._request, i2);
    });
  }
};
var U_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Vv, { id: e2 })).triageResponsibilityDelete;
      return new Xp(this._request, i2);
    });
  }
};
var x_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(_v, { id: e2, input: i2 })).triageResponsibilityUpdate;
      return new Ef(this._request, n2);
    });
  }
};
var B_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Fv, { id: e2 })).userDemoteAdmin;
      return new Wf(this._request, i2);
    });
  }
};
var R_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Av, { id: e2 })).userDemoteMember;
      return new Wf(this._request, i2);
    });
  }
};
var E_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Tv, { code: e2, redirectUri: i2 })).userDiscordConnect;
      return new $f(this._request, n2);
    });
  }
};
var L_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(wv, { service: e2 })).userExternalUserDisconnect;
      return new $f(this._request, i2);
    });
  }
};
var z_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Iv, { flag: e2, operation: i2 })).userFlagUpdate;
      return new Yf(this._request, n2);
    });
  }
};
var M_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(qv, { id: e2 })).userPromoteAdmin;
      return new Wf(this._request, i2);
    });
  }
};
var H_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Cv, { id: e2 })).userPromoteMember;
      return new Wf(this._request, i2);
    });
  }
};
var W_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Pv, e2)).userSettingsFlagsReset;
      return new Qf(this._request, i2);
    });
  }
};
var G_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(jv, { id: e2, input: i2 })).userSettingsUpdate;
      return new Xf(this._request, n2);
    });
  }
};
var K_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Ov, { id: e2 })).userSuspend;
      return new Wf(this._request, i2);
    });
  }
};
var J_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Uv, { id: e2 })).userUnsuspend;
      return new Wf(this._request, i2);
    });
  }
};
var $_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(xv, { id: e2, input: i2 })).userUpdate;
      return new $f(this._request, n2);
    });
  }
};
var Z_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Bv, { input: e2 })).viewPreferencesCreate;
      return new ib(this._request, i2);
    });
  }
};
var Y_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Rv, { id: e2 })).viewPreferencesDelete;
      return new Xp(this._request, i2);
    });
  }
};
var Q_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Ev, { id: e2, input: i2 })).viewPreferencesUpdate;
      return new ib(this._request, n2);
    });
  }
};
var X_ = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Lv, { input: e2 })).webhookCreate;
      return new lb(this._request, i2);
    });
  }
};
var eF = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(zv, { id: e2 })).webhookDelete;
      return new Xp(this._request, i2);
    });
  }
};
var iF = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Mv, { id: e2, input: i2 })).webhookUpdate;
      return new lb(this._request, n2);
    });
  }
};
var nF = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Hv, { id: e2 })).workflowStateArchive;
      return new mb(this._request, i2);
    });
  }
};
var aF = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Wv, { input: e2 })).workflowStateCreate;
      return new sb(this._request, i2);
    });
  }
};
var tF = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  fetch(e2, i2) {
    return Zv(this, void 0, void 0, function* () {
      const n2 = (yield this._request(Gv, { id: e2, input: i2 })).workflowStateUpdate;
      return new sb(this._request, n2);
    });
  }
};
var NF = class extends Yv {
  constructor(e2, i2) {
    super(e2), this._variables = i2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(td, e2)).comment.children;
      return new Vp(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var bF = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(od, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).customView.issues;
      return new fN(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var yF = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(kd, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).customView.projects;
      return new Fh(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var FF = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Ad, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).cycle.issues;
      return new fN(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var AF = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Td, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).cycle.uncompletedIssuesUponClose;
      return new fN(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var TF = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(qd, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).document.comments;
      return new Vp(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var wF = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Ed, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).favorite.children;
      return new Ac(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var IF = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Md, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).initiative.history;
      return new Hc(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var qF = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Hd, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).initiative.links;
      return new yc(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var CF = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Wd, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).initiative.projects;
      return new Fh(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var PF = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Yd, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).initiativeUpdate.comments;
      return new Vp(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var jF = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(rl, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).issue.attachments;
      return new kp(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var UF = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(ol, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).issue.children;
      return new fN(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var xF = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(sl, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).issue.comments;
      return new Vp(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var BF = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(ul, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).issue.history;
      return new yN(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var RF = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(kl, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).issue.inverseRelations;
      return new ON(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var EF = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(vl, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).issue.labels;
      return new wN(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var LF = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(pl, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).issue.needs;
      return new Rp(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var zF = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(cl, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).issue.relations;
      return new ON(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var MF = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Nl, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).issue.subscribers;
      return new Kf(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var HF = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Dl, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).issueLabel.children;
      return new wN(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var WF = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Vl, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).issueLabel.issues;
      return new fN(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var nA = class extends Yv {
  constructor(e2, i2) {
    super(e2), this._variables = i2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Jl, e2)).organization.integrations;
      return new lN(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var aA = class extends Yv {
  constructor(e2, i2) {
    super(e2), this._variables = i2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request($l, e2)).organization.labels;
      return new wN(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var dA = class extends Yv {
  constructor(e2, i2) {
    super(e2), this._variables = i2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Yl, e2)).organization.teams;
      return new Vf(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var lA = class extends Yv {
  constructor(e2, i2) {
    super(e2), this._variables = i2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Ql, e2)).organization.templates;
      return new qf(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var rA = class extends Yv {
  constructor(e2, i2) {
    super(e2), this._variables = i2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Xl, e2)).organization.users;
      return new Kf(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var mA = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(tr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).project.comments;
      return new Vp(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var sA = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(lr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).project.documents;
      return new nc(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var uA = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(rr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).project.externalLinks;
      return new yc(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var kA = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(mr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).project.history;
      return new wh(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var vA = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(or, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).project.initiatives;
      return new zc(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var pA = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(sr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).project.inverseRelations;
      return new Eh(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var cA = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(ur, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).project.issues;
      return new fN(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var NA = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(kr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).project.members;
      return new Kf(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var hA = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(vr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).project.needs;
      return new Rp(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var fA = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(pr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).project.projectMilestones;
      return new qh(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var bA = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(cr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).project.projectUpdates;
      return new Yh(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var SA = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Nr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).project.relations;
      return new Eh(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var yA = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(hr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).project.teams;
      return new Vf(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var DA = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(yr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).projectMilestone.issues;
      return new fN(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var VA = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Tr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).projectUpdate.comments;
      return new Vp(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var _A = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(jr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).roadmap.projects;
      return new Fh(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var wA = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Gr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).team.cycles;
      return new Zp(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var IA = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Kr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).team.gitAutomationStates;
      return new qc(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var qA = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Jr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).team.issues;
      return new fN(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var CA = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request($r, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).team.labels;
      return new wN(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var PA = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Zr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).team.members;
      return new Kf(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var jA = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Yr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).team.memberships;
      return new Ff(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var OA = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Qr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).team.projects;
      return new Fh(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var UA = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Xr, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).team.states;
      return new ob(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var xA = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(em, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).team.templates;
      return new qf(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var BA = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(im, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).team.webhooks;
      return new tb(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var EA = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(pm, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).user.assignedIssues;
      return new fN(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var LA = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(cm, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).user.createdIssues;
      return new fN(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var zA = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(Nm, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).user.drafts;
      return new uc(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var MA = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(hm, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).user.teamMemberships;
      return new Ff(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var HA = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(fm, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).user.teams;
      return new Vf(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var gT = class extends Yv {
  constructor(e2, i2, n2) {
    super(e2), this._id = i2, this._variables = n2;
  }
  fetch(e2) {
    return Zv(this, void 0, void 0, function* () {
      const i2 = (yield this._request(ao, Object.assign(Object.assign({ id: this._id }, this._variables), e2))).workflowState.issues;
      return new fN(this._request, (i3) => this.fetch(Qv(Object.assign(Object.assign(Object.assign({}, this._variables), e2), i3))), i2);
    });
  }
};
var DT = class extends Yv {
  constructor(e2) {
    super(e2);
  }
  administrableTeams(e2) {
    return new ub(this._request).fetch(e2);
  }
  apiKeys(e2) {
    return new kb(this._request).fetch(e2);
  }
  applicationInfo(e2) {
    return new vb(this._request).fetch(e2);
  }
  applicationWithAuthorization(e2, i2, n2) {
    return new pb(this._request).fetch(e2, i2, n2);
  }
  attachment(e2) {
    return new cb(this._request).fetch(e2);
  }
  attachmentIssue(e2) {
    return new Nb(this._request).fetch(e2);
  }
  attachments(e2) {
    return new hb(this._request).fetch(e2);
  }
  attachmentsForURL(e2, i2) {
    return new fb(this._request).fetch(e2, i2);
  }
  auditEntries(e2) {
    return new bb(this._request).fetch(e2);
  }
  get auditEntryTypes() {
    return new Sb(this._request).fetch();
  }
  get authenticationSessions() {
    return new yb(this._request).fetch();
  }
  get availableUsers() {
    return new gb(this._request).fetch();
  }
  comment(e2) {
    return new Db(this._request).fetch(e2);
  }
  comments(e2) {
    return new Vb(this._request).fetch(e2);
  }
  customView(e2) {
    return new _b(this._request).fetch(e2);
  }
  customViewHasSubscribers(e2) {
    return new Fb(this._request).fetch(e2);
  }
  customViews(e2) {
    return new Ab(this._request).fetch(e2);
  }
  customer(e2) {
    return new Tb(this._request).fetch(e2);
  }
  customerNeed(e2) {
    return new wb(this._request).fetch(e2);
  }
  customerNeeds(e2) {
    return new Ib(this._request).fetch(e2);
  }
  customerStatus(e2) {
    return new qb(this._request).fetch(e2);
  }
  customerStatuses(e2) {
    return new Cb(this._request).fetch(e2);
  }
  customerTier(e2) {
    return new Pb(this._request).fetch(e2);
  }
  customerTiers(e2) {
    return new jb(this._request).fetch(e2);
  }
  customers(e2) {
    return new Ob(this._request).fetch(e2);
  }
  cycle(e2) {
    return new Ub(this._request).fetch(e2);
  }
  cycles(e2) {
    return new xb(this._request).fetch(e2);
  }
  document(e2) {
    return new Bb(this._request).fetch(e2);
  }
  documentContentHistory(e2) {
    return new Rb(this._request).fetch(e2);
  }
  documents(e2) {
    return new Eb(this._request).fetch(e2);
  }
  emoji(e2) {
    return new Lb(this._request).fetch(e2);
  }
  emojis(e2) {
    return new zb(this._request).fetch(e2);
  }
  entityExternalLink(e2) {
    return new Mb(this._request).fetch(e2);
  }
  externalUser(e2) {
    return new Hb(this._request).fetch(e2);
  }
  externalUsers(e2) {
    return new Wb(this._request).fetch(e2);
  }
  favorite(e2) {
    return new Gb(this._request).fetch(e2);
  }
  favorites(e2) {
    return new Kb(this._request).fetch(e2);
  }
  initiative(e2) {
    return new Jb(this._request).fetch(e2);
  }
  initiativeRelation(e2) {
    return new $b(this._request).fetch(e2);
  }
  initiativeRelations(e2) {
    return new Zb(this._request).fetch(e2);
  }
  initiativeToProject(e2) {
    return new Yb(this._request).fetch(e2);
  }
  initiativeToProjects(e2) {
    return new Qb(this._request).fetch(e2);
  }
  initiativeUpdate(e2) {
    return new Xb(this._request).fetch(e2);
  }
  initiativeUpdates(e2) {
    return new eS(this._request).fetch(e2);
  }
  initiatives(e2) {
    return new iS(this._request).fetch(e2);
  }
  integration(e2) {
    return new nS(this._request).fetch(e2);
  }
  integrationHasScopes(e2, i2) {
    return new aS(this._request).fetch(e2, i2);
  }
  integrationTemplate(e2) {
    return new tS(this._request).fetch(e2);
  }
  integrationTemplates(e2) {
    return new dS(this._request).fetch(e2);
  }
  integrations(e2) {
    return new lS(this._request).fetch(e2);
  }
  integrationsSettings(e2) {
    return new rS(this._request).fetch(e2);
  }
  issue(e2) {
    return new mS(this._request).fetch(e2);
  }
  issueFigmaFileKeySearch(e2, i2) {
    return new oS(this._request).fetch(e2, i2);
  }
  issueFilterSuggestion(e2, i2) {
    return new sS(this._request).fetch(e2, i2);
  }
  issueImportCheckCSV(e2, i2) {
    return new uS(this._request).fetch(e2, i2);
  }
  issueImportCheckSync(e2) {
    return new kS(this._request).fetch(e2);
  }
  issueImportJqlCheck(e2, i2, n2, a2, t2) {
    return new vS(this._request).fetch(e2, i2, n2, a2, t2);
  }
  issueLabel(e2) {
    return new pS(this._request).fetch(e2);
  }
  issueLabels(e2) {
    return new cS(this._request).fetch(e2);
  }
  get issuePriorityValues() {
    return new NS(this._request).fetch();
  }
  issueRelation(e2) {
    return new hS(this._request).fetch(e2);
  }
  issueRelations(e2) {
    return new fS(this._request).fetch(e2);
  }
  issueSearch(e2) {
    return new bS(this._request).fetch(e2);
  }
  issueTitleSuggestionFromCustomerRequest(e2) {
    return new SS(this._request).fetch(e2);
  }
  issueVcsBranchSearch(e2) {
    return new yS(this._request).fetch(e2);
  }
  issues(e2) {
    return new gS(this._request).fetch(e2);
  }
  notification(e2) {
    return new DS(this._request).fetch(e2);
  }
  notificationSubscription(e2) {
    return new VS(this._request).fetch(e2);
  }
  notificationSubscriptions(e2) {
    return new _S(this._request).fetch(e2);
  }
  notifications(e2) {
    return new FS(this._request).fetch(e2);
  }
  get organization() {
    return new AS(this._request).fetch();
  }
  organizationExists(e2) {
    return new TS(this._request).fetch(e2);
  }
  organizationInvite(e2) {
    return new wS(this._request).fetch(e2);
  }
  organizationInvites(e2) {
    return new IS(this._request).fetch(e2);
  }
  project(e2) {
    return new qS(this._request).fetch(e2);
  }
  projectFilterSuggestion(e2) {
    return new CS(this._request).fetch(e2);
  }
  projectMilestone(e2) {
    return new PS(this._request).fetch(e2);
  }
  projectMilestones(e2) {
    return new jS(this._request).fetch(e2);
  }
  projectRelation(e2) {
    return new OS(this._request).fetch(e2);
  }
  projectRelations(e2) {
    return new US(this._request).fetch(e2);
  }
  projectStatus(e2) {
    return new xS(this._request).fetch(e2);
  }
  projectStatuses(e2) {
    return new BS(this._request).fetch(e2);
  }
  projectUpdate(e2) {
    return new RS(this._request).fetch(e2);
  }
  projectUpdates(e2) {
    return new ES(this._request).fetch(e2);
  }
  projects(e2) {
    return new LS(this._request).fetch(e2);
  }
  pushSubscriptionTest(e2) {
    return new zS(this._request).fetch(e2);
  }
  get rateLimitStatus() {
    return new MS(this._request).fetch();
  }
  roadmap(e2) {
    return new HS(this._request).fetch(e2);
  }
  roadmapToProject(e2) {
    return new WS(this._request).fetch(e2);
  }
  roadmapToProjects(e2) {
    return new GS(this._request).fetch(e2);
  }
  roadmaps(e2) {
    return new KS(this._request).fetch(e2);
  }
  searchDocuments(e2, i2) {
    return new JS(this._request).fetch(e2, i2);
  }
  searchIssues(e2, i2) {
    return new $S(this._request).fetch(e2, i2);
  }
  searchProjects(e2, i2) {
    return new ZS(this._request).fetch(e2, i2);
  }
  ssoUrlFromEmail(e2, i2) {
    return new YS(this._request).fetch(e2, i2);
  }
  team(e2) {
    return new QS(this._request).fetch(e2);
  }
  teamMembership(e2) {
    return new XS(this._request).fetch(e2);
  }
  teamMemberships(e2) {
    return new ey(this._request).fetch(e2);
  }
  teams(e2) {
    return new iy(this._request).fetch(e2);
  }
  template(e2) {
    return new ny(this._request).fetch(e2);
  }
  get templates() {
    return new ay(this._request).fetch();
  }
  templatesForIntegration(e2) {
    return new ty(this._request).fetch(e2);
  }
  timeSchedule(e2) {
    return new dy(this._request).fetch(e2);
  }
  timeSchedules(e2) {
    return new ly(this._request).fetch(e2);
  }
  triageResponsibilities(e2) {
    return new ry(this._request).fetch(e2);
  }
  triageResponsibility(e2) {
    return new my(this._request).fetch(e2);
  }
  user(e2) {
    return new oy(this._request).fetch(e2);
  }
  get userSettings() {
    return new sy(this._request).fetch();
  }
  users(e2) {
    return new uy(this._request).fetch(e2);
  }
  get verifyGitHubEnterpriseServerInstallation() {
    return new ky(this._request).fetch();
  }
  get viewer() {
    return new vy(this._request).fetch();
  }
  webhook(e2) {
    return new py(this._request).fetch(e2);
  }
  webhooks(e2) {
    return new cy(this._request).fetch(e2);
  }
  workflowState(e2) {
    return new Ny(this._request).fetch(e2);
  }
  workflowStates(e2) {
    return new hy(this._request).fetch(e2);
  }
  airbyteIntegrationConnect(e2) {
    return new fy(this._request).fetch(e2);
  }
  createAttachment(e2) {
    return new by(this._request).fetch(e2);
  }
  deleteAttachment(e2) {
    return new Sy(this._request).fetch(e2);
  }
  attachmentLinkDiscord(e2, i2, n2, a2, t2) {
    return new yy(this._request).fetch(e2, i2, n2, a2, t2);
  }
  attachmentLinkFront(e2, i2, n2) {
    return new gy(this._request).fetch(e2, i2, n2);
  }
  attachmentLinkGitHubIssue(e2, i2, n2) {
    return new Dy(this._request).fetch(e2, i2, n2);
  }
  attachmentLinkGitHubPR(e2, i2, n2) {
    return new Vy(this._request).fetch(e2, i2, n2);
  }
  attachmentLinkGitLabMR(e2, i2, n2, a2, t2) {
    return new _y(this._request).fetch(e2, i2, n2, a2, t2);
  }
  attachmentLinkIntercom(e2, i2, n2) {
    return new Fy(this._request).fetch(e2, i2, n2);
  }
  attachmentLinkJiraIssue(e2, i2, n2) {
    return new Ay(this._request).fetch(e2, i2, n2);
  }
  attachmentLinkSlack(e2, i2, n2) {
    return new Ty(this._request).fetch(e2, i2, n2);
  }
  attachmentLinkURL(e2, i2, n2) {
    return new wy(this._request).fetch(e2, i2, n2);
  }
  attachmentLinkZendesk(e2, i2, n2) {
    return new Iy(this._request).fetch(e2, i2, n2);
  }
  attachmentSyncToSlack(e2) {
    return new qy(this._request).fetch(e2);
  }
  updateAttachment(e2, i2) {
    return new Cy(this._request).fetch(e2, i2);
  }
  createComment(e2) {
    return new Py(this._request).fetch(e2);
  }
  deleteComment(e2) {
    return new jy(this._request).fetch(e2);
  }
  commentResolve(e2, i2) {
    return new Oy(this._request).fetch(e2, i2);
  }
  commentUnresolve(e2) {
    return new Uy(this._request).fetch(e2);
  }
  updateComment(e2, i2) {
    return new xy(this._request).fetch(e2, i2);
  }
  createContact(e2) {
    return new By(this._request).fetch(e2);
  }
  createCsvExportReport(e2) {
    return new Ry(this._request).fetch(e2);
  }
  createInitiativeUpdateReminder(e2, i2) {
    return new Ey(this._request).fetch(e2, i2);
  }
  createOrganizationFromOnboarding(e2, i2) {
    return new Ly(this._request).fetch(e2, i2);
  }
  createProjectUpdateReminder(e2, i2) {
    return new zy(this._request).fetch(e2, i2);
  }
  createCustomView(e2) {
    return new My(this._request).fetch(e2);
  }
  deleteCustomView(e2) {
    return new Hy(this._request).fetch(e2);
  }
  updateCustomView(e2, i2) {
    return new Wy(this._request).fetch(e2, i2);
  }
  createCustomer(e2) {
    return new Gy(this._request).fetch(e2);
  }
  deleteCustomer(e2) {
    return new Ky(this._request).fetch(e2);
  }
  customerMerge(e2, i2) {
    return new Jy(this._request).fetch(e2, i2);
  }
  archiveCustomerNeed(e2) {
    return new $y(this._request).fetch(e2);
  }
  createCustomerNeed(e2) {
    return new Zy(this._request).fetch(e2);
  }
  customerNeedCreateFromAttachment(e2) {
    return new Yy(this._request).fetch(e2);
  }
  deleteCustomerNeed(e2, i2) {
    return new Qy(this._request).fetch(e2, i2);
  }
  unarchiveCustomerNeed(e2) {
    return new Xy(this._request).fetch(e2);
  }
  updateCustomerNeed(e2, i2) {
    return new eg(this._request).fetch(e2, i2);
  }
  createCustomerTier(e2) {
    return new ig(this._request).fetch(e2);
  }
  deleteCustomerTier(e2) {
    return new ng(this._request).fetch(e2);
  }
  updateCustomerTier(e2, i2) {
    return new ag(this._request).fetch(e2, i2);
  }
  updateCustomer(e2, i2) {
    return new tg(this._request).fetch(e2, i2);
  }
  customerUpsert(e2) {
    return new dg(this._request).fetch(e2);
  }
  archiveCycle(e2) {
    return new lg(this._request).fetch(e2);
  }
  createCycle(e2) {
    return new rg(this._request).fetch(e2);
  }
  cycleShiftAll(e2) {
    return new mg(this._request).fetch(e2);
  }
  cycleStartUpcomingCycleToday(e2) {
    return new og(this._request).fetch(e2);
  }
  updateCycle(e2, i2) {
    return new sg(this._request).fetch(e2, i2);
  }
  createDocument(e2) {
    return new ug(this._request).fetch(e2);
  }
  deleteDocument(e2) {
    return new kg(this._request).fetch(e2);
  }
  unarchiveDocument(e2) {
    return new vg(this._request).fetch(e2);
  }
  updateDocument(e2, i2) {
    return new pg(this._request).fetch(e2, i2);
  }
  createEmailIntakeAddress(e2) {
    return new cg(this._request).fetch(e2);
  }
  deleteEmailIntakeAddress(e2) {
    return new Ng(this._request).fetch(e2);
  }
  emailIntakeAddressRotate(e2) {
    return new hg(this._request).fetch(e2);
  }
  updateEmailIntakeAddress(e2, i2) {
    return new fg(this._request).fetch(e2, i2);
  }
  emailTokenUserAccountAuth(e2) {
    return new bg(this._request).fetch(e2);
  }
  emailUnsubscribe(e2) {
    return new Sg(this._request).fetch(e2);
  }
  emailUserAccountAuthChallenge(e2) {
    return new yg(this._request).fetch(e2);
  }
  createEmoji(e2) {
    return new gg(this._request).fetch(e2);
  }
  deleteEmoji(e2) {
    return new Dg(this._request).fetch(e2);
  }
  createEntityExternalLink(e2) {
    return new Vg(this._request).fetch(e2);
  }
  deleteEntityExternalLink(e2) {
    return new _g(this._request).fetch(e2);
  }
  updateEntityExternalLink(e2, i2) {
    return new Fg(this._request).fetch(e2, i2);
  }
  createFavorite(e2) {
    return new Ag(this._request).fetch(e2);
  }
  deleteFavorite(e2) {
    return new Tg(this._request).fetch(e2);
  }
  updateFavorite(e2, i2) {
    return new wg(this._request).fetch(e2, i2);
  }
  fileUpload(e2, i2, n2, a2) {
    return new Ig(this._request).fetch(e2, i2, n2, a2);
  }
  createGitAutomationState(e2) {
    return new qg(this._request).fetch(e2);
  }
  deleteGitAutomationState(e2) {
    return new Cg(this._request).fetch(e2);
  }
  updateGitAutomationState(e2, i2) {
    return new Pg(this._request).fetch(e2, i2);
  }
  createGitAutomationTargetBranch(e2) {
    return new jg(this._request).fetch(e2);
  }
  deleteGitAutomationTargetBranch(e2) {
    return new Og(this._request).fetch(e2);
  }
  updateGitAutomationTargetBranch(e2, i2) {
    return new Ug(this._request).fetch(e2, i2);
  }
  googleUserAccountAuth(e2) {
    return new xg(this._request).fetch(e2);
  }
  imageUploadFromUrl(e2) {
    return new Bg(this._request).fetch(e2);
  }
  importFileUpload(e2, i2, n2, a2) {
    return new Rg(this._request).fetch(e2, i2, n2, a2);
  }
  archiveInitiative(e2) {
    return new Eg(this._request).fetch(e2);
  }
  createInitiative(e2) {
    return new Lg(this._request).fetch(e2);
  }
  deleteInitiative(e2) {
    return new zg(this._request).fetch(e2);
  }
  createInitiativeRelation(e2) {
    return new Mg(this._request).fetch(e2);
  }
  deleteInitiativeRelation(e2) {
    return new Hg(this._request).fetch(e2);
  }
  updateInitiativeRelation(e2, i2) {
    return new Wg(this._request).fetch(e2, i2);
  }
  createInitiativeToProject(e2) {
    return new Gg(this._request).fetch(e2);
  }
  deleteInitiativeToProject(e2) {
    return new Kg(this._request).fetch(e2);
  }
  updateInitiativeToProject(e2, i2) {
    return new Jg(this._request).fetch(e2, i2);
  }
  unarchiveInitiative(e2) {
    return new $g(this._request).fetch(e2);
  }
  updateInitiative(e2, i2) {
    return new Zg(this._request).fetch(e2, i2);
  }
  archiveInitiativeUpdate(e2) {
    return new Yg(this._request).fetch(e2);
  }
  createInitiativeUpdate(e2) {
    return new Qg(this._request).fetch(e2);
  }
  unarchiveInitiativeUpdate(e2) {
    return new Xg(this._request).fetch(e2);
  }
  updateInitiativeUpdate(e2, i2) {
    return new eD(this._request).fetch(e2, i2);
  }
  archiveIntegration(e2) {
    return new iD(this._request).fetch(e2);
  }
  integrationAsksConnectChannel(e2, i2) {
    return new nD(this._request).fetch(e2, i2);
  }
  deleteIntegration(e2) {
    return new aD(this._request).fetch(e2);
  }
  integrationDiscord(e2, i2) {
    return new tD(this._request).fetch(e2, i2);
  }
  integrationFigma(e2, i2) {
    return new dD(this._request).fetch(e2, i2);
  }
  integrationFront(e2, i2) {
    return new lD(this._request).fetch(e2, i2);
  }
  integrationGitHubEnterpriseServerConnect(e2, i2) {
    return new rD(this._request).fetch(e2, i2);
  }
  integrationGitHubPersonal(e2) {
    return new mD(this._request).fetch(e2);
  }
  get createIntegrationGithubCommit() {
    return new oD(this._request).fetch();
  }
  integrationGithubConnect(e2, i2) {
    return new sD(this._request).fetch(e2, i2);
  }
  integrationGithubImportConnect(e2, i2) {
    return new uD(this._request).fetch(e2, i2);
  }
  integrationGithubImportRefresh(e2) {
    return new kD(this._request).fetch(e2);
  }
  integrationGitlabConnect(e2, i2) {
    return new vD(this._request).fetch(e2, i2);
  }
  integrationGoogleSheets(e2) {
    return new pD(this._request).fetch(e2);
  }
  integrationIntercom(e2, i2, n2) {
    return new cD(this._request).fetch(e2, i2, n2);
  }
  get deleteIntegrationIntercom() {
    return new ND(this._request).fetch();
  }
  updateIntegrationIntercomSettings(e2) {
    return new hD(this._request).fetch(e2);
  }
  integrationJiraPersonal(e2) {
    return new fD(this._request).fetch(e2);
  }
  get integrationLoom() {
    return new bD(this._request).fetch();
  }
  integrationRequest(e2) {
    return new SD(this._request).fetch(e2);
  }
  integrationSentryConnect(e2, i2, n2) {
    return new yD(this._request).fetch(e2, i2, n2);
  }
  integrationSlack(e2, i2, n2) {
    return new gD(this._request).fetch(e2, i2, n2);
  }
  integrationSlackAsks(e2, i2) {
    return new DD(this._request).fetch(e2, i2);
  }
  integrationSlackCustomViewNotifications(e2, i2, n2) {
    return new VD(this._request).fetch(e2, i2, n2);
  }
  integrationSlackCustomerChannelLink(e2, i2, n2) {
    return new _D(this._request).fetch(e2, i2, n2);
  }
  integrationSlackImportEmojis(e2, i2) {
    return new FD(this._request).fetch(e2, i2);
  }
  integrationSlackOrgProjectUpdatesPost(e2, i2) {
    return new AD(this._request).fetch(e2, i2);
  }
  integrationSlackPersonal(e2, i2) {
    return new TD(this._request).fetch(e2, i2);
  }
  integrationSlackPost(e2, i2, n2, a2) {
    return new wD(this._request).fetch(e2, i2, n2, a2);
  }
  integrationSlackProjectPost(e2, i2, n2, a2) {
    return new ID(this._request).fetch(e2, i2, n2, a2);
  }
  createIntegrationTemplate(e2) {
    return new qD(this._request).fetch(e2);
  }
  deleteIntegrationTemplate(e2) {
    return new CD(this._request).fetch(e2);
  }
  integrationZendesk(e2, i2, n2, a2) {
    return new PD(this._request).fetch(e2, i2, n2, a2);
  }
  createIntegrationsSettings(e2) {
    return new jD(this._request).fetch(e2);
  }
  updateIntegrationsSettings(e2, i2) {
    return new OD(this._request).fetch(e2, i2);
  }
  issueAddLabel(e2, i2) {
    return new UD(this._request).fetch(e2, i2);
  }
  archiveIssue(e2, i2) {
    return new xD(this._request).fetch(e2, i2);
  }
  createIssueBatch(e2) {
    return new BD(this._request).fetch(e2);
  }
  updateIssueBatch(e2, i2) {
    return new RD(this._request).fetch(e2, i2);
  }
  createIssue(e2) {
    return new ED(this._request).fetch(e2);
  }
  deleteIssue(e2, i2) {
    return new LD(this._request).fetch(e2, i2);
  }
  issueImportCreateAsana(e2, i2, n2) {
    return new zD(this._request).fetch(e2, i2, n2);
  }
  issueImportCreateCSVJira(e2, i2) {
    return new MD(this._request).fetch(e2, i2);
  }
  issueImportCreateClubhouse(e2, i2, n2) {
    return new HD(this._request).fetch(e2, i2, n2);
  }
  issueImportCreateGithub(e2) {
    return new WD(this._request).fetch(e2);
  }
  issueImportCreateJira(e2, i2, n2, a2, t2) {
    return new GD(this._request).fetch(e2, i2, n2, a2, t2);
  }
  deleteIssueImport(e2) {
    return new KD(this._request).fetch(e2);
  }
  issueImportProcess(e2, i2) {
    return new JD(this._request).fetch(e2, i2);
  }
  updateIssueImport(e2, i2) {
    return new $D(this._request).fetch(e2, i2);
  }
  createIssueLabel(e2, i2) {
    return new ZD(this._request).fetch(e2, i2);
  }
  deleteIssueLabel(e2) {
    return new YD(this._request).fetch(e2);
  }
  updateIssueLabel(e2, i2, n2) {
    return new QD(this._request).fetch(e2, i2, n2);
  }
  createIssueRelation(e2, i2) {
    return new XD(this._request).fetch(e2, i2);
  }
  deleteIssueRelation(e2) {
    return new eV(this._request).fetch(e2);
  }
  updateIssueRelation(e2, i2) {
    return new iV(this._request).fetch(e2, i2);
  }
  issueReminder(e2, i2) {
    return new nV(this._request).fetch(e2, i2);
  }
  issueRemoveLabel(e2, i2) {
    return new aV(this._request).fetch(e2, i2);
  }
  issueSubscribe(e2, i2) {
    return new tV(this._request).fetch(e2, i2);
  }
  unarchiveIssue(e2) {
    return new dV(this._request).fetch(e2);
  }
  issueUnsubscribe(e2, i2) {
    return new lV(this._request).fetch(e2, i2);
  }
  updateIssue(e2, i2) {
    return new rV(this._request).fetch(e2, i2);
  }
  joinOrganizationFromOnboarding(e2) {
    return new mV(this._request).fetch(e2);
  }
  leaveOrganization(e2) {
    return new oV(this._request).fetch(e2);
  }
  logout(e2) {
    return new sV(this._request).fetch(e2);
  }
  logoutAllSessions(e2) {
    return new uV(this._request).fetch(e2);
  }
  logoutOtherSessions(e2) {
    return new kV(this._request).fetch(e2);
  }
  logoutSession(e2) {
    return new vV(this._request).fetch(e2);
  }
  archiveNotification(e2) {
    return new pV(this._request).fetch(e2);
  }
  notificationArchiveAll(e2) {
    return new cV(this._request).fetch(e2);
  }
  updateNotificationCategoryChannelSubscription(e2, i2, n2) {
    return new NV(this._request).fetch(e2, i2, n2);
  }
  notificationMarkReadAll(e2, i2) {
    return new hV(this._request).fetch(e2, i2);
  }
  notificationMarkUnreadAll(e2) {
    return new fV(this._request).fetch(e2);
  }
  notificationSnoozeAll(e2, i2) {
    return new bV(this._request).fetch(e2, i2);
  }
  createNotificationSubscription(e2) {
    return new SV(this._request).fetch(e2);
  }
  deleteNotificationSubscription(e2) {
    return new yV(this._request).fetch(e2);
  }
  updateNotificationSubscription(e2, i2) {
    return new gV(this._request).fetch(e2, i2);
  }
  unarchiveNotification(e2) {
    return new DV(this._request).fetch(e2);
  }
  notificationUnsnoozeAll(e2, i2) {
    return new VV(this._request).fetch(e2, i2);
  }
  updateNotification(e2, i2) {
    return new _V(this._request).fetch(e2, i2);
  }
  get deleteOrganizationCancel() {
    return new FV(this._request).fetch();
  }
  deleteOrganization(e2) {
    return new AV(this._request).fetch(e2);
  }
  get organizationDeleteChallenge() {
    return new TV(this._request).fetch();
  }
  deleteOrganizationDomain(e2) {
    return new wV(this._request).fetch(e2);
  }
  createOrganizationInvite(e2) {
    return new IV(this._request).fetch(e2);
  }
  deleteOrganizationInvite(e2) {
    return new qV(this._request).fetch(e2);
  }
  updateOrganizationInvite(e2, i2) {
    return new CV(this._request).fetch(e2, i2);
  }
  get organizationStartTrial() {
    return new PV(this._request).fetch();
  }
  organizationStartTrialForPlan(e2) {
    return new jV(this._request).fetch(e2);
  }
  updateOrganization(e2) {
    return new OV(this._request).fetch(e2);
  }
  archiveProject(e2, i2) {
    return new UV(this._request).fetch(e2, i2);
  }
  createProject(e2, i2) {
    return new xV(this._request).fetch(e2, i2);
  }
  deleteProject(e2) {
    return new BV(this._request).fetch(e2);
  }
  createProjectMilestone(e2) {
    return new RV(this._request).fetch(e2);
  }
  deleteProjectMilestone(e2) {
    return new EV(this._request).fetch(e2);
  }
  updateProjectMilestone(e2, i2) {
    return new LV(this._request).fetch(e2, i2);
  }
  createProjectRelation(e2) {
    return new zV(this._request).fetch(e2);
  }
  deleteProjectRelation(e2) {
    return new MV(this._request).fetch(e2);
  }
  updateProjectRelation(e2, i2) {
    return new HV(this._request).fetch(e2, i2);
  }
  archiveProjectStatus(e2) {
    return new WV(this._request).fetch(e2);
  }
  createProjectStatus(e2) {
    return new GV(this._request).fetch(e2);
  }
  unarchiveProjectStatus(e2) {
    return new KV(this._request).fetch(e2);
  }
  updateProjectStatus(e2, i2) {
    return new JV(this._request).fetch(e2, i2);
  }
  unarchiveProject(e2) {
    return new $V(this._request).fetch(e2);
  }
  updateProject(e2, i2) {
    return new ZV(this._request).fetch(e2, i2);
  }
  archiveProjectUpdate(e2) {
    return new YV(this._request).fetch(e2);
  }
  createProjectUpdate(e2) {
    return new QV(this._request).fetch(e2);
  }
  deleteProjectUpdate(e2) {
    return new XV(this._request).fetch(e2);
  }
  unarchiveProjectUpdate(e2) {
    return new e_(this._request).fetch(e2);
  }
  updateProjectUpdate(e2, i2) {
    return new i_(this._request).fetch(e2, i2);
  }
  createPushSubscription(e2) {
    return new n_(this._request).fetch(e2);
  }
  deletePushSubscription(e2) {
    return new a_(this._request).fetch(e2);
  }
  createReaction(e2) {
    return new t_(this._request).fetch(e2);
  }
  deleteReaction(e2) {
    return new d_(this._request).fetch(e2);
  }
  refreshGoogleSheetsData(e2, i2) {
    return new l_(this._request).fetch(e2, i2);
  }
  resendOrganizationInvite(e2) {
    return new r_(this._request).fetch(e2);
  }
  resendOrganizationInviteByEmail(e2) {
    return new m_(this._request).fetch(e2);
  }
  archiveRoadmap(e2) {
    return new o_(this._request).fetch(e2);
  }
  createRoadmap(e2) {
    return new s_(this._request).fetch(e2);
  }
  deleteRoadmap(e2) {
    return new u_(this._request).fetch(e2);
  }
  createRoadmapToProject(e2) {
    return new k_(this._request).fetch(e2);
  }
  deleteRoadmapToProject(e2) {
    return new v_(this._request).fetch(e2);
  }
  updateRoadmapToProject(e2, i2) {
    return new p_(this._request).fetch(e2, i2);
  }
  unarchiveRoadmap(e2) {
    return new c_(this._request).fetch(e2);
  }
  updateRoadmap(e2, i2) {
    return new N_(this._request).fetch(e2, i2);
  }
  samlTokenUserAccountAuth(e2) {
    return new h_(this._request).fetch(e2);
  }
  createTeam(e2, i2) {
    return new f_(this._request).fetch(e2, i2);
  }
  deleteTeamCycles(e2) {
    return new b_(this._request).fetch(e2);
  }
  deleteTeam(e2) {
    return new S_(this._request).fetch(e2);
  }
  deleteTeamKey(e2) {
    return new y_(this._request).fetch(e2);
  }
  createTeamMembership(e2) {
    return new g_(this._request).fetch(e2);
  }
  deleteTeamMembership(e2, i2) {
    return new D_(this._request).fetch(e2, i2);
  }
  updateTeamMembership(e2, i2) {
    return new V_(this._request).fetch(e2, i2);
  }
  unarchiveTeam(e2) {
    return new __(this._request).fetch(e2);
  }
  updateTeam(e2, i2, n2) {
    return new F_(this._request).fetch(e2, i2, n2);
  }
  createTemplate(e2) {
    return new A_(this._request).fetch(e2);
  }
  deleteTemplate(e2) {
    return new T_(this._request).fetch(e2);
  }
  updateTemplate(e2, i2) {
    return new w_(this._request).fetch(e2, i2);
  }
  createTimeSchedule(e2) {
    return new I_(this._request).fetch(e2);
  }
  deleteTimeSchedule(e2) {
    return new q_(this._request).fetch(e2);
  }
  timeScheduleRefreshIntegrationSchedule(e2) {
    return new C_(this._request).fetch(e2);
  }
  updateTimeSchedule(e2, i2) {
    return new P_(this._request).fetch(e2, i2);
  }
  timeScheduleUpsertExternal(e2, i2) {
    return new j_(this._request).fetch(e2, i2);
  }
  createTriageResponsibility(e2) {
    return new O_(this._request).fetch(e2);
  }
  deleteTriageResponsibility(e2) {
    return new U_(this._request).fetch(e2);
  }
  updateTriageResponsibility(e2, i2) {
    return new x_(this._request).fetch(e2, i2);
  }
  userDemoteAdmin(e2) {
    return new B_(this._request).fetch(e2);
  }
  userDemoteMember(e2) {
    return new R_(this._request).fetch(e2);
  }
  userDiscordConnect(e2, i2) {
    return new E_(this._request).fetch(e2, i2);
  }
  userExternalUserDisconnect(e2) {
    return new L_(this._request).fetch(e2);
  }
  updateUserFlag(e2, i2) {
    return new z_(this._request).fetch(e2, i2);
  }
  userPromoteAdmin(e2) {
    return new M_(this._request).fetch(e2);
  }
  userPromoteMember(e2) {
    return new H_(this._request).fetch(e2);
  }
  userSettingsFlagsReset(e2) {
    return new W_(this._request).fetch(e2);
  }
  updateUserSettings(e2, i2) {
    return new G_(this._request).fetch(e2, i2);
  }
  suspendUser(e2) {
    return new K_(this._request).fetch(e2);
  }
  unsuspendUser(e2) {
    return new J_(this._request).fetch(e2);
  }
  updateUser(e2, i2) {
    return new $_(this._request).fetch(e2, i2);
  }
  createViewPreferences(e2) {
    return new Z_(this._request).fetch(e2);
  }
  deleteViewPreferences(e2) {
    return new Y_(this._request).fetch(e2);
  }
  updateViewPreferences(e2, i2) {
    return new Q_(this._request).fetch(e2, i2);
  }
  createWebhook(e2) {
    return new X_(this._request).fetch(e2);
  }
  deleteWebhook(e2) {
    return new eF(this._request).fetch(e2);
  }
  updateWebhook(e2, i2) {
    return new iF(this._request).fetch(e2, i2);
  }
  archiveWorkflowState(e2) {
    return new nF(this._request).fetch(e2);
  }
  createWorkflowState(e2) {
    return new aF(this._request).fetch(e2);
  }
  updateWorkflowState(e2, i2) {
    return new tF(this._request).fetch(e2, i2);
  }
};
function VT(e2) {
  return null != e2;
}
!function(e2) {
  e2.FeatureNotAccessible = "FeatureNotAccessible", e2.InvalidInput = "InvalidInput", e2.Ratelimited = "Ratelimited", e2.NetworkError = "NetworkError", e2.AuthenticationError = "AuthenticationError", e2.Forbidden = "Forbidden", e2.BootstrapError = "BootstrapError", e2.Unknown = "Unknown", e2.InternalError = "InternalError", e2.Other = "Other", e2.UserError = "UserError", e2.GraphqlError = "GraphqlError", e2.LockTimeout = "LockTimeout", e2.UsageLimitExceeded = "UsageLimitExceeded";
}(Kv || (Kv = {}));
var _T = { [Kv.FeatureNotAccessible]: "feature not accessible", [Kv.InvalidInput]: "invalid input", [Kv.Ratelimited]: "ratelimited", [Kv.NetworkError]: "network error", [Kv.AuthenticationError]: "authentication error", [Kv.Forbidden]: "forbidden", [Kv.BootstrapError]: "bootstrap error", [Kv.Unknown]: "unknown", [Kv.InternalError]: "internal error", [Kv.Other]: "other", [Kv.UserError]: "user error", [Kv.GraphqlError]: "graphql error", [Kv.LockTimeout]: "lock timeout", [Kv.UsageLimitExceeded]: "usage limit exceeded" };
function FT(e2) {
  var i2, n2, a2;
  return null !== (n2 = _T, a2 = e2, i2 = Object.keys(n2).find((e3) => n2[e3] === a2)) && void 0 !== i2 ? i2 : Kv.Unknown;
}
var AT = "Unknown error from LinearClient";
var TT = class {
  constructor(e2) {
    var i2, n2, a2, t2, d2, l2, r2;
    this.type = FT(null === (i2 = null == e2 ? void 0 : e2.extensions) || void 0 === i2 ? void 0 : i2.type), this.userError = null === (n2 = null == e2 ? void 0 : e2.extensions) || void 0 === n2 ? void 0 : n2.userError, this.path = null == e2 ? void 0 : e2.path, this.message = null !== (r2 = null !== (d2 = null !== (t2 = null === (a2 = null == e2 ? void 0 : e2.extensions) || void 0 === a2 ? void 0 : a2.userPresentableMessage) && void 0 !== t2 ? t2 : null == e2 ? void 0 : e2.message) && void 0 !== d2 ? d2 : null === (l2 = null == e2 ? void 0 : e2.extensions) || void 0 === l2 ? void 0 : l2.type) && void 0 !== r2 ? r2 : AT;
  }
};
var wT = class extends Error {
  constructor(e2, i2, n2) {
    var a2, t2, d2, l2, r2, m2, o2, s2, u2, k2;
    super(null !== (r2 = Array.from(new Set([(k2 = null === (t2 = null === (a2 = null == e2 ? void 0 : e2.message) || void 0 === a2 ? void 0 : a2.split(": {")) || void 0 === t2 ? void 0 : t2[0], k2 ? `${k2.charAt(0).toUpperCase()}${k2.slice(1)}` : void 0), null === (d2 = null == e2 ? void 0 : e2.response) || void 0 === d2 ? void 0 : d2.error, null === (l2 = null == i2 ? void 0 : i2[0]) || void 0 === l2 ? void 0 : l2.message].filter(VT))).filter(VT).join(" - ")) && void 0 !== r2 ? r2 : AT), this.type = n2, this.errors = i2, this.query = null === (m2 = null == e2 ? void 0 : e2.request) || void 0 === m2 ? void 0 : m2.query, this.variables = null === (o2 = null == e2 ? void 0 : e2.request) || void 0 === o2 ? void 0 : o2.variables, this.status = null === (s2 = null == e2 ? void 0 : e2.response) || void 0 === s2 ? void 0 : s2.status, this.data = null === (u2 = null == e2 ? void 0 : e2.response) || void 0 === u2 ? void 0 : u2.data, this.raw = e2;
  }
};
var IT = class extends wT {
  constructor(e2, i2) {
    super(e2, i2, Kv.FeatureNotAccessible);
  }
};
var qT = class extends wT {
  constructor(e2, i2) {
    super(e2, i2, Kv.InvalidInput);
  }
};
var CT = class extends wT {
  constructor(e2, i2) {
    var n2;
    super(e2, i2, Kv.Ratelimited);
    const a2 = null === (n2 = null == e2 ? void 0 : e2.response) || void 0 === n2 ? void 0 : n2.headers;
    this.retryAfter = this.parseNumber(null == a2 ? void 0 : a2.get("retry-after")), this.requestsLimit = this.parseNumber(null == a2 ? void 0 : a2.get("x-ratelimit-requests-limit")), this.requestsRemaining = this.parseNumber(null == a2 ? void 0 : a2.get("x-ratelimit-requests-remaining")), this.requestsResetAt = this.parseNumber(null == a2 ? void 0 : a2.get("x-ratelimit-requests-reset")), this.complexityLimit = this.parseNumber(null == a2 ? void 0 : a2.get("x-ratelimit-complexity-limit")), this.complexityRemaining = this.parseNumber(null == a2 ? void 0 : a2.get("x-ratelimit-complexity-remaining")), this.complexityResetAt = this.parseNumber(null == a2 ? void 0 : a2.get("x-ratelimit-complexity-reset"));
  }
  parseNumber(e2) {
    var i2;
    if (null != e2 && "" !== e2)
      return null !== (i2 = Number(e2)) && void 0 !== i2 ? i2 : void 0;
  }
};
var PT = class extends wT {
  constructor(e2, i2) {
    super(e2, i2, Kv.NetworkError);
  }
};
var jT = class extends wT {
  constructor(e2, i2) {
    super(e2, i2, Kv.AuthenticationError);
  }
};
var OT = class extends wT {
  constructor(e2, i2) {
    super(e2, i2, Kv.Forbidden);
  }
};
var UT = class extends wT {
  constructor(e2, i2) {
    super(e2, i2, Kv.BootstrapError);
  }
};
var xT = class extends wT {
  constructor(e2, i2) {
    super(e2, i2, Kv.Unknown);
  }
};
var BT = class extends wT {
  constructor(e2, i2) {
    super(e2, i2, Kv.InternalError);
  }
};
var RT = class extends wT {
  constructor(e2, i2) {
    super(e2, i2, Kv.Other);
  }
};
var ET = class extends wT {
  constructor(e2, i2) {
    super(e2, i2, Kv.UserError);
  }
};
var LT = class extends wT {
  constructor(e2, i2) {
    super(e2, i2, Kv.GraphqlError);
  }
};
var zT = class extends wT {
  constructor(e2, i2) {
    super(e2, i2, Kv.LockTimeout);
  }
};
var MT = class extends wT {
  constructor(e2, i2) {
    super(e2, i2, Kv.UsageLimitExceeded);
  }
};
var HT = { [Kv.FeatureNotAccessible]: IT, [Kv.InvalidInput]: qT, [Kv.Ratelimited]: CT, [Kv.NetworkError]: PT, [Kv.AuthenticationError]: jT, [Kv.Forbidden]: OT, [Kv.BootstrapError]: UT, [Kv.Unknown]: xT, [Kv.InternalError]: BT, [Kv.Other]: RT, [Kv.UserError]: ET, [Kv.GraphqlError]: LT, [Kv.LockTimeout]: zT, [Kv.UsageLimitExceeded]: MT };
function WT(e2) {
  var i2, n2, a2, t2, d2, l2;
  if (e2 instanceof wT)
    return e2;
  const r2 = (null !== (n2 = null === (i2 = null == e2 ? void 0 : e2.response) || void 0 === i2 ? void 0 : i2.errors) && void 0 !== n2 ? n2 : []).map((e3) => new TT(e3)), m2 = null === (a2 = null == e2 ? void 0 : e2.response) || void 0 === a2 ? void 0 : a2.status, o2 = null !== (d2 = null === (t2 = r2[0]) || void 0 === t2 ? void 0 : t2.type) && void 0 !== d2 ? d2 : 403 === m2 ? Kv.Forbidden : 429 === m2 ? Kv.Ratelimited : `${m2}`.startsWith("4") ? Kv.AuthenticationError : 500 === m2 ? Kv.InternalError : `${m2}`.startsWith("5") ? Kv.NetworkError : Kv.Unknown;
  return new (null !== (l2 = HT[o2]) && void 0 !== l2 ? l2 : wT)(e2, r2);
}
var GT = "function" == typeof Symbol && "function" == typeof Symbol.for ? Symbol.for("nodejs.util.inspect.custom") : void 0;
function KT(e2) {
  return KT = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e3) {
    return typeof e3;
  } : function(e3) {
    return e3 && "function" == typeof Symbol && e3.constructor === Symbol && e3 !== Symbol.prototype ? "symbol" : typeof e3;
  }, KT(e2);
}
function JT(e2, i2) {
  switch (KT(e2)) {
    case "string":
      return JSON.stringify(e2);
    case "function":
      return e2.name ? "[function ".concat(e2.name, "]") : "[function]";
    case "object":
      return null === e2 ? "null" : function(e3, i3) {
        if (-1 !== i3.indexOf(e3))
          return "[Circular]";
        var n2 = [].concat(i3, [e3]), a2 = function(e4) {
          var i4 = e4[String(GT)];
          if ("function" == typeof i4)
            return i4;
          if ("function" == typeof e4.inspect)
            return e4.inspect;
        }(e3);
        if (void 0 !== a2) {
          var t2 = a2.call(e3);
          if (t2 !== e3)
            return "string" == typeof t2 ? t2 : JT(t2, n2);
        } else if (Array.isArray(e3))
          return function(e4, i4) {
            if (0 === e4.length)
              return "[]";
            if (i4.length > 2)
              return "[Array]";
            for (var n3 = Math.min(10, e4.length), a3 = e4.length - n3, t3 = [], d2 = 0; d2 < n3; ++d2)
              t3.push(JT(e4[d2], i4));
            1 === a3 ? t3.push("... 1 more item") : a3 > 1 && t3.push("... ".concat(a3, " more items"));
            return "[" + t3.join(", ") + "]";
          }(e3, n2);
        return function(e4, i4) {
          var n3 = Object.keys(e4);
          if (0 === n3.length)
            return "{}";
          if (i4.length > 2)
            return "[" + function(e5) {
              var i5 = Object.prototype.toString.call(e5).replace(/^\[object /, "").replace(/]$/, "");
              if ("Object" === i5 && "function" == typeof e5.constructor) {
                var n4 = e5.constructor.name;
                if ("string" == typeof n4 && "" !== n4)
                  return n4;
              }
              return i5;
            }(e4) + "]";
          var a3 = n3.map(function(n4) {
            return n4 + ": " + JT(e4[n4], i4);
          });
          return "{ " + a3.join(", ") + " }";
        }(e3, n2);
      }(e2, i2);
    default:
      return String(e2);
  }
}
function $T(e2) {
  var i2 = e2.prototype.toJSON;
  "function" == typeof i2 || function(e3, i3) {
    if (!Boolean(e3))
      throw new Error(null != i3 ? i3 : "Unexpected invariant triggered.");
  }(0), e2.prototype.inspect = i2, GT && (e2.prototype[GT] = i2);
}
function ZT(e2) {
  return null != e2 && "string" == typeof e2.kind;
}
$T(function() {
  function e2(e3, i2, n2) {
    this.start = e3.start, this.end = i2.end, this.startToken = e3, this.endToken = i2, this.source = n2;
  }
  return e2.prototype.toJSON = function() {
    return { start: this.start, end: this.end };
  }, e2;
}()), $T(function() {
  function e2(e3, i2, n2, a2, t2, d2, l2) {
    this.kind = e3, this.start = i2, this.end = n2, this.line = a2, this.column = t2, this.value = l2, this.prev = d2, this.next = null;
  }
  return e2.prototype.toJSON = function() {
    return { kind: this.kind, value: this.value, line: this.line, column: this.column };
  }, e2;
}());
var YT = { Name: [], Document: ["definitions"], OperationDefinition: ["name", "variableDefinitions", "directives", "selectionSet"], VariableDefinition: ["variable", "type", "defaultValue", "directives"], Variable: ["name"], SelectionSet: ["selections"], Field: ["alias", "name", "arguments", "directives", "selectionSet"], Argument: ["name", "value"], FragmentSpread: ["name", "directives"], InlineFragment: ["typeCondition", "directives", "selectionSet"], FragmentDefinition: ["name", "variableDefinitions", "typeCondition", "directives", "selectionSet"], IntValue: [], FloatValue: [], StringValue: [], BooleanValue: [], NullValue: [], EnumValue: [], ListValue: ["values"], ObjectValue: ["fields"], ObjectField: ["name", "value"], Directive: ["name", "arguments"], NamedType: ["name"], ListType: ["type"], NonNullType: ["type"], SchemaDefinition: ["description", "directives", "operationTypes"], OperationTypeDefinition: ["type"], ScalarTypeDefinition: ["description", "name", "directives"], ObjectTypeDefinition: ["description", "name", "interfaces", "directives", "fields"], FieldDefinition: ["description", "name", "arguments", "type", "directives"], InputValueDefinition: ["description", "name", "type", "defaultValue", "directives"], InterfaceTypeDefinition: ["description", "name", "interfaces", "directives", "fields"], UnionTypeDefinition: ["description", "name", "directives", "types"], EnumTypeDefinition: ["description", "name", "directives", "values"], EnumValueDefinition: ["description", "name", "directives"], InputObjectTypeDefinition: ["description", "name", "directives", "fields"], DirectiveDefinition: ["description", "name", "arguments", "locations"], SchemaExtension: ["directives", "operationTypes"], ScalarTypeExtension: ["name", "directives"], ObjectTypeExtension: ["name", "interfaces", "directives", "fields"], InterfaceTypeExtension: ["name", "interfaces", "directives", "fields"], UnionTypeExtension: ["name", "directives", "types"], EnumTypeExtension: ["name", "directives", "values"], InputObjectTypeExtension: ["name", "directives", "fields"] };
var QT = Object.freeze({});
function XT(e2, i2, n2) {
  var a2 = e2[i2];
  if (a2) {
    if (!n2 && "function" == typeof a2)
      return a2;
    var t2 = n2 ? a2.leave : a2.enter;
    if ("function" == typeof t2)
      return t2;
  } else {
    var d2 = n2 ? e2.leave : e2.enter;
    if (d2) {
      if ("function" == typeof d2)
        return d2;
      var l2 = d2[i2];
      if ("function" == typeof l2)
        return l2;
    }
  }
}
function ew(e2) {
  return function(e3, i2) {
    var n2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : YT, a2 = void 0, t2 = Array.isArray(e3), d2 = [e3], l2 = -1, r2 = [], m2 = void 0, o2 = void 0, s2 = void 0, u2 = [], k2 = [], v2 = e3;
    do {
      var p2 = ++l2 === d2.length, c2 = p2 && 0 !== r2.length;
      if (p2) {
        if (o2 = 0 === k2.length ? void 0 : u2[u2.length - 1], m2 = s2, s2 = k2.pop(), c2) {
          if (t2)
            m2 = m2.slice();
          else {
            for (var N2 = {}, h2 = 0, f2 = Object.keys(m2); h2 < f2.length; h2++) {
              var b2 = f2[h2];
              N2[b2] = m2[b2];
            }
            m2 = N2;
          }
          for (var S2 = 0, y2 = 0; y2 < r2.length; y2++) {
            var g2 = r2[y2][0], D2 = r2[y2][1];
            t2 && (g2 -= S2), t2 && null === D2 ? (m2.splice(g2, 1), S2++) : m2[g2] = D2;
          }
        }
        l2 = a2.index, d2 = a2.keys, r2 = a2.edits, t2 = a2.inArray, a2 = a2.prev;
      } else {
        if (o2 = s2 ? t2 ? l2 : d2[l2] : void 0, null == (m2 = s2 ? s2[o2] : v2))
          continue;
        s2 && u2.push(o2);
      }
      var V2, _2 = void 0;
      if (!Array.isArray(m2)) {
        if (!ZT(m2))
          throw new Error("Invalid AST Node: ".concat(JT(m2, []), "."));
        var F2 = XT(i2, m2.kind, p2);
        if (F2) {
          if ((_2 = F2.call(i2, m2, o2, s2, u2, k2)) === QT)
            break;
          if (false === _2) {
            if (!p2) {
              u2.pop();
              continue;
            }
          } else if (void 0 !== _2 && (r2.push([o2, _2]), !p2)) {
            if (!ZT(_2)) {
              u2.pop();
              continue;
            }
            m2 = _2;
          }
        }
      }
      void 0 === _2 && c2 && r2.push([o2, m2]), p2 ? u2.pop() : (a2 = { inArray: t2, index: l2, keys: d2, edits: r2, prev: a2 }, d2 = (t2 = Array.isArray(m2)) ? m2 : null !== (V2 = n2[m2.kind]) && void 0 !== V2 ? V2 : [], l2 = -1, r2 = [], s2 && k2.push(s2), s2 = m2);
    } while (void 0 !== a2);
    return 0 !== r2.length && (v2 = r2[r2.length - 1][1]), v2;
  }(e2, { leave: iw });
}
var iw = { Name: function(e2) {
  return e2.value;
}, Variable: function(e2) {
  return "$" + e2.name;
}, Document: function(e2) {
  return aw(e2.definitions, "\n\n") + "\n";
}, OperationDefinition: function(e2) {
  var i2 = e2.operation, n2 = e2.name, a2 = dw("(", aw(e2.variableDefinitions, ", "), ")"), t2 = aw(e2.directives, " "), d2 = e2.selectionSet;
  return n2 || t2 || a2 || "query" !== i2 ? aw([i2, aw([n2, a2]), t2, d2], " ") : d2;
}, VariableDefinition: function(e2) {
  var i2 = e2.variable, n2 = e2.type, a2 = e2.defaultValue, t2 = e2.directives;
  return i2 + ": " + n2 + dw(" = ", a2) + dw(" ", aw(t2, " "));
}, SelectionSet: function(e2) {
  return tw(e2.selections);
}, Field: function(e2) {
  var i2 = e2.alias, n2 = e2.name, a2 = e2.arguments, t2 = e2.directives, d2 = e2.selectionSet, l2 = dw("", i2, ": ") + n2, r2 = l2 + dw("(", aw(a2, ", "), ")");
  return r2.length > 80 && (r2 = l2 + dw("(\n", lw(aw(a2, "\n")), "\n)")), aw([r2, aw(t2, " "), d2], " ");
}, Argument: function(e2) {
  return e2.name + ": " + e2.value;
}, FragmentSpread: function(e2) {
  return "..." + e2.name + dw(" ", aw(e2.directives, " "));
}, InlineFragment: function(e2) {
  var i2 = e2.typeCondition, n2 = e2.directives, a2 = e2.selectionSet;
  return aw(["...", dw("on ", i2), aw(n2, " "), a2], " ");
}, FragmentDefinition: function(e2) {
  var i2 = e2.name, n2 = e2.typeCondition, a2 = e2.variableDefinitions, t2 = e2.directives, d2 = e2.selectionSet;
  return "fragment ".concat(i2).concat(dw("(", aw(a2, ", "), ")"), " ") + "on ".concat(n2, " ").concat(dw("", aw(t2, " "), " ")) + d2;
}, IntValue: function(e2) {
  return e2.value;
}, FloatValue: function(e2) {
  return e2.value;
}, StringValue: function(e2, i2) {
  var n2 = e2.value;
  return e2.block ? function(e3) {
    var i3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "", n3 = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], a2 = -1 === e3.indexOf("\n"), t2 = " " === e3[0] || "	" === e3[0], d2 = '"' === e3[e3.length - 1], l2 = "\\" === e3[e3.length - 1], r2 = !a2 || d2 || l2 || n3, m2 = "";
    return !r2 || a2 && t2 || (m2 += "\n" + i3), m2 += i3 ? e3.replace(/\n/g, "\n" + i3) : e3, r2 && (m2 += "\n"), '"""' + m2.replace(/"""/g, '\\"""') + '"""';
  }(n2, "description" === i2 ? "" : "  ") : JSON.stringify(n2);
}, BooleanValue: function(e2) {
  return e2.value ? "true" : "false";
}, NullValue: function() {
  return "null";
}, EnumValue: function(e2) {
  return e2.value;
}, ListValue: function(e2) {
  return "[" + aw(e2.values, ", ") + "]";
}, ObjectValue: function(e2) {
  return "{" + aw(e2.fields, ", ") + "}";
}, ObjectField: function(e2) {
  return e2.name + ": " + e2.value;
}, Directive: function(e2) {
  return "@" + e2.name + dw("(", aw(e2.arguments, ", "), ")");
}, NamedType: function(e2) {
  return e2.name;
}, ListType: function(e2) {
  return "[" + e2.type + "]";
}, NonNullType: function(e2) {
  return e2.type + "!";
}, SchemaDefinition: nw(function(e2) {
  var i2 = e2.directives, n2 = e2.operationTypes;
  return aw(["schema", aw(i2, " "), tw(n2)], " ");
}), OperationTypeDefinition: function(e2) {
  return e2.operation + ": " + e2.type;
}, ScalarTypeDefinition: nw(function(e2) {
  return aw(["scalar", e2.name, aw(e2.directives, " ")], " ");
}), ObjectTypeDefinition: nw(function(e2) {
  var i2 = e2.name, n2 = e2.interfaces, a2 = e2.directives, t2 = e2.fields;
  return aw(["type", i2, dw("implements ", aw(n2, " & ")), aw(a2, " "), tw(t2)], " ");
}), FieldDefinition: nw(function(e2) {
  var i2 = e2.name, n2 = e2.arguments, a2 = e2.type, t2 = e2.directives;
  return i2 + (mw(n2) ? dw("(\n", lw(aw(n2, "\n")), "\n)") : dw("(", aw(n2, ", "), ")")) + ": " + a2 + dw(" ", aw(t2, " "));
}), InputValueDefinition: nw(function(e2) {
  var i2 = e2.name, n2 = e2.type, a2 = e2.defaultValue, t2 = e2.directives;
  return aw([i2 + ": " + n2, dw("= ", a2), aw(t2, " ")], " ");
}), InterfaceTypeDefinition: nw(function(e2) {
  var i2 = e2.name, n2 = e2.interfaces, a2 = e2.directives, t2 = e2.fields;
  return aw(["interface", i2, dw("implements ", aw(n2, " & ")), aw(a2, " "), tw(t2)], " ");
}), UnionTypeDefinition: nw(function(e2) {
  var i2 = e2.name, n2 = e2.directives, a2 = e2.types;
  return aw(["union", i2, aw(n2, " "), a2 && 0 !== a2.length ? "= " + aw(a2, " | ") : ""], " ");
}), EnumTypeDefinition: nw(function(e2) {
  var i2 = e2.name, n2 = e2.directives, a2 = e2.values;
  return aw(["enum", i2, aw(n2, " "), tw(a2)], " ");
}), EnumValueDefinition: nw(function(e2) {
  return aw([e2.name, aw(e2.directives, " ")], " ");
}), InputObjectTypeDefinition: nw(function(e2) {
  var i2 = e2.name, n2 = e2.directives, a2 = e2.fields;
  return aw(["input", i2, aw(n2, " "), tw(a2)], " ");
}), DirectiveDefinition: nw(function(e2) {
  var i2 = e2.name, n2 = e2.arguments, a2 = e2.repeatable, t2 = e2.locations;
  return "directive @" + i2 + (mw(n2) ? dw("(\n", lw(aw(n2, "\n")), "\n)") : dw("(", aw(n2, ", "), ")")) + (a2 ? " repeatable" : "") + " on " + aw(t2, " | ");
}), SchemaExtension: function(e2) {
  var i2 = e2.directives, n2 = e2.operationTypes;
  return aw(["extend schema", aw(i2, " "), tw(n2)], " ");
}, ScalarTypeExtension: function(e2) {
  return aw(["extend scalar", e2.name, aw(e2.directives, " ")], " ");
}, ObjectTypeExtension: function(e2) {
  var i2 = e2.name, n2 = e2.interfaces, a2 = e2.directives, t2 = e2.fields;
  return aw(["extend type", i2, dw("implements ", aw(n2, " & ")), aw(a2, " "), tw(t2)], " ");
}, InterfaceTypeExtension: function(e2) {
  var i2 = e2.name, n2 = e2.interfaces, a2 = e2.directives, t2 = e2.fields;
  return aw(["extend interface", i2, dw("implements ", aw(n2, " & ")), aw(a2, " "), tw(t2)], " ");
}, UnionTypeExtension: function(e2) {
  var i2 = e2.name, n2 = e2.directives, a2 = e2.types;
  return aw(["extend union", i2, aw(n2, " "), a2 && 0 !== a2.length ? "= " + aw(a2, " | ") : ""], " ");
}, EnumTypeExtension: function(e2) {
  var i2 = e2.name, n2 = e2.directives, a2 = e2.values;
  return aw(["extend enum", i2, aw(n2, " "), tw(a2)], " ");
}, InputObjectTypeExtension: function(e2) {
  var i2 = e2.name, n2 = e2.directives, a2 = e2.fields;
  return aw(["extend input", i2, aw(n2, " "), tw(a2)], " ");
} };
function nw(e2) {
  return function(i2) {
    return aw([i2.description, e2(i2)], "\n");
  };
}
function aw(e2) {
  var i2, n2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
  return null !== (i2 = null == e2 ? void 0 : e2.filter(function(e3) {
    return e3;
  }).join(n2)) && void 0 !== i2 ? i2 : "";
}
function tw(e2) {
  return dw("{\n", lw(aw(e2, "\n")), "\n}");
}
function dw(e2, i2) {
  return null != i2 && "" !== i2 ? e2 + i2 + (arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "") : "";
}
function lw(e2) {
  return dw("  ", e2.replace(/\n/g, "\n  "));
}
function rw(e2) {
  return -1 !== e2.indexOf("\n");
}
function mw(e2) {
  return null != e2 && e2.some(rw);
}
var ow = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {};
function sw(e2) {
  if (e2.__esModule)
    return e2;
  var i2 = Object.defineProperty({}, "__esModule", { value: true });
  return Object.keys(e2).forEach(function(n2) {
    var a2 = Object.getOwnPropertyDescriptor(e2, n2);
    Object.defineProperty(i2, n2, a2.get ? a2 : { enumerable: true, get: function() {
      return e2[n2];
    } });
  }), i2;
}
function uw(e2) {
  var i2 = { exports: {} };
  return e2(i2, i2.exports), i2.exports;
}
var kw = Object.freeze({ __proto__: null, default: function(e2, i2) {
  return i2 = i2 || {}, new Promise(function(n2, a2) {
    var t2 = new XMLHttpRequest(), d2 = [], l2 = [], r2 = {}, m2 = function() {
      return { ok: 2 == (t2.status / 100 | 0), statusText: t2.statusText, status: t2.status, url: t2.responseURL, text: function() {
        return Promise.resolve(t2.responseText);
      }, json: function() {
        return Promise.resolve(t2.responseText).then(JSON.parse);
      }, blob: function() {
        return Promise.resolve(new Blob([t2.response]));
      }, clone: m2, headers: { keys: function() {
        return d2;
      }, entries: function() {
        return l2;
      }, get: function(e3) {
        return r2[e3.toLowerCase()];
      }, has: function(e3) {
        return e3.toLowerCase() in r2;
      } } };
    };
    for (var o2 in t2.open(i2.method || "get", e2, true), t2.onload = function() {
      t2.getAllResponseHeaders().replace(/^(.*?):[^\S\n]*([\s\S]*?)$/gm, function(e3, i3, n3) {
        d2.push(i3 = i3.toLowerCase()), l2.push([i3, n3]), r2[i3] = r2[i3] ? r2[i3] + "," + n3 : n3;
      }), n2(m2());
    }, t2.onerror = a2, t2.withCredentials = "include" == i2.credentials, i2.headers)
      t2.setRequestHeader(o2, i2.headers[o2]);
    t2.send(i2.body || null);
  });
} });
var vw = {};
var pw = vw;
function cw(e2) {
  return e2 < 0 ? -1 : 1;
}
function Nw(e2, i2) {
  i2.unsigned || --e2;
  const n2 = i2.unsigned ? 0 : -Math.pow(2, e2), a2 = Math.pow(2, e2) - 1, t2 = i2.moduloBitLength ? Math.pow(2, i2.moduloBitLength) : Math.pow(2, e2), d2 = i2.moduloBitLength ? Math.pow(2, i2.moduloBitLength - 1) : Math.pow(2, e2 - 1);
  return function(e3, l2) {
    l2 || (l2 = {});
    let r2 = +e3;
    if (l2.enforceRange) {
      if (!Number.isFinite(r2))
        throw new TypeError("Argument is not a finite number");
      if (r2 = cw(r2) * Math.floor(Math.abs(r2)), r2 < n2 || r2 > a2)
        throw new TypeError("Argument is not in byte range");
      return r2;
    }
    if (!isNaN(r2) && l2.clamp)
      return r2 = function(e4) {
        return e4 % 1 != 0.5 || 1 & e4 ? Math.round(e4) : Math.floor(e4);
      }(r2), r2 < n2 && (r2 = n2), r2 > a2 && (r2 = a2), r2;
    if (!Number.isFinite(r2) || 0 === r2)
      return 0;
    if (r2 = cw(r2) * Math.floor(Math.abs(r2)), r2 %= t2, !i2.unsigned && r2 >= d2)
      return r2 - t2;
    if (i2.unsigned) {
      if (r2 < 0)
        r2 += t2;
      else if (-0 === r2)
        return 0;
    }
    return r2;
  };
}
vw.void = function() {
}, vw.boolean = function(e2) {
  return !!e2;
}, vw.byte = Nw(8, { unsigned: false }), vw.octet = Nw(8, { unsigned: true }), vw.short = Nw(16, { unsigned: false }), vw["unsigned short"] = Nw(16, { unsigned: true }), vw.long = Nw(32, { unsigned: false }), vw["unsigned long"] = Nw(32, { unsigned: true }), vw["long long"] = Nw(32, { unsigned: false, moduloBitLength: 64 }), vw["unsigned long long"] = Nw(32, { unsigned: true, moduloBitLength: 64 }), vw.double = function(e2) {
  const i2 = +e2;
  if (!Number.isFinite(i2))
    throw new TypeError("Argument is not a finite floating-point value");
  return i2;
}, vw["unrestricted double"] = function(e2) {
  const i2 = +e2;
  if (isNaN(i2))
    throw new TypeError("Argument is NaN");
  return i2;
}, vw.float = vw.double, vw["unrestricted float"] = vw["unrestricted double"], vw.DOMString = function(e2, i2) {
  return i2 || (i2 = {}), i2.treatNullAsEmptyString && null === e2 ? "" : String(e2);
}, vw.ByteString = function(e2, i2) {
  const n2 = String(e2);
  let a2;
  for (let e3 = 0; void 0 !== (a2 = n2.codePointAt(e3)); ++e3)
    if (a2 > 255)
      throw new TypeError("Argument is not a valid bytestring");
  return n2;
}, vw.USVString = function(e2) {
  const i2 = String(e2), n2 = i2.length, a2 = [];
  for (let e3 = 0; e3 < n2; ++e3) {
    const t2 = i2.charCodeAt(e3);
    if (t2 < 55296 || t2 > 57343)
      a2.push(String.fromCodePoint(t2));
    else if (56320 <= t2 && t2 <= 57343)
      a2.push(String.fromCodePoint(65533));
    else if (e3 === n2 - 1)
      a2.push(String.fromCodePoint(65533));
    else {
      const n3 = i2.charCodeAt(e3 + 1);
      if (56320 <= n3 && n3 <= 57343) {
        const i3 = 1023 & t2, d2 = 1023 & n3;
        a2.push(String.fromCodePoint(65536 + 1024 * i3 + d2)), ++e3;
      } else
        a2.push(String.fromCodePoint(65533));
    }
  }
  return a2.join("");
}, vw.Date = function(e2, i2) {
  if (!(e2 instanceof Date))
    throw new TypeError("Argument is not a Date object");
  if (!isNaN(e2))
    return e2;
}, vw.RegExp = function(e2, i2) {
  return e2 instanceof RegExp || (e2 = new RegExp(e2)), e2;
};
var hw = uw(function(e2) {
  e2.exports.mixin = function(e3, i2) {
    const n2 = Object.getOwnPropertyNames(i2);
    for (let a2 = 0; a2 < n2.length; ++a2)
      Object.defineProperty(e3, n2[a2], Object.getOwnPropertyDescriptor(i2, n2[a2]));
  }, e2.exports.wrapperSymbol = Symbol("wrapper"), e2.exports.implSymbol = Symbol("impl"), e2.exports.wrapperForImpl = function(i2) {
    return i2[e2.exports.wrapperSymbol];
  }, e2.exports.implForWrapper = function(i2) {
    return i2[e2.exports.implSymbol];
  };
});
var fw = 2147483647;
var bw = 36;
var Sw = /^xn--/;
var yw = /[^\0-\x7F]/;
var gw = /[\x2E\u3002\uFF0E\uFF61]/g;
var Dw = { overflow: "Overflow: input needs wider integers to process", "not-basic": "Illegal input >= 0x80 (not a basic code point)", "invalid-input": "Invalid input" };
var Vw = Math.floor;
var _w = String.fromCharCode;
function Fw(e2) {
  throw new RangeError(Dw[e2]);
}
function Aw(e2, i2) {
  const n2 = e2.split("@");
  let a2 = "";
  n2.length > 1 && (a2 = n2[0] + "@", e2 = n2[1]);
  const t2 = function(e3, i3) {
    const n3 = [];
    let a3 = e3.length;
    for (; a3--; )
      n3[a3] = i3(e3[a3]);
    return n3;
  }((e2 = e2.replace(gw, ".")).split("."), i2).join(".");
  return a2 + t2;
}
function Tw(e2) {
  const i2 = [];
  let n2 = 0;
  const a2 = e2.length;
  for (; n2 < a2; ) {
    const t2 = e2.charCodeAt(n2++);
    if (t2 >= 55296 && t2 <= 56319 && n2 < a2) {
      const a3 = e2.charCodeAt(n2++);
      56320 == (64512 & a3) ? i2.push(((1023 & t2) << 10) + (1023 & a3) + 65536) : (i2.push(t2), n2--);
    } else
      i2.push(t2);
  }
  return i2;
}
var ww = function(e2, i2) {
  return e2 + 22 + 75 * (e2 < 26) - ((0 != i2) << 5);
};
var Iw = function(e2, i2, n2) {
  let a2 = 0;
  for (e2 = n2 ? Vw(e2 / 700) : e2 >> 1, e2 += Vw(e2 / i2); e2 > 455; a2 += bw)
    e2 = Vw(e2 / 35);
  return Vw(a2 + 36 * e2 / (e2 + 38));
};
var qw = function(e2) {
  const i2 = [], n2 = e2.length;
  let a2 = 0, t2 = 128, d2 = 72, l2 = e2.lastIndexOf("-");
  l2 < 0 && (l2 = 0);
  for (let n3 = 0; n3 < l2; ++n3)
    e2.charCodeAt(n3) >= 128 && Fw("not-basic"), i2.push(e2.charCodeAt(n3));
  for (let m2 = l2 > 0 ? l2 + 1 : 0; m2 < n2; ) {
    const l3 = a2;
    for (let i3 = 1, t3 = bw; ; t3 += bw) {
      m2 >= n2 && Fw("invalid-input");
      const l4 = (r2 = e2.charCodeAt(m2++)) >= 48 && r2 < 58 ? r2 - 48 + 26 : r2 >= 65 && r2 < 91 ? r2 - 65 : r2 >= 97 && r2 < 123 ? r2 - 97 : bw;
      l4 >= bw && Fw("invalid-input"), l4 > Vw((fw - a2) / i3) && Fw("overflow"), a2 += l4 * i3;
      const o3 = t3 <= d2 ? 1 : t3 >= d2 + 26 ? 26 : t3 - d2;
      if (l4 < o3)
        break;
      const s2 = bw - o3;
      i3 > Vw(fw / s2) && Fw("overflow"), i3 *= s2;
    }
    const o2 = i2.length + 1;
    d2 = Iw(a2 - l3, o2, 0 == l3), Vw(a2 / o2) > fw - t2 && Fw("overflow"), t2 += Vw(a2 / o2), a2 %= o2, i2.splice(a2++, 0, t2);
  }
  var r2;
  return String.fromCodePoint(...i2);
};
var Cw = function(e2) {
  const i2 = [], n2 = (e2 = Tw(e2)).length;
  let a2 = 128, t2 = 0, d2 = 72;
  for (const n3 of e2)
    n3 < 128 && i2.push(_w(n3));
  const l2 = i2.length;
  let r2 = l2;
  for (l2 && i2.push("-"); r2 < n2; ) {
    let n3 = fw;
    for (const i3 of e2)
      i3 >= a2 && i3 < n3 && (n3 = i3);
    const m2 = r2 + 1;
    n3 - a2 > Vw((fw - t2) / m2) && Fw("overflow"), t2 += (n3 - a2) * m2, a2 = n3;
    for (const n4 of e2)
      if (n4 < a2 && ++t2 > fw && Fw("overflow"), n4 === a2) {
        let e3 = t2;
        for (let n5 = bw; ; n5 += bw) {
          const a3 = n5 <= d2 ? 1 : n5 >= d2 + 26 ? 26 : n5 - d2;
          if (e3 < a3)
            break;
          const t3 = e3 - a3, l3 = bw - a3;
          i2.push(_w(ww(a3 + t3 % l3, 0))), e3 = Vw(t3 / l3);
        }
        i2.push(_w(ww(e3, 0))), d2 = Iw(t2, m2, r2 === l2), t2 = 0, ++r2;
      }
    ++t2, ++a2;
  }
  return i2.join("");
};
var Pw = { version: "2.3.1", ucs2: { decode: Tw, encode: (e2) => String.fromCodePoint(...e2) }, decode: qw, encode: Cw, toASCII: function(e2) {
  return Aw(e2, function(e3) {
    return yw.test(e3) ? "xn--" + Cw(e3) : e3;
  });
}, toUnicode: function(e2) {
  return Aw(e2, function(e3) {
    return Sw.test(e3) ? qw(e3.slice(4).toLowerCase()) : e3;
  });
} };
var jw = [[[0, 44], "disallowed_STD3_valid"], [[45, 46], "valid"], [[47, 47], "disallowed_STD3_valid"], [[48, 57], "valid"], [[58, 64], "disallowed_STD3_valid"], [[65, 65], "mapped", [97]], [[66, 66], "mapped", [98]], [[67, 67], "mapped", [99]], [[68, 68], "mapped", [100]], [[69, 69], "mapped", [101]], [[70, 70], "mapped", [102]], [[71, 71], "mapped", [103]], [[72, 72], "mapped", [104]], [[73, 73], "mapped", [105]], [[74, 74], "mapped", [106]], [[75, 75], "mapped", [107]], [[76, 76], "mapped", [108]], [[77, 77], "mapped", [109]], [[78, 78], "mapped", [110]], [[79, 79], "mapped", [111]], [[80, 80], "mapped", [112]], [[81, 81], "mapped", [113]], [[82, 82], "mapped", [114]], [[83, 83], "mapped", [115]], [[84, 84], "mapped", [116]], [[85, 85], "mapped", [117]], [[86, 86], "mapped", [118]], [[87, 87], "mapped", [119]], [[88, 88], "mapped", [120]], [[89, 89], "mapped", [121]], [[90, 90], "mapped", [122]], [[91, 96], "disallowed_STD3_valid"], [[97, 122], "valid"], [[123, 127], "disallowed_STD3_valid"], [[128, 159], "disallowed"], [[160, 160], "disallowed_STD3_mapped", [32]], [[161, 167], "valid", [], "NV8"], [[168, 168], "disallowed_STD3_mapped", [32, 776]], [[169, 169], "valid", [], "NV8"], [[170, 170], "mapped", [97]], [[171, 172], "valid", [], "NV8"], [[173, 173], "ignored"], [[174, 174], "valid", [], "NV8"], [[175, 175], "disallowed_STD3_mapped", [32, 772]], [[176, 177], "valid", [], "NV8"], [[178, 178], "mapped", [50]], [[179, 179], "mapped", [51]], [[180, 180], "disallowed_STD3_mapped", [32, 769]], [[181, 181], "mapped", [956]], [[182, 182], "valid", [], "NV8"], [[183, 183], "valid"], [[184, 184], "disallowed_STD3_mapped", [32, 807]], [[185, 185], "mapped", [49]], [[186, 186], "mapped", [111]], [[187, 187], "valid", [], "NV8"], [[188, 188], "mapped", [49, 8260, 52]], [[189, 189], "mapped", [49, 8260, 50]], [[190, 190], "mapped", [51, 8260, 52]], [[191, 191], "valid", [], "NV8"], [[192, 192], "mapped", [224]], [[193, 193], "mapped", [225]], [[194, 194], "mapped", [226]], [[195, 195], "mapped", [227]], [[196, 196], "mapped", [228]], [[197, 197], "mapped", [229]], [[198, 198], "mapped", [230]], [[199, 199], "mapped", [231]], [[200, 200], "mapped", [232]], [[201, 201], "mapped", [233]], [[202, 202], "mapped", [234]], [[203, 203], "mapped", [235]], [[204, 204], "mapped", [236]], [[205, 205], "mapped", [237]], [[206, 206], "mapped", [238]], [[207, 207], "mapped", [239]], [[208, 208], "mapped", [240]], [[209, 209], "mapped", [241]], [[210, 210], "mapped", [242]], [[211, 211], "mapped", [243]], [[212, 212], "mapped", [244]], [[213, 213], "mapped", [245]], [[214, 214], "mapped", [246]], [[215, 215], "valid", [], "NV8"], [[216, 216], "mapped", [248]], [[217, 217], "mapped", [249]], [[218, 218], "mapped", [250]], [[219, 219], "mapped", [251]], [[220, 220], "mapped", [252]], [[221, 221], "mapped", [253]], [[222, 222], "mapped", [254]], [[223, 223], "deviation", [115, 115]], [[224, 246], "valid"], [[247, 247], "valid", [], "NV8"], [[248, 255], "valid"], [[256, 256], "mapped", [257]], [[257, 257], "valid"], [[258, 258], "mapped", [259]], [[259, 259], "valid"], [[260, 260], "mapped", [261]], [[261, 261], "valid"], [[262, 262], "mapped", [263]], [[263, 263], "valid"], [[264, 264], "mapped", [265]], [[265, 265], "valid"], [[266, 266], "mapped", [267]], [[267, 267], "valid"], [[268, 268], "mapped", [269]], [[269, 269], "valid"], [[270, 270], "mapped", [271]], [[271, 271], "valid"], [[272, 272], "mapped", [273]], [[273, 273], "valid"], [[274, 274], "mapped", [275]], [[275, 275], "valid"], [[276, 276], "mapped", [277]], [[277, 277], "valid"], [[278, 278], "mapped", [279]], [[279, 279], "valid"], [[280, 280], "mapped", [281]], [[281, 281], "valid"], [[282, 282], "mapped", [283]], [[283, 283], "valid"], [[284, 284], "mapped", [285]], [[285, 285], "valid"], [[286, 286], "mapped", [287]], [[287, 287], "valid"], [[288, 288], "mapped", [289]], [[289, 289], "valid"], [[290, 290], "mapped", [291]], [[291, 291], "valid"], [[292, 292], "mapped", [293]], [[293, 293], "valid"], [[294, 294], "mapped", [295]], [[295, 295], "valid"], [[296, 296], "mapped", [297]], [[297, 297], "valid"], [[298, 298], "mapped", [299]], [[299, 299], "valid"], [[300, 300], "mapped", [301]], [[301, 301], "valid"], [[302, 302], "mapped", [303]], [[303, 303], "valid"], [[304, 304], "mapped", [105, 775]], [[305, 305], "valid"], [[306, 307], "mapped", [105, 106]], [[308, 308], "mapped", [309]], [[309, 309], "valid"], [[310, 310], "mapped", [311]], [[311, 312], "valid"], [[313, 313], "mapped", [314]], [[314, 314], "valid"], [[315, 315], "mapped", [316]], [[316, 316], "valid"], [[317, 317], "mapped", [318]], [[318, 318], "valid"], [[319, 320], "mapped", [108, 183]], [[321, 321], "mapped", [322]], [[322, 322], "valid"], [[323, 323], "mapped", [324]], [[324, 324], "valid"], [[325, 325], "mapped", [326]], [[326, 326], "valid"], [[327, 327], "mapped", [328]], [[328, 328], "valid"], [[329, 329], "mapped", [700, 110]], [[330, 330], "mapped", [331]], [[331, 331], "valid"], [[332, 332], "mapped", [333]], [[333, 333], "valid"], [[334, 334], "mapped", [335]], [[335, 335], "valid"], [[336, 336], "mapped", [337]], [[337, 337], "valid"], [[338, 338], "mapped", [339]], [[339, 339], "valid"], [[340, 340], "mapped", [341]], [[341, 341], "valid"], [[342, 342], "mapped", [343]], [[343, 343], "valid"], [[344, 344], "mapped", [345]], [[345, 345], "valid"], [[346, 346], "mapped", [347]], [[347, 347], "valid"], [[348, 348], "mapped", [349]], [[349, 349], "valid"], [[350, 350], "mapped", [351]], [[351, 351], "valid"], [[352, 352], "mapped", [353]], [[353, 353], "valid"], [[354, 354], "mapped", [355]], [[355, 355], "valid"], [[356, 356], "mapped", [357]], [[357, 357], "valid"], [[358, 358], "mapped", [359]], [[359, 359], "valid"], [[360, 360], "mapped", [361]], [[361, 361], "valid"], [[362, 362], "mapped", [363]], [[363, 363], "valid"], [[364, 364], "mapped", [365]], [[365, 365], "valid"], [[366, 366], "mapped", [367]], [[367, 367], "valid"], [[368, 368], "mapped", [369]], [[369, 369], "valid"], [[370, 370], "mapped", [371]], [[371, 371], "valid"], [[372, 372], "mapped", [373]], [[373, 373], "valid"], [[374, 374], "mapped", [375]], [[375, 375], "valid"], [[376, 376], "mapped", [255]], [[377, 377], "mapped", [378]], [[378, 378], "valid"], [[379, 379], "mapped", [380]], [[380, 380], "valid"], [[381, 381], "mapped", [382]], [[382, 382], "valid"], [[383, 383], "mapped", [115]], [[384, 384], "valid"], [[385, 385], "mapped", [595]], [[386, 386], "mapped", [387]], [[387, 387], "valid"], [[388, 388], "mapped", [389]], [[389, 389], "valid"], [[390, 390], "mapped", [596]], [[391, 391], "mapped", [392]], [[392, 392], "valid"], [[393, 393], "mapped", [598]], [[394, 394], "mapped", [599]], [[395, 395], "mapped", [396]], [[396, 397], "valid"], [[398, 398], "mapped", [477]], [[399, 399], "mapped", [601]], [[400, 400], "mapped", [603]], [[401, 401], "mapped", [402]], [[402, 402], "valid"], [[403, 403], "mapped", [608]], [[404, 404], "mapped", [611]], [[405, 405], "valid"], [[406, 406], "mapped", [617]], [[407, 407], "mapped", [616]], [[408, 408], "mapped", [409]], [[409, 411], "valid"], [[412, 412], "mapped", [623]], [[413, 413], "mapped", [626]], [[414, 414], "valid"], [[415, 415], "mapped", [629]], [[416, 416], "mapped", [417]], [[417, 417], "valid"], [[418, 418], "mapped", [419]], [[419, 419], "valid"], [[420, 420], "mapped", [421]], [[421, 421], "valid"], [[422, 422], "mapped", [640]], [[423, 423], "mapped", [424]], [[424, 424], "valid"], [[425, 425], "mapped", [643]], [[426, 427], "valid"], [[428, 428], "mapped", [429]], [[429, 429], "valid"], [[430, 430], "mapped", [648]], [[431, 431], "mapped", [432]], [[432, 432], "valid"], [[433, 433], "mapped", [650]], [[434, 434], "mapped", [651]], [[435, 435], "mapped", [436]], [[436, 436], "valid"], [[437, 437], "mapped", [438]], [[438, 438], "valid"], [[439, 439], "mapped", [658]], [[440, 440], "mapped", [441]], [[441, 443], "valid"], [[444, 444], "mapped", [445]], [[445, 451], "valid"], [[452, 454], "mapped", [100, 382]], [[455, 457], "mapped", [108, 106]], [[458, 460], "mapped", [110, 106]], [[461, 461], "mapped", [462]], [[462, 462], "valid"], [[463, 463], "mapped", [464]], [[464, 464], "valid"], [[465, 465], "mapped", [466]], [[466, 466], "valid"], [[467, 467], "mapped", [468]], [[468, 468], "valid"], [[469, 469], "mapped", [470]], [[470, 470], "valid"], [[471, 471], "mapped", [472]], [[472, 472], "valid"], [[473, 473], "mapped", [474]], [[474, 474], "valid"], [[475, 475], "mapped", [476]], [[476, 477], "valid"], [[478, 478], "mapped", [479]], [[479, 479], "valid"], [[480, 480], "mapped", [481]], [[481, 481], "valid"], [[482, 482], "mapped", [483]], [[483, 483], "valid"], [[484, 484], "mapped", [485]], [[485, 485], "valid"], [[486, 486], "mapped", [487]], [[487, 487], "valid"], [[488, 488], "mapped", [489]], [[489, 489], "valid"], [[490, 490], "mapped", [491]], [[491, 491], "valid"], [[492, 492], "mapped", [493]], [[493, 493], "valid"], [[494, 494], "mapped", [495]], [[495, 496], "valid"], [[497, 499], "mapped", [100, 122]], [[500, 500], "mapped", [501]], [[501, 501], "valid"], [[502, 502], "mapped", [405]], [[503, 503], "mapped", [447]], [[504, 504], "mapped", [505]], [[505, 505], "valid"], [[506, 506], "mapped", [507]], [[507, 507], "valid"], [[508, 508], "mapped", [509]], [[509, 509], "valid"], [[510, 510], "mapped", [511]], [[511, 511], "valid"], [[512, 512], "mapped", [513]], [[513, 513], "valid"], [[514, 514], "mapped", [515]], [[515, 515], "valid"], [[516, 516], "mapped", [517]], [[517, 517], "valid"], [[518, 518], "mapped", [519]], [[519, 519], "valid"], [[520, 520], "mapped", [521]], [[521, 521], "valid"], [[522, 522], "mapped", [523]], [[523, 523], "valid"], [[524, 524], "mapped", [525]], [[525, 525], "valid"], [[526, 526], "mapped", [527]], [[527, 527], "valid"], [[528, 528], "mapped", [529]], [[529, 529], "valid"], [[530, 530], "mapped", [531]], [[531, 531], "valid"], [[532, 532], "mapped", [533]], [[533, 533], "valid"], [[534, 534], "mapped", [535]], [[535, 535], "valid"], [[536, 536], "mapped", [537]], [[537, 537], "valid"], [[538, 538], "mapped", [539]], [[539, 539], "valid"], [[540, 540], "mapped", [541]], [[541, 541], "valid"], [[542, 542], "mapped", [543]], [[543, 543], "valid"], [[544, 544], "mapped", [414]], [[545, 545], "valid"], [[546, 546], "mapped", [547]], [[547, 547], "valid"], [[548, 548], "mapped", [549]], [[549, 549], "valid"], [[550, 550], "mapped", [551]], [[551, 551], "valid"], [[552, 552], "mapped", [553]], [[553, 553], "valid"], [[554, 554], "mapped", [555]], [[555, 555], "valid"], [[556, 556], "mapped", [557]], [[557, 557], "valid"], [[558, 558], "mapped", [559]], [[559, 559], "valid"], [[560, 560], "mapped", [561]], [[561, 561], "valid"], [[562, 562], "mapped", [563]], [[563, 563], "valid"], [[564, 566], "valid"], [[567, 569], "valid"], [[570, 570], "mapped", [11365]], [[571, 571], "mapped", [572]], [[572, 572], "valid"], [[573, 573], "mapped", [410]], [[574, 574], "mapped", [11366]], [[575, 576], "valid"], [[577, 577], "mapped", [578]], [[578, 578], "valid"], [[579, 579], "mapped", [384]], [[580, 580], "mapped", [649]], [[581, 581], "mapped", [652]], [[582, 582], "mapped", [583]], [[583, 583], "valid"], [[584, 584], "mapped", [585]], [[585, 585], "valid"], [[586, 586], "mapped", [587]], [[587, 587], "valid"], [[588, 588], "mapped", [589]], [[589, 589], "valid"], [[590, 590], "mapped", [591]], [[591, 591], "valid"], [[592, 680], "valid"], [[681, 685], "valid"], [[686, 687], "valid"], [[688, 688], "mapped", [104]], [[689, 689], "mapped", [614]], [[690, 690], "mapped", [106]], [[691, 691], "mapped", [114]], [[692, 692], "mapped", [633]], [[693, 693], "mapped", [635]], [[694, 694], "mapped", [641]], [[695, 695], "mapped", [119]], [[696, 696], "mapped", [121]], [[697, 705], "valid"], [[706, 709], "valid", [], "NV8"], [[710, 721], "valid"], [[722, 727], "valid", [], "NV8"], [[728, 728], "disallowed_STD3_mapped", [32, 774]], [[729, 729], "disallowed_STD3_mapped", [32, 775]], [[730, 730], "disallowed_STD3_mapped", [32, 778]], [[731, 731], "disallowed_STD3_mapped", [32, 808]], [[732, 732], "disallowed_STD3_mapped", [32, 771]], [[733, 733], "disallowed_STD3_mapped", [32, 779]], [[734, 734], "valid", [], "NV8"], [[735, 735], "valid", [], "NV8"], [[736, 736], "mapped", [611]], [[737, 737], "mapped", [108]], [[738, 738], "mapped", [115]], [[739, 739], "mapped", [120]], [[740, 740], "mapped", [661]], [[741, 745], "valid", [], "NV8"], [[746, 747], "valid", [], "NV8"], [[748, 748], "valid"], [[749, 749], "valid", [], "NV8"], [[750, 750], "valid"], [[751, 767], "valid", [], "NV8"], [[768, 831], "valid"], [[832, 832], "mapped", [768]], [[833, 833], "mapped", [769]], [[834, 834], "valid"], [[835, 835], "mapped", [787]], [[836, 836], "mapped", [776, 769]], [[837, 837], "mapped", [953]], [[838, 846], "valid"], [[847, 847], "ignored"], [[848, 855], "valid"], [[856, 860], "valid"], [[861, 863], "valid"], [[864, 865], "valid"], [[866, 866], "valid"], [[867, 879], "valid"], [[880, 880], "mapped", [881]], [[881, 881], "valid"], [[882, 882], "mapped", [883]], [[883, 883], "valid"], [[884, 884], "mapped", [697]], [[885, 885], "valid"], [[886, 886], "mapped", [887]], [[887, 887], "valid"], [[888, 889], "disallowed"], [[890, 890], "disallowed_STD3_mapped", [32, 953]], [[891, 893], "valid"], [[894, 894], "disallowed_STD3_mapped", [59]], [[895, 895], "mapped", [1011]], [[896, 899], "disallowed"], [[900, 900], "disallowed_STD3_mapped", [32, 769]], [[901, 901], "disallowed_STD3_mapped", [32, 776, 769]], [[902, 902], "mapped", [940]], [[903, 903], "mapped", [183]], [[904, 904], "mapped", [941]], [[905, 905], "mapped", [942]], [[906, 906], "mapped", [943]], [[907, 907], "disallowed"], [[908, 908], "mapped", [972]], [[909, 909], "disallowed"], [[910, 910], "mapped", [973]], [[911, 911], "mapped", [974]], [[912, 912], "valid"], [[913, 913], "mapped", [945]], [[914, 914], "mapped", [946]], [[915, 915], "mapped", [947]], [[916, 916], "mapped", [948]], [[917, 917], "mapped", [949]], [[918, 918], "mapped", [950]], [[919, 919], "mapped", [951]], [[920, 920], "mapped", [952]], [[921, 921], "mapped", [953]], [[922, 922], "mapped", [954]], [[923, 923], "mapped", [955]], [[924, 924], "mapped", [956]], [[925, 925], "mapped", [957]], [[926, 926], "mapped", [958]], [[927, 927], "mapped", [959]], [[928, 928], "mapped", [960]], [[929, 929], "mapped", [961]], [[930, 930], "disallowed"], [[931, 931], "mapped", [963]], [[932, 932], "mapped", [964]], [[933, 933], "mapped", [965]], [[934, 934], "mapped", [966]], [[935, 935], "mapped", [967]], [[936, 936], "mapped", [968]], [[937, 937], "mapped", [969]], [[938, 938], "mapped", [970]], [[939, 939], "mapped", [971]], [[940, 961], "valid"], [[962, 962], "deviation", [963]], [[963, 974], "valid"], [[975, 975], "mapped", [983]], [[976, 976], "mapped", [946]], [[977, 977], "mapped", [952]], [[978, 978], "mapped", [965]], [[979, 979], "mapped", [973]], [[980, 980], "mapped", [971]], [[981, 981], "mapped", [966]], [[982, 982], "mapped", [960]], [[983, 983], "valid"], [[984, 984], "mapped", [985]], [[985, 985], "valid"], [[986, 986], "mapped", [987]], [[987, 987], "valid"], [[988, 988], "mapped", [989]], [[989, 989], "valid"], [[990, 990], "mapped", [991]], [[991, 991], "valid"], [[992, 992], "mapped", [993]], [[993, 993], "valid"], [[994, 994], "mapped", [995]], [[995, 995], "valid"], [[996, 996], "mapped", [997]], [[997, 997], "valid"], [[998, 998], "mapped", [999]], [[999, 999], "valid"], [[1e3, 1e3], "mapped", [1001]], [[1001, 1001], "valid"], [[1002, 1002], "mapped", [1003]], [[1003, 1003], "valid"], [[1004, 1004], "mapped", [1005]], [[1005, 1005], "valid"], [[1006, 1006], "mapped", [1007]], [[1007, 1007], "valid"], [[1008, 1008], "mapped", [954]], [[1009, 1009], "mapped", [961]], [[1010, 1010], "mapped", [963]], [[1011, 1011], "valid"], [[1012, 1012], "mapped", [952]], [[1013, 1013], "mapped", [949]], [[1014, 1014], "valid", [], "NV8"], [[1015, 1015], "mapped", [1016]], [[1016, 1016], "valid"], [[1017, 1017], "mapped", [963]], [[1018, 1018], "mapped", [1019]], [[1019, 1019], "valid"], [[1020, 1020], "valid"], [[1021, 1021], "mapped", [891]], [[1022, 1022], "mapped", [892]], [[1023, 1023], "mapped", [893]], [[1024, 1024], "mapped", [1104]], [[1025, 1025], "mapped", [1105]], [[1026, 1026], "mapped", [1106]], [[1027, 1027], "mapped", [1107]], [[1028, 1028], "mapped", [1108]], [[1029, 1029], "mapped", [1109]], [[1030, 1030], "mapped", [1110]], [[1031, 1031], "mapped", [1111]], [[1032, 1032], "mapped", [1112]], [[1033, 1033], "mapped", [1113]], [[1034, 1034], "mapped", [1114]], [[1035, 1035], "mapped", [1115]], [[1036, 1036], "mapped", [1116]], [[1037, 1037], "mapped", [1117]], [[1038, 1038], "mapped", [1118]], [[1039, 1039], "mapped", [1119]], [[1040, 1040], "mapped", [1072]], [[1041, 1041], "mapped", [1073]], [[1042, 1042], "mapped", [1074]], [[1043, 1043], "mapped", [1075]], [[1044, 1044], "mapped", [1076]], [[1045, 1045], "mapped", [1077]], [[1046, 1046], "mapped", [1078]], [[1047, 1047], "mapped", [1079]], [[1048, 1048], "mapped", [1080]], [[1049, 1049], "mapped", [1081]], [[1050, 1050], "mapped", [1082]], [[1051, 1051], "mapped", [1083]], [[1052, 1052], "mapped", [1084]], [[1053, 1053], "mapped", [1085]], [[1054, 1054], "mapped", [1086]], [[1055, 1055], "mapped", [1087]], [[1056, 1056], "mapped", [1088]], [[1057, 1057], "mapped", [1089]], [[1058, 1058], "mapped", [1090]], [[1059, 1059], "mapped", [1091]], [[1060, 1060], "mapped", [1092]], [[1061, 1061], "mapped", [1093]], [[1062, 1062], "mapped", [1094]], [[1063, 1063], "mapped", [1095]], [[1064, 1064], "mapped", [1096]], [[1065, 1065], "mapped", [1097]], [[1066, 1066], "mapped", [1098]], [[1067, 1067], "mapped", [1099]], [[1068, 1068], "mapped", [1100]], [[1069, 1069], "mapped", [1101]], [[1070, 1070], "mapped", [1102]], [[1071, 1071], "mapped", [1103]], [[1072, 1103], "valid"], [[1104, 1104], "valid"], [[1105, 1116], "valid"], [[1117, 1117], "valid"], [[1118, 1119], "valid"], [[1120, 1120], "mapped", [1121]], [[1121, 1121], "valid"], [[1122, 1122], "mapped", [1123]], [[1123, 1123], "valid"], [[1124, 1124], "mapped", [1125]], [[1125, 1125], "valid"], [[1126, 1126], "mapped", [1127]], [[1127, 1127], "valid"], [[1128, 1128], "mapped", [1129]], [[1129, 1129], "valid"], [[1130, 1130], "mapped", [1131]], [[1131, 1131], "valid"], [[1132, 1132], "mapped", [1133]], [[1133, 1133], "valid"], [[1134, 1134], "mapped", [1135]], [[1135, 1135], "valid"], [[1136, 1136], "mapped", [1137]], [[1137, 1137], "valid"], [[1138, 1138], "mapped", [1139]], [[1139, 1139], "valid"], [[1140, 1140], "mapped", [1141]], [[1141, 1141], "valid"], [[1142, 1142], "mapped", [1143]], [[1143, 1143], "valid"], [[1144, 1144], "mapped", [1145]], [[1145, 1145], "valid"], [[1146, 1146], "mapped", [1147]], [[1147, 1147], "valid"], [[1148, 1148], "mapped", [1149]], [[1149, 1149], "valid"], [[1150, 1150], "mapped", [1151]], [[1151, 1151], "valid"], [[1152, 1152], "mapped", [1153]], [[1153, 1153], "valid"], [[1154, 1154], "valid", [], "NV8"], [[1155, 1158], "valid"], [[1159, 1159], "valid"], [[1160, 1161], "valid", [], "NV8"], [[1162, 1162], "mapped", [1163]], [[1163, 1163], "valid"], [[1164, 1164], "mapped", [1165]], [[1165, 1165], "valid"], [[1166, 1166], "mapped", [1167]], [[1167, 1167], "valid"], [[1168, 1168], "mapped", [1169]], [[1169, 1169], "valid"], [[1170, 1170], "mapped", [1171]], [[1171, 1171], "valid"], [[1172, 1172], "mapped", [1173]], [[1173, 1173], "valid"], [[1174, 1174], "mapped", [1175]], [[1175, 1175], "valid"], [[1176, 1176], "mapped", [1177]], [[1177, 1177], "valid"], [[1178, 1178], "mapped", [1179]], [[1179, 1179], "valid"], [[1180, 1180], "mapped", [1181]], [[1181, 1181], "valid"], [[1182, 1182], "mapped", [1183]], [[1183, 1183], "valid"], [[1184, 1184], "mapped", [1185]], [[1185, 1185], "valid"], [[1186, 1186], "mapped", [1187]], [[1187, 1187], "valid"], [[1188, 1188], "mapped", [1189]], [[1189, 1189], "valid"], [[1190, 1190], "mapped", [1191]], [[1191, 1191], "valid"], [[1192, 1192], "mapped", [1193]], [[1193, 1193], "valid"], [[1194, 1194], "mapped", [1195]], [[1195, 1195], "valid"], [[1196, 1196], "mapped", [1197]], [[1197, 1197], "valid"], [[1198, 1198], "mapped", [1199]], [[1199, 1199], "valid"], [[1200, 1200], "mapped", [1201]], [[1201, 1201], "valid"], [[1202, 1202], "mapped", [1203]], [[1203, 1203], "valid"], [[1204, 1204], "mapped", [1205]], [[1205, 1205], "valid"], [[1206, 1206], "mapped", [1207]], [[1207, 1207], "valid"], [[1208, 1208], "mapped", [1209]], [[1209, 1209], "valid"], [[1210, 1210], "mapped", [1211]], [[1211, 1211], "valid"], [[1212, 1212], "mapped", [1213]], [[1213, 1213], "valid"], [[1214, 1214], "mapped", [1215]], [[1215, 1215], "valid"], [[1216, 1216], "disallowed"], [[1217, 1217], "mapped", [1218]], [[1218, 1218], "valid"], [[1219, 1219], "mapped", [1220]], [[1220, 1220], "valid"], [[1221, 1221], "mapped", [1222]], [[1222, 1222], "valid"], [[1223, 1223], "mapped", [1224]], [[1224, 1224], "valid"], [[1225, 1225], "mapped", [1226]], [[1226, 1226], "valid"], [[1227, 1227], "mapped", [1228]], [[1228, 1228], "valid"], [[1229, 1229], "mapped", [1230]], [[1230, 1230], "valid"], [[1231, 1231], "valid"], [[1232, 1232], "mapped", [1233]], [[1233, 1233], "valid"], [[1234, 1234], "mapped", [1235]], [[1235, 1235], "valid"], [[1236, 1236], "mapped", [1237]], [[1237, 1237], "valid"], [[1238, 1238], "mapped", [1239]], [[1239, 1239], "valid"], [[1240, 1240], "mapped", [1241]], [[1241, 1241], "valid"], [[1242, 1242], "mapped", [1243]], [[1243, 1243], "valid"], [[1244, 1244], "mapped", [1245]], [[1245, 1245], "valid"], [[1246, 1246], "mapped", [1247]], [[1247, 1247], "valid"], [[1248, 1248], "mapped", [1249]], [[1249, 1249], "valid"], [[1250, 1250], "mapped", [1251]], [[1251, 1251], "valid"], [[1252, 1252], "mapped", [1253]], [[1253, 1253], "valid"], [[1254, 1254], "mapped", [1255]], [[1255, 1255], "valid"], [[1256, 1256], "mapped", [1257]], [[1257, 1257], "valid"], [[1258, 1258], "mapped", [1259]], [[1259, 1259], "valid"], [[1260, 1260], "mapped", [1261]], [[1261, 1261], "valid"], [[1262, 1262], "mapped", [1263]], [[1263, 1263], "valid"], [[1264, 1264], "mapped", [1265]], [[1265, 1265], "valid"], [[1266, 1266], "mapped", [1267]], [[1267, 1267], "valid"], [[1268, 1268], "mapped", [1269]], [[1269, 1269], "valid"], [[1270, 1270], "mapped", [1271]], [[1271, 1271], "valid"], [[1272, 1272], "mapped", [1273]], [[1273, 1273], "valid"], [[1274, 1274], "mapped", [1275]], [[1275, 1275], "valid"], [[1276, 1276], "mapped", [1277]], [[1277, 1277], "valid"], [[1278, 1278], "mapped", [1279]], [[1279, 1279], "valid"], [[1280, 1280], "mapped", [1281]], [[1281, 1281], "valid"], [[1282, 1282], "mapped", [1283]], [[1283, 1283], "valid"], [[1284, 1284], "mapped", [1285]], [[1285, 1285], "valid"], [[1286, 1286], "mapped", [1287]], [[1287, 1287], "valid"], [[1288, 1288], "mapped", [1289]], [[1289, 1289], "valid"], [[1290, 1290], "mapped", [1291]], [[1291, 1291], "valid"], [[1292, 1292], "mapped", [1293]], [[1293, 1293], "valid"], [[1294, 1294], "mapped", [1295]], [[1295, 1295], "valid"], [[1296, 1296], "mapped", [1297]], [[1297, 1297], "valid"], [[1298, 1298], "mapped", [1299]], [[1299, 1299], "valid"], [[1300, 1300], "mapped", [1301]], [[1301, 1301], "valid"], [[1302, 1302], "mapped", [1303]], [[1303, 1303], "valid"], [[1304, 1304], "mapped", [1305]], [[1305, 1305], "valid"], [[1306, 1306], "mapped", [1307]], [[1307, 1307], "valid"], [[1308, 1308], "mapped", [1309]], [[1309, 1309], "valid"], [[1310, 1310], "mapped", [1311]], [[1311, 1311], "valid"], [[1312, 1312], "mapped", [1313]], [[1313, 1313], "valid"], [[1314, 1314], "mapped", [1315]], [[1315, 1315], "valid"], [[1316, 1316], "mapped", [1317]], [[1317, 1317], "valid"], [[1318, 1318], "mapped", [1319]], [[1319, 1319], "valid"], [[1320, 1320], "mapped", [1321]], [[1321, 1321], "valid"], [[1322, 1322], "mapped", [1323]], [[1323, 1323], "valid"], [[1324, 1324], "mapped", [1325]], [[1325, 1325], "valid"], [[1326, 1326], "mapped", [1327]], [[1327, 1327], "valid"], [[1328, 1328], "disallowed"], [[1329, 1329], "mapped", [1377]], [[1330, 1330], "mapped", [1378]], [[1331, 1331], "mapped", [1379]], [[1332, 1332], "mapped", [1380]], [[1333, 1333], "mapped", [1381]], [[1334, 1334], "mapped", [1382]], [[1335, 1335], "mapped", [1383]], [[1336, 1336], "mapped", [1384]], [[1337, 1337], "mapped", [1385]], [[1338, 1338], "mapped", [1386]], [[1339, 1339], "mapped", [1387]], [[1340, 1340], "mapped", [1388]], [[1341, 1341], "mapped", [1389]], [[1342, 1342], "mapped", [1390]], [[1343, 1343], "mapped", [1391]], [[1344, 1344], "mapped", [1392]], [[1345, 1345], "mapped", [1393]], [[1346, 1346], "mapped", [1394]], [[1347, 1347], "mapped", [1395]], [[1348, 1348], "mapped", [1396]], [[1349, 1349], "mapped", [1397]], [[1350, 1350], "mapped", [1398]], [[1351, 1351], "mapped", [1399]], [[1352, 1352], "mapped", [1400]], [[1353, 1353], "mapped", [1401]], [[1354, 1354], "mapped", [1402]], [[1355, 1355], "mapped", [1403]], [[1356, 1356], "mapped", [1404]], [[1357, 1357], "mapped", [1405]], [[1358, 1358], "mapped", [1406]], [[1359, 1359], "mapped", [1407]], [[1360, 1360], "mapped", [1408]], [[1361, 1361], "mapped", [1409]], [[1362, 1362], "mapped", [1410]], [[1363, 1363], "mapped", [1411]], [[1364, 1364], "mapped", [1412]], [[1365, 1365], "mapped", [1413]], [[1366, 1366], "mapped", [1414]], [[1367, 1368], "disallowed"], [[1369, 1369], "valid"], [[1370, 1375], "valid", [], "NV8"], [[1376, 1376], "disallowed"], [[1377, 1414], "valid"], [[1415, 1415], "mapped", [1381, 1410]], [[1416, 1416], "disallowed"], [[1417, 1417], "valid", [], "NV8"], [[1418, 1418], "valid", [], "NV8"], [[1419, 1420], "disallowed"], [[1421, 1422], "valid", [], "NV8"], [[1423, 1423], "valid", [], "NV8"], [[1424, 1424], "disallowed"], [[1425, 1441], "valid"], [[1442, 1442], "valid"], [[1443, 1455], "valid"], [[1456, 1465], "valid"], [[1466, 1466], "valid"], [[1467, 1469], "valid"], [[1470, 1470], "valid", [], "NV8"], [[1471, 1471], "valid"], [[1472, 1472], "valid", [], "NV8"], [[1473, 1474], "valid"], [[1475, 1475], "valid", [], "NV8"], [[1476, 1476], "valid"], [[1477, 1477], "valid"], [[1478, 1478], "valid", [], "NV8"], [[1479, 1479], "valid"], [[1480, 1487], "disallowed"], [[1488, 1514], "valid"], [[1515, 1519], "disallowed"], [[1520, 1524], "valid"], [[1525, 1535], "disallowed"], [[1536, 1539], "disallowed"], [[1540, 1540], "disallowed"], [[1541, 1541], "disallowed"], [[1542, 1546], "valid", [], "NV8"], [[1547, 1547], "valid", [], "NV8"], [[1548, 1548], "valid", [], "NV8"], [[1549, 1551], "valid", [], "NV8"], [[1552, 1557], "valid"], [[1558, 1562], "valid"], [[1563, 1563], "valid", [], "NV8"], [[1564, 1564], "disallowed"], [[1565, 1565], "disallowed"], [[1566, 1566], "valid", [], "NV8"], [[1567, 1567], "valid", [], "NV8"], [[1568, 1568], "valid"], [[1569, 1594], "valid"], [[1595, 1599], "valid"], [[1600, 1600], "valid", [], "NV8"], [[1601, 1618], "valid"], [[1619, 1621], "valid"], [[1622, 1624], "valid"], [[1625, 1630], "valid"], [[1631, 1631], "valid"], [[1632, 1641], "valid"], [[1642, 1645], "valid", [], "NV8"], [[1646, 1647], "valid"], [[1648, 1652], "valid"], [[1653, 1653], "mapped", [1575, 1652]], [[1654, 1654], "mapped", [1608, 1652]], [[1655, 1655], "mapped", [1735, 1652]], [[1656, 1656], "mapped", [1610, 1652]], [[1657, 1719], "valid"], [[1720, 1721], "valid"], [[1722, 1726], "valid"], [[1727, 1727], "valid"], [[1728, 1742], "valid"], [[1743, 1743], "valid"], [[1744, 1747], "valid"], [[1748, 1748], "valid", [], "NV8"], [[1749, 1756], "valid"], [[1757, 1757], "disallowed"], [[1758, 1758], "valid", [], "NV8"], [[1759, 1768], "valid"], [[1769, 1769], "valid", [], "NV8"], [[1770, 1773], "valid"], [[1774, 1775], "valid"], [[1776, 1785], "valid"], [[1786, 1790], "valid"], [[1791, 1791], "valid"], [[1792, 1805], "valid", [], "NV8"], [[1806, 1806], "disallowed"], [[1807, 1807], "disallowed"], [[1808, 1836], "valid"], [[1837, 1839], "valid"], [[1840, 1866], "valid"], [[1867, 1868], "disallowed"], [[1869, 1871], "valid"], [[1872, 1901], "valid"], [[1902, 1919], "valid"], [[1920, 1968], "valid"], [[1969, 1969], "valid"], [[1970, 1983], "disallowed"], [[1984, 2037], "valid"], [[2038, 2042], "valid", [], "NV8"], [[2043, 2047], "disallowed"], [[2048, 2093], "valid"], [[2094, 2095], "disallowed"], [[2096, 2110], "valid", [], "NV8"], [[2111, 2111], "disallowed"], [[2112, 2139], "valid"], [[2140, 2141], "disallowed"], [[2142, 2142], "valid", [], "NV8"], [[2143, 2207], "disallowed"], [[2208, 2208], "valid"], [[2209, 2209], "valid"], [[2210, 2220], "valid"], [[2221, 2226], "valid"], [[2227, 2228], "valid"], [[2229, 2274], "disallowed"], [[2275, 2275], "valid"], [[2276, 2302], "valid"], [[2303, 2303], "valid"], [[2304, 2304], "valid"], [[2305, 2307], "valid"], [[2308, 2308], "valid"], [[2309, 2361], "valid"], [[2362, 2363], "valid"], [[2364, 2381], "valid"], [[2382, 2382], "valid"], [[2383, 2383], "valid"], [[2384, 2388], "valid"], [[2389, 2389], "valid"], [[2390, 2391], "valid"], [[2392, 2392], "mapped", [2325, 2364]], [[2393, 2393], "mapped", [2326, 2364]], [[2394, 2394], "mapped", [2327, 2364]], [[2395, 2395], "mapped", [2332, 2364]], [[2396, 2396], "mapped", [2337, 2364]], [[2397, 2397], "mapped", [2338, 2364]], [[2398, 2398], "mapped", [2347, 2364]], [[2399, 2399], "mapped", [2351, 2364]], [[2400, 2403], "valid"], [[2404, 2405], "valid", [], "NV8"], [[2406, 2415], "valid"], [[2416, 2416], "valid", [], "NV8"], [[2417, 2418], "valid"], [[2419, 2423], "valid"], [[2424, 2424], "valid"], [[2425, 2426], "valid"], [[2427, 2428], "valid"], [[2429, 2429], "valid"], [[2430, 2431], "valid"], [[2432, 2432], "valid"], [[2433, 2435], "valid"], [[2436, 2436], "disallowed"], [[2437, 2444], "valid"], [[2445, 2446], "disallowed"], [[2447, 2448], "valid"], [[2449, 2450], "disallowed"], [[2451, 2472], "valid"], [[2473, 2473], "disallowed"], [[2474, 2480], "valid"], [[2481, 2481], "disallowed"], [[2482, 2482], "valid"], [[2483, 2485], "disallowed"], [[2486, 2489], "valid"], [[2490, 2491], "disallowed"], [[2492, 2492], "valid"], [[2493, 2493], "valid"], [[2494, 2500], "valid"], [[2501, 2502], "disallowed"], [[2503, 2504], "valid"], [[2505, 2506], "disallowed"], [[2507, 2509], "valid"], [[2510, 2510], "valid"], [[2511, 2518], "disallowed"], [[2519, 2519], "valid"], [[2520, 2523], "disallowed"], [[2524, 2524], "mapped", [2465, 2492]], [[2525, 2525], "mapped", [2466, 2492]], [[2526, 2526], "disallowed"], [[2527, 2527], "mapped", [2479, 2492]], [[2528, 2531], "valid"], [[2532, 2533], "disallowed"], [[2534, 2545], "valid"], [[2546, 2554], "valid", [], "NV8"], [[2555, 2555], "valid", [], "NV8"], [[2556, 2560], "disallowed"], [[2561, 2561], "valid"], [[2562, 2562], "valid"], [[2563, 2563], "valid"], [[2564, 2564], "disallowed"], [[2565, 2570], "valid"], [[2571, 2574], "disallowed"], [[2575, 2576], "valid"], [[2577, 2578], "disallowed"], [[2579, 2600], "valid"], [[2601, 2601], "disallowed"], [[2602, 2608], "valid"], [[2609, 2609], "disallowed"], [[2610, 2610], "valid"], [[2611, 2611], "mapped", [2610, 2620]], [[2612, 2612], "disallowed"], [[2613, 2613], "valid"], [[2614, 2614], "mapped", [2616, 2620]], [[2615, 2615], "disallowed"], [[2616, 2617], "valid"], [[2618, 2619], "disallowed"], [[2620, 2620], "valid"], [[2621, 2621], "disallowed"], [[2622, 2626], "valid"], [[2627, 2630], "disallowed"], [[2631, 2632], "valid"], [[2633, 2634], "disallowed"], [[2635, 2637], "valid"], [[2638, 2640], "disallowed"], [[2641, 2641], "valid"], [[2642, 2648], "disallowed"], [[2649, 2649], "mapped", [2582, 2620]], [[2650, 2650], "mapped", [2583, 2620]], [[2651, 2651], "mapped", [2588, 2620]], [[2652, 2652], "valid"], [[2653, 2653], "disallowed"], [[2654, 2654], "mapped", [2603, 2620]], [[2655, 2661], "disallowed"], [[2662, 2676], "valid"], [[2677, 2677], "valid"], [[2678, 2688], "disallowed"], [[2689, 2691], "valid"], [[2692, 2692], "disallowed"], [[2693, 2699], "valid"], [[2700, 2700], "valid"], [[2701, 2701], "valid"], [[2702, 2702], "disallowed"], [[2703, 2705], "valid"], [[2706, 2706], "disallowed"], [[2707, 2728], "valid"], [[2729, 2729], "disallowed"], [[2730, 2736], "valid"], [[2737, 2737], "disallowed"], [[2738, 2739], "valid"], [[2740, 2740], "disallowed"], [[2741, 2745], "valid"], [[2746, 2747], "disallowed"], [[2748, 2757], "valid"], [[2758, 2758], "disallowed"], [[2759, 2761], "valid"], [[2762, 2762], "disallowed"], [[2763, 2765], "valid"], [[2766, 2767], "disallowed"], [[2768, 2768], "valid"], [[2769, 2783], "disallowed"], [[2784, 2784], "valid"], [[2785, 2787], "valid"], [[2788, 2789], "disallowed"], [[2790, 2799], "valid"], [[2800, 2800], "valid", [], "NV8"], [[2801, 2801], "valid", [], "NV8"], [[2802, 2808], "disallowed"], [[2809, 2809], "valid"], [[2810, 2816], "disallowed"], [[2817, 2819], "valid"], [[2820, 2820], "disallowed"], [[2821, 2828], "valid"], [[2829, 2830], "disallowed"], [[2831, 2832], "valid"], [[2833, 2834], "disallowed"], [[2835, 2856], "valid"], [[2857, 2857], "disallowed"], [[2858, 2864], "valid"], [[2865, 2865], "disallowed"], [[2866, 2867], "valid"], [[2868, 2868], "disallowed"], [[2869, 2869], "valid"], [[2870, 2873], "valid"], [[2874, 2875], "disallowed"], [[2876, 2883], "valid"], [[2884, 2884], "valid"], [[2885, 2886], "disallowed"], [[2887, 2888], "valid"], [[2889, 2890], "disallowed"], [[2891, 2893], "valid"], [[2894, 2901], "disallowed"], [[2902, 2903], "valid"], [[2904, 2907], "disallowed"], [[2908, 2908], "mapped", [2849, 2876]], [[2909, 2909], "mapped", [2850, 2876]], [[2910, 2910], "disallowed"], [[2911, 2913], "valid"], [[2914, 2915], "valid"], [[2916, 2917], "disallowed"], [[2918, 2927], "valid"], [[2928, 2928], "valid", [], "NV8"], [[2929, 2929], "valid"], [[2930, 2935], "valid", [], "NV8"], [[2936, 2945], "disallowed"], [[2946, 2947], "valid"], [[2948, 2948], "disallowed"], [[2949, 2954], "valid"], [[2955, 2957], "disallowed"], [[2958, 2960], "valid"], [[2961, 2961], "disallowed"], [[2962, 2965], "valid"], [[2966, 2968], "disallowed"], [[2969, 2970], "valid"], [[2971, 2971], "disallowed"], [[2972, 2972], "valid"], [[2973, 2973], "disallowed"], [[2974, 2975], "valid"], [[2976, 2978], "disallowed"], [[2979, 2980], "valid"], [[2981, 2983], "disallowed"], [[2984, 2986], "valid"], [[2987, 2989], "disallowed"], [[2990, 2997], "valid"], [[2998, 2998], "valid"], [[2999, 3001], "valid"], [[3002, 3005], "disallowed"], [[3006, 3010], "valid"], [[3011, 3013], "disallowed"], [[3014, 3016], "valid"], [[3017, 3017], "disallowed"], [[3018, 3021], "valid"], [[3022, 3023], "disallowed"], [[3024, 3024], "valid"], [[3025, 3030], "disallowed"], [[3031, 3031], "valid"], [[3032, 3045], "disallowed"], [[3046, 3046], "valid"], [[3047, 3055], "valid"], [[3056, 3058], "valid", [], "NV8"], [[3059, 3066], "valid", [], "NV8"], [[3067, 3071], "disallowed"], [[3072, 3072], "valid"], [[3073, 3075], "valid"], [[3076, 3076], "disallowed"], [[3077, 3084], "valid"], [[3085, 3085], "disallowed"], [[3086, 3088], "valid"], [[3089, 3089], "disallowed"], [[3090, 3112], "valid"], [[3113, 3113], "disallowed"], [[3114, 3123], "valid"], [[3124, 3124], "valid"], [[3125, 3129], "valid"], [[3130, 3132], "disallowed"], [[3133, 3133], "valid"], [[3134, 3140], "valid"], [[3141, 3141], "disallowed"], [[3142, 3144], "valid"], [[3145, 3145], "disallowed"], [[3146, 3149], "valid"], [[3150, 3156], "disallowed"], [[3157, 3158], "valid"], [[3159, 3159], "disallowed"], [[3160, 3161], "valid"], [[3162, 3162], "valid"], [[3163, 3167], "disallowed"], [[3168, 3169], "valid"], [[3170, 3171], "valid"], [[3172, 3173], "disallowed"], [[3174, 3183], "valid"], [[3184, 3191], "disallowed"], [[3192, 3199], "valid", [], "NV8"], [[3200, 3200], "disallowed"], [[3201, 3201], "valid"], [[3202, 3203], "valid"], [[3204, 3204], "disallowed"], [[3205, 3212], "valid"], [[3213, 3213], "disallowed"], [[3214, 3216], "valid"], [[3217, 3217], "disallowed"], [[3218, 3240], "valid"], [[3241, 3241], "disallowed"], [[3242, 3251], "valid"], [[3252, 3252], "disallowed"], [[3253, 3257], "valid"], [[3258, 3259], "disallowed"], [[3260, 3261], "valid"], [[3262, 3268], "valid"], [[3269, 3269], "disallowed"], [[3270, 3272], "valid"], [[3273, 3273], "disallowed"], [[3274, 3277], "valid"], [[3278, 3284], "disallowed"], [[3285, 3286], "valid"], [[3287, 3293], "disallowed"], [[3294, 3294], "valid"], [[3295, 3295], "disallowed"], [[3296, 3297], "valid"], [[3298, 3299], "valid"], [[3300, 3301], "disallowed"], [[3302, 3311], "valid"], [[3312, 3312], "disallowed"], [[3313, 3314], "valid"], [[3315, 3328], "disallowed"], [[3329, 3329], "valid"], [[3330, 3331], "valid"], [[3332, 3332], "disallowed"], [[3333, 3340], "valid"], [[3341, 3341], "disallowed"], [[3342, 3344], "valid"], [[3345, 3345], "disallowed"], [[3346, 3368], "valid"], [[3369, 3369], "valid"], [[3370, 3385], "valid"], [[3386, 3386], "valid"], [[3387, 3388], "disallowed"], [[3389, 3389], "valid"], [[3390, 3395], "valid"], [[3396, 3396], "valid"], [[3397, 3397], "disallowed"], [[3398, 3400], "valid"], [[3401, 3401], "disallowed"], [[3402, 3405], "valid"], [[3406, 3406], "valid"], [[3407, 3414], "disallowed"], [[3415, 3415], "valid"], [[3416, 3422], "disallowed"], [[3423, 3423], "valid"], [[3424, 3425], "valid"], [[3426, 3427], "valid"], [[3428, 3429], "disallowed"], [[3430, 3439], "valid"], [[3440, 3445], "valid", [], "NV8"], [[3446, 3448], "disallowed"], [[3449, 3449], "valid", [], "NV8"], [[3450, 3455], "valid"], [[3456, 3457], "disallowed"], [[3458, 3459], "valid"], [[3460, 3460], "disallowed"], [[3461, 3478], "valid"], [[3479, 3481], "disallowed"], [[3482, 3505], "valid"], [[3506, 3506], "disallowed"], [[3507, 3515], "valid"], [[3516, 3516], "disallowed"], [[3517, 3517], "valid"], [[3518, 3519], "disallowed"], [[3520, 3526], "valid"], [[3527, 3529], "disallowed"], [[3530, 3530], "valid"], [[3531, 3534], "disallowed"], [[3535, 3540], "valid"], [[3541, 3541], "disallowed"], [[3542, 3542], "valid"], [[3543, 3543], "disallowed"], [[3544, 3551], "valid"], [[3552, 3557], "disallowed"], [[3558, 3567], "valid"], [[3568, 3569], "disallowed"], [[3570, 3571], "valid"], [[3572, 3572], "valid", [], "NV8"], [[3573, 3584], "disallowed"], [[3585, 3634], "valid"], [[3635, 3635], "mapped", [3661, 3634]], [[3636, 3642], "valid"], [[3643, 3646], "disallowed"], [[3647, 3647], "valid", [], "NV8"], [[3648, 3662], "valid"], [[3663, 3663], "valid", [], "NV8"], [[3664, 3673], "valid"], [[3674, 3675], "valid", [], "NV8"], [[3676, 3712], "disallowed"], [[3713, 3714], "valid"], [[3715, 3715], "disallowed"], [[3716, 3716], "valid"], [[3717, 3718], "disallowed"], [[3719, 3720], "valid"], [[3721, 3721], "disallowed"], [[3722, 3722], "valid"], [[3723, 3724], "disallowed"], [[3725, 3725], "valid"], [[3726, 3731], "disallowed"], [[3732, 3735], "valid"], [[3736, 3736], "disallowed"], [[3737, 3743], "valid"], [[3744, 3744], "disallowed"], [[3745, 3747], "valid"], [[3748, 3748], "disallowed"], [[3749, 3749], "valid"], [[3750, 3750], "disallowed"], [[3751, 3751], "valid"], [[3752, 3753], "disallowed"], [[3754, 3755], "valid"], [[3756, 3756], "disallowed"], [[3757, 3762], "valid"], [[3763, 3763], "mapped", [3789, 3762]], [[3764, 3769], "valid"], [[3770, 3770], "disallowed"], [[3771, 3773], "valid"], [[3774, 3775], "disallowed"], [[3776, 3780], "valid"], [[3781, 3781], "disallowed"], [[3782, 3782], "valid"], [[3783, 3783], "disallowed"], [[3784, 3789], "valid"], [[3790, 3791], "disallowed"], [[3792, 3801], "valid"], [[3802, 3803], "disallowed"], [[3804, 3804], "mapped", [3755, 3737]], [[3805, 3805], "mapped", [3755, 3745]], [[3806, 3807], "valid"], [[3808, 3839], "disallowed"], [[3840, 3840], "valid"], [[3841, 3850], "valid", [], "NV8"], [[3851, 3851], "valid"], [[3852, 3852], "mapped", [3851]], [[3853, 3863], "valid", [], "NV8"], [[3864, 3865], "valid"], [[3866, 3871], "valid", [], "NV8"], [[3872, 3881], "valid"], [[3882, 3892], "valid", [], "NV8"], [[3893, 3893], "valid"], [[3894, 3894], "valid", [], "NV8"], [[3895, 3895], "valid"], [[3896, 3896], "valid", [], "NV8"], [[3897, 3897], "valid"], [[3898, 3901], "valid", [], "NV8"], [[3902, 3906], "valid"], [[3907, 3907], "mapped", [3906, 4023]], [[3908, 3911], "valid"], [[3912, 3912], "disallowed"], [[3913, 3916], "valid"], [[3917, 3917], "mapped", [3916, 4023]], [[3918, 3921], "valid"], [[3922, 3922], "mapped", [3921, 4023]], [[3923, 3926], "valid"], [[3927, 3927], "mapped", [3926, 4023]], [[3928, 3931], "valid"], [[3932, 3932], "mapped", [3931, 4023]], [[3933, 3944], "valid"], [[3945, 3945], "mapped", [3904, 4021]], [[3946, 3946], "valid"], [[3947, 3948], "valid"], [[3949, 3952], "disallowed"], [[3953, 3954], "valid"], [[3955, 3955], "mapped", [3953, 3954]], [[3956, 3956], "valid"], [[3957, 3957], "mapped", [3953, 3956]], [[3958, 3958], "mapped", [4018, 3968]], [[3959, 3959], "mapped", [4018, 3953, 3968]], [[3960, 3960], "mapped", [4019, 3968]], [[3961, 3961], "mapped", [4019, 3953, 3968]], [[3962, 3968], "valid"], [[3969, 3969], "mapped", [3953, 3968]], [[3970, 3972], "valid"], [[3973, 3973], "valid", [], "NV8"], [[3974, 3979], "valid"], [[3980, 3983], "valid"], [[3984, 3986], "valid"], [[3987, 3987], "mapped", [3986, 4023]], [[3988, 3989], "valid"], [[3990, 3990], "valid"], [[3991, 3991], "valid"], [[3992, 3992], "disallowed"], [[3993, 3996], "valid"], [[3997, 3997], "mapped", [3996, 4023]], [[3998, 4001], "valid"], [[4002, 4002], "mapped", [4001, 4023]], [[4003, 4006], "valid"], [[4007, 4007], "mapped", [4006, 4023]], [[4008, 4011], "valid"], [[4012, 4012], "mapped", [4011, 4023]], [[4013, 4013], "valid"], [[4014, 4016], "valid"], [[4017, 4023], "valid"], [[4024, 4024], "valid"], [[4025, 4025], "mapped", [3984, 4021]], [[4026, 4028], "valid"], [[4029, 4029], "disallowed"], [[4030, 4037], "valid", [], "NV8"], [[4038, 4038], "valid"], [[4039, 4044], "valid", [], "NV8"], [[4045, 4045], "disallowed"], [[4046, 4046], "valid", [], "NV8"], [[4047, 4047], "valid", [], "NV8"], [[4048, 4049], "valid", [], "NV8"], [[4050, 4052], "valid", [], "NV8"], [[4053, 4056], "valid", [], "NV8"], [[4057, 4058], "valid", [], "NV8"], [[4059, 4095], "disallowed"], [[4096, 4129], "valid"], [[4130, 4130], "valid"], [[4131, 4135], "valid"], [[4136, 4136], "valid"], [[4137, 4138], "valid"], [[4139, 4139], "valid"], [[4140, 4146], "valid"], [[4147, 4149], "valid"], [[4150, 4153], "valid"], [[4154, 4159], "valid"], [[4160, 4169], "valid"], [[4170, 4175], "valid", [], "NV8"], [[4176, 4185], "valid"], [[4186, 4249], "valid"], [[4250, 4253], "valid"], [[4254, 4255], "valid", [], "NV8"], [[4256, 4293], "disallowed"], [[4294, 4294], "disallowed"], [[4295, 4295], "mapped", [11559]], [[4296, 4300], "disallowed"], [[4301, 4301], "mapped", [11565]], [[4302, 4303], "disallowed"], [[4304, 4342], "valid"], [[4343, 4344], "valid"], [[4345, 4346], "valid"], [[4347, 4347], "valid", [], "NV8"], [[4348, 4348], "mapped", [4316]], [[4349, 4351], "valid"], [[4352, 4441], "valid", [], "NV8"], [[4442, 4446], "valid", [], "NV8"], [[4447, 4448], "disallowed"], [[4449, 4514], "valid", [], "NV8"], [[4515, 4519], "valid", [], "NV8"], [[4520, 4601], "valid", [], "NV8"], [[4602, 4607], "valid", [], "NV8"], [[4608, 4614], "valid"], [[4615, 4615], "valid"], [[4616, 4678], "valid"], [[4679, 4679], "valid"], [[4680, 4680], "valid"], [[4681, 4681], "disallowed"], [[4682, 4685], "valid"], [[4686, 4687], "disallowed"], [[4688, 4694], "valid"], [[4695, 4695], "disallowed"], [[4696, 4696], "valid"], [[4697, 4697], "disallowed"], [[4698, 4701], "valid"], [[4702, 4703], "disallowed"], [[4704, 4742], "valid"], [[4743, 4743], "valid"], [[4744, 4744], "valid"], [[4745, 4745], "disallowed"], [[4746, 4749], "valid"], [[4750, 4751], "disallowed"], [[4752, 4782], "valid"], [[4783, 4783], "valid"], [[4784, 4784], "valid"], [[4785, 4785], "disallowed"], [[4786, 4789], "valid"], [[4790, 4791], "disallowed"], [[4792, 4798], "valid"], [[4799, 4799], "disallowed"], [[4800, 4800], "valid"], [[4801, 4801], "disallowed"], [[4802, 4805], "valid"], [[4806, 4807], "disallowed"], [[4808, 4814], "valid"], [[4815, 4815], "valid"], [[4816, 4822], "valid"], [[4823, 4823], "disallowed"], [[4824, 4846], "valid"], [[4847, 4847], "valid"], [[4848, 4878], "valid"], [[4879, 4879], "valid"], [[4880, 4880], "valid"], [[4881, 4881], "disallowed"], [[4882, 4885], "valid"], [[4886, 4887], "disallowed"], [[4888, 4894], "valid"], [[4895, 4895], "valid"], [[4896, 4934], "valid"], [[4935, 4935], "valid"], [[4936, 4954], "valid"], [[4955, 4956], "disallowed"], [[4957, 4958], "valid"], [[4959, 4959], "valid"], [[4960, 4960], "valid", [], "NV8"], [[4961, 4988], "valid", [], "NV8"], [[4989, 4991], "disallowed"], [[4992, 5007], "valid"], [[5008, 5017], "valid", [], "NV8"], [[5018, 5023], "disallowed"], [[5024, 5108], "valid"], [[5109, 5109], "valid"], [[5110, 5111], "disallowed"], [[5112, 5112], "mapped", [5104]], [[5113, 5113], "mapped", [5105]], [[5114, 5114], "mapped", [5106]], [[5115, 5115], "mapped", [5107]], [[5116, 5116], "mapped", [5108]], [[5117, 5117], "mapped", [5109]], [[5118, 5119], "disallowed"], [[5120, 5120], "valid", [], "NV8"], [[5121, 5740], "valid"], [[5741, 5742], "valid", [], "NV8"], [[5743, 5750], "valid"], [[5751, 5759], "valid"], [[5760, 5760], "disallowed"], [[5761, 5786], "valid"], [[5787, 5788], "valid", [], "NV8"], [[5789, 5791], "disallowed"], [[5792, 5866], "valid"], [[5867, 5872], "valid", [], "NV8"], [[5873, 5880], "valid"], [[5881, 5887], "disallowed"], [[5888, 5900], "valid"], [[5901, 5901], "disallowed"], [[5902, 5908], "valid"], [[5909, 5919], "disallowed"], [[5920, 5940], "valid"], [[5941, 5942], "valid", [], "NV8"], [[5943, 5951], "disallowed"], [[5952, 5971], "valid"], [[5972, 5983], "disallowed"], [[5984, 5996], "valid"], [[5997, 5997], "disallowed"], [[5998, 6e3], "valid"], [[6001, 6001], "disallowed"], [[6002, 6003], "valid"], [[6004, 6015], "disallowed"], [[6016, 6067], "valid"], [[6068, 6069], "disallowed"], [[6070, 6099], "valid"], [[6100, 6102], "valid", [], "NV8"], [[6103, 6103], "valid"], [[6104, 6107], "valid", [], "NV8"], [[6108, 6108], "valid"], [[6109, 6109], "valid"], [[6110, 6111], "disallowed"], [[6112, 6121], "valid"], [[6122, 6127], "disallowed"], [[6128, 6137], "valid", [], "NV8"], [[6138, 6143], "disallowed"], [[6144, 6149], "valid", [], "NV8"], [[6150, 6150], "disallowed"], [[6151, 6154], "valid", [], "NV8"], [[6155, 6157], "ignored"], [[6158, 6158], "disallowed"], [[6159, 6159], "disallowed"], [[6160, 6169], "valid"], [[6170, 6175], "disallowed"], [[6176, 6263], "valid"], [[6264, 6271], "disallowed"], [[6272, 6313], "valid"], [[6314, 6314], "valid"], [[6315, 6319], "disallowed"], [[6320, 6389], "valid"], [[6390, 6399], "disallowed"], [[6400, 6428], "valid"], [[6429, 6430], "valid"], [[6431, 6431], "disallowed"], [[6432, 6443], "valid"], [[6444, 6447], "disallowed"], [[6448, 6459], "valid"], [[6460, 6463], "disallowed"], [[6464, 6464], "valid", [], "NV8"], [[6465, 6467], "disallowed"], [[6468, 6469], "valid", [], "NV8"], [[6470, 6509], "valid"], [[6510, 6511], "disallowed"], [[6512, 6516], "valid"], [[6517, 6527], "disallowed"], [[6528, 6569], "valid"], [[6570, 6571], "valid"], [[6572, 6575], "disallowed"], [[6576, 6601], "valid"], [[6602, 6607], "disallowed"], [[6608, 6617], "valid"], [[6618, 6618], "valid", [], "XV8"], [[6619, 6621], "disallowed"], [[6622, 6623], "valid", [], "NV8"], [[6624, 6655], "valid", [], "NV8"], [[6656, 6683], "valid"], [[6684, 6685], "disallowed"], [[6686, 6687], "valid", [], "NV8"], [[6688, 6750], "valid"], [[6751, 6751], "disallowed"], [[6752, 6780], "valid"], [[6781, 6782], "disallowed"], [[6783, 6793], "valid"], [[6794, 6799], "disallowed"], [[6800, 6809], "valid"], [[6810, 6815], "disallowed"], [[6816, 6822], "valid", [], "NV8"], [[6823, 6823], "valid"], [[6824, 6829], "valid", [], "NV8"], [[6830, 6831], "disallowed"], [[6832, 6845], "valid"], [[6846, 6846], "valid", [], "NV8"], [[6847, 6911], "disallowed"], [[6912, 6987], "valid"], [[6988, 6991], "disallowed"], [[6992, 7001], "valid"], [[7002, 7018], "valid", [], "NV8"], [[7019, 7027], "valid"], [[7028, 7036], "valid", [], "NV8"], [[7037, 7039], "disallowed"], [[7040, 7082], "valid"], [[7083, 7085], "valid"], [[7086, 7097], "valid"], [[7098, 7103], "valid"], [[7104, 7155], "valid"], [[7156, 7163], "disallowed"], [[7164, 7167], "valid", [], "NV8"], [[7168, 7223], "valid"], [[7224, 7226], "disallowed"], [[7227, 7231], "valid", [], "NV8"], [[7232, 7241], "valid"], [[7242, 7244], "disallowed"], [[7245, 7293], "valid"], [[7294, 7295], "valid", [], "NV8"], [[7296, 7359], "disallowed"], [[7360, 7367], "valid", [], "NV8"], [[7368, 7375], "disallowed"], [[7376, 7378], "valid"], [[7379, 7379], "valid", [], "NV8"], [[7380, 7410], "valid"], [[7411, 7414], "valid"], [[7415, 7415], "disallowed"], [[7416, 7417], "valid"], [[7418, 7423], "disallowed"], [[7424, 7467], "valid"], [[7468, 7468], "mapped", [97]], [[7469, 7469], "mapped", [230]], [[7470, 7470], "mapped", [98]], [[7471, 7471], "valid"], [[7472, 7472], "mapped", [100]], [[7473, 7473], "mapped", [101]], [[7474, 7474], "mapped", [477]], [[7475, 7475], "mapped", [103]], [[7476, 7476], "mapped", [104]], [[7477, 7477], "mapped", [105]], [[7478, 7478], "mapped", [106]], [[7479, 7479], "mapped", [107]], [[7480, 7480], "mapped", [108]], [[7481, 7481], "mapped", [109]], [[7482, 7482], "mapped", [110]], [[7483, 7483], "valid"], [[7484, 7484], "mapped", [111]], [[7485, 7485], "mapped", [547]], [[7486, 7486], "mapped", [112]], [[7487, 7487], "mapped", [114]], [[7488, 7488], "mapped", [116]], [[7489, 7489], "mapped", [117]], [[7490, 7490], "mapped", [119]], [[7491, 7491], "mapped", [97]], [[7492, 7492], "mapped", [592]], [[7493, 7493], "mapped", [593]], [[7494, 7494], "mapped", [7426]], [[7495, 7495], "mapped", [98]], [[7496, 7496], "mapped", [100]], [[7497, 7497], "mapped", [101]], [[7498, 7498], "mapped", [601]], [[7499, 7499], "mapped", [603]], [[7500, 7500], "mapped", [604]], [[7501, 7501], "mapped", [103]], [[7502, 7502], "valid"], [[7503, 7503], "mapped", [107]], [[7504, 7504], "mapped", [109]], [[7505, 7505], "mapped", [331]], [[7506, 7506], "mapped", [111]], [[7507, 7507], "mapped", [596]], [[7508, 7508], "mapped", [7446]], [[7509, 7509], "mapped", [7447]], [[7510, 7510], "mapped", [112]], [[7511, 7511], "mapped", [116]], [[7512, 7512], "mapped", [117]], [[7513, 7513], "mapped", [7453]], [[7514, 7514], "mapped", [623]], [[7515, 7515], "mapped", [118]], [[7516, 7516], "mapped", [7461]], [[7517, 7517], "mapped", [946]], [[7518, 7518], "mapped", [947]], [[7519, 7519], "mapped", [948]], [[7520, 7520], "mapped", [966]], [[7521, 7521], "mapped", [967]], [[7522, 7522], "mapped", [105]], [[7523, 7523], "mapped", [114]], [[7524, 7524], "mapped", [117]], [[7525, 7525], "mapped", [118]], [[7526, 7526], "mapped", [946]], [[7527, 7527], "mapped", [947]], [[7528, 7528], "mapped", [961]], [[7529, 7529], "mapped", [966]], [[7530, 7530], "mapped", [967]], [[7531, 7531], "valid"], [[7532, 7543], "valid"], [[7544, 7544], "mapped", [1085]], [[7545, 7578], "valid"], [[7579, 7579], "mapped", [594]], [[7580, 7580], "mapped", [99]], [[7581, 7581], "mapped", [597]], [[7582, 7582], "mapped", [240]], [[7583, 7583], "mapped", [604]], [[7584, 7584], "mapped", [102]], [[7585, 7585], "mapped", [607]], [[7586, 7586], "mapped", [609]], [[7587, 7587], "mapped", [613]], [[7588, 7588], "mapped", [616]], [[7589, 7589], "mapped", [617]], [[7590, 7590], "mapped", [618]], [[7591, 7591], "mapped", [7547]], [[7592, 7592], "mapped", [669]], [[7593, 7593], "mapped", [621]], [[7594, 7594], "mapped", [7557]], [[7595, 7595], "mapped", [671]], [[7596, 7596], "mapped", [625]], [[7597, 7597], "mapped", [624]], [[7598, 7598], "mapped", [626]], [[7599, 7599], "mapped", [627]], [[7600, 7600], "mapped", [628]], [[7601, 7601], "mapped", [629]], [[7602, 7602], "mapped", [632]], [[7603, 7603], "mapped", [642]], [[7604, 7604], "mapped", [643]], [[7605, 7605], "mapped", [427]], [[7606, 7606], "mapped", [649]], [[7607, 7607], "mapped", [650]], [[7608, 7608], "mapped", [7452]], [[7609, 7609], "mapped", [651]], [[7610, 7610], "mapped", [652]], [[7611, 7611], "mapped", [122]], [[7612, 7612], "mapped", [656]], [[7613, 7613], "mapped", [657]], [[7614, 7614], "mapped", [658]], [[7615, 7615], "mapped", [952]], [[7616, 7619], "valid"], [[7620, 7626], "valid"], [[7627, 7654], "valid"], [[7655, 7669], "valid"], [[7670, 7675], "disallowed"], [[7676, 7676], "valid"], [[7677, 7677], "valid"], [[7678, 7679], "valid"], [[7680, 7680], "mapped", [7681]], [[7681, 7681], "valid"], [[7682, 7682], "mapped", [7683]], [[7683, 7683], "valid"], [[7684, 7684], "mapped", [7685]], [[7685, 7685], "valid"], [[7686, 7686], "mapped", [7687]], [[7687, 7687], "valid"], [[7688, 7688], "mapped", [7689]], [[7689, 7689], "valid"], [[7690, 7690], "mapped", [7691]], [[7691, 7691], "valid"], [[7692, 7692], "mapped", [7693]], [[7693, 7693], "valid"], [[7694, 7694], "mapped", [7695]], [[7695, 7695], "valid"], [[7696, 7696], "mapped", [7697]], [[7697, 7697], "valid"], [[7698, 7698], "mapped", [7699]], [[7699, 7699], "valid"], [[7700, 7700], "mapped", [7701]], [[7701, 7701], "valid"], [[7702, 7702], "mapped", [7703]], [[7703, 7703], "valid"], [[7704, 7704], "mapped", [7705]], [[7705, 7705], "valid"], [[7706, 7706], "mapped", [7707]], [[7707, 7707], "valid"], [[7708, 7708], "mapped", [7709]], [[7709, 7709], "valid"], [[7710, 7710], "mapped", [7711]], [[7711, 7711], "valid"], [[7712, 7712], "mapped", [7713]], [[7713, 7713], "valid"], [[7714, 7714], "mapped", [7715]], [[7715, 7715], "valid"], [[7716, 7716], "mapped", [7717]], [[7717, 7717], "valid"], [[7718, 7718], "mapped", [7719]], [[7719, 7719], "valid"], [[7720, 7720], "mapped", [7721]], [[7721, 7721], "valid"], [[7722, 7722], "mapped", [7723]], [[7723, 7723], "valid"], [[7724, 7724], "mapped", [7725]], [[7725, 7725], "valid"], [[7726, 7726], "mapped", [7727]], [[7727, 7727], "valid"], [[7728, 7728], "mapped", [7729]], [[7729, 7729], "valid"], [[7730, 7730], "mapped", [7731]], [[7731, 7731], "valid"], [[7732, 7732], "mapped", [7733]], [[7733, 7733], "valid"], [[7734, 7734], "mapped", [7735]], [[7735, 7735], "valid"], [[7736, 7736], "mapped", [7737]], [[7737, 7737], "valid"], [[7738, 7738], "mapped", [7739]], [[7739, 7739], "valid"], [[7740, 7740], "mapped", [7741]], [[7741, 7741], "valid"], [[7742, 7742], "mapped", [7743]], [[7743, 7743], "valid"], [[7744, 7744], "mapped", [7745]], [[7745, 7745], "valid"], [[7746, 7746], "mapped", [7747]], [[7747, 7747], "valid"], [[7748, 7748], "mapped", [7749]], [[7749, 7749], "valid"], [[7750, 7750], "mapped", [7751]], [[7751, 7751], "valid"], [[7752, 7752], "mapped", [7753]], [[7753, 7753], "valid"], [[7754, 7754], "mapped", [7755]], [[7755, 7755], "valid"], [[7756, 7756], "mapped", [7757]], [[7757, 7757], "valid"], [[7758, 7758], "mapped", [7759]], [[7759, 7759], "valid"], [[7760, 7760], "mapped", [7761]], [[7761, 7761], "valid"], [[7762, 7762], "mapped", [7763]], [[7763, 7763], "valid"], [[7764, 7764], "mapped", [7765]], [[7765, 7765], "valid"], [[7766, 7766], "mapped", [7767]], [[7767, 7767], "valid"], [[7768, 7768], "mapped", [7769]], [[7769, 7769], "valid"], [[7770, 7770], "mapped", [7771]], [[7771, 7771], "valid"], [[7772, 7772], "mapped", [7773]], [[7773, 7773], "valid"], [[7774, 7774], "mapped", [7775]], [[7775, 7775], "valid"], [[7776, 7776], "mapped", [7777]], [[7777, 7777], "valid"], [[7778, 7778], "mapped", [7779]], [[7779, 7779], "valid"], [[7780, 7780], "mapped", [7781]], [[7781, 7781], "valid"], [[7782, 7782], "mapped", [7783]], [[7783, 7783], "valid"], [[7784, 7784], "mapped", [7785]], [[7785, 7785], "valid"], [[7786, 7786], "mapped", [7787]], [[7787, 7787], "valid"], [[7788, 7788], "mapped", [7789]], [[7789, 7789], "valid"], [[7790, 7790], "mapped", [7791]], [[7791, 7791], "valid"], [[7792, 7792], "mapped", [7793]], [[7793, 7793], "valid"], [[7794, 7794], "mapped", [7795]], [[7795, 7795], "valid"], [[7796, 7796], "mapped", [7797]], [[7797, 7797], "valid"], [[7798, 7798], "mapped", [7799]], [[7799, 7799], "valid"], [[7800, 7800], "mapped", [7801]], [[7801, 7801], "valid"], [[7802, 7802], "mapped", [7803]], [[7803, 7803], "valid"], [[7804, 7804], "mapped", [7805]], [[7805, 7805], "valid"], [[7806, 7806], "mapped", [7807]], [[7807, 7807], "valid"], [[7808, 7808], "mapped", [7809]], [[7809, 7809], "valid"], [[7810, 7810], "mapped", [7811]], [[7811, 7811], "valid"], [[7812, 7812], "mapped", [7813]], [[7813, 7813], "valid"], [[7814, 7814], "mapped", [7815]], [[7815, 7815], "valid"], [[7816, 7816], "mapped", [7817]], [[7817, 7817], "valid"], [[7818, 7818], "mapped", [7819]], [[7819, 7819], "valid"], [[7820, 7820], "mapped", [7821]], [[7821, 7821], "valid"], [[7822, 7822], "mapped", [7823]], [[7823, 7823], "valid"], [[7824, 7824], "mapped", [7825]], [[7825, 7825], "valid"], [[7826, 7826], "mapped", [7827]], [[7827, 7827], "valid"], [[7828, 7828], "mapped", [7829]], [[7829, 7833], "valid"], [[7834, 7834], "mapped", [97, 702]], [[7835, 7835], "mapped", [7777]], [[7836, 7837], "valid"], [[7838, 7838], "mapped", [115, 115]], [[7839, 7839], "valid"], [[7840, 7840], "mapped", [7841]], [[7841, 7841], "valid"], [[7842, 7842], "mapped", [7843]], [[7843, 7843], "valid"], [[7844, 7844], "mapped", [7845]], [[7845, 7845], "valid"], [[7846, 7846], "mapped", [7847]], [[7847, 7847], "valid"], [[7848, 7848], "mapped", [7849]], [[7849, 7849], "valid"], [[7850, 7850], "mapped", [7851]], [[7851, 7851], "valid"], [[7852, 7852], "mapped", [7853]], [[7853, 7853], "valid"], [[7854, 7854], "mapped", [7855]], [[7855, 7855], "valid"], [[7856, 7856], "mapped", [7857]], [[7857, 7857], "valid"], [[7858, 7858], "mapped", [7859]], [[7859, 7859], "valid"], [[7860, 7860], "mapped", [7861]], [[7861, 7861], "valid"], [[7862, 7862], "mapped", [7863]], [[7863, 7863], "valid"], [[7864, 7864], "mapped", [7865]], [[7865, 7865], "valid"], [[7866, 7866], "mapped", [7867]], [[7867, 7867], "valid"], [[7868, 7868], "mapped", [7869]], [[7869, 7869], "valid"], [[7870, 7870], "mapped", [7871]], [[7871, 7871], "valid"], [[7872, 7872], "mapped", [7873]], [[7873, 7873], "valid"], [[7874, 7874], "mapped", [7875]], [[7875, 7875], "valid"], [[7876, 7876], "mapped", [7877]], [[7877, 7877], "valid"], [[7878, 7878], "mapped", [7879]], [[7879, 7879], "valid"], [[7880, 7880], "mapped", [7881]], [[7881, 7881], "valid"], [[7882, 7882], "mapped", [7883]], [[7883, 7883], "valid"], [[7884, 7884], "mapped", [7885]], [[7885, 7885], "valid"], [[7886, 7886], "mapped", [7887]], [[7887, 7887], "valid"], [[7888, 7888], "mapped", [7889]], [[7889, 7889], "valid"], [[7890, 7890], "mapped", [7891]], [[7891, 7891], "valid"], [[7892, 7892], "mapped", [7893]], [[7893, 7893], "valid"], [[7894, 7894], "mapped", [7895]], [[7895, 7895], "valid"], [[7896, 7896], "mapped", [7897]], [[7897, 7897], "valid"], [[7898, 7898], "mapped", [7899]], [[7899, 7899], "valid"], [[7900, 7900], "mapped", [7901]], [[7901, 7901], "valid"], [[7902, 7902], "mapped", [7903]], [[7903, 7903], "valid"], [[7904, 7904], "mapped", [7905]], [[7905, 7905], "valid"], [[7906, 7906], "mapped", [7907]], [[7907, 7907], "valid"], [[7908, 7908], "mapped", [7909]], [[7909, 7909], "valid"], [[7910, 7910], "mapped", [7911]], [[7911, 7911], "valid"], [[7912, 7912], "mapped", [7913]], [[7913, 7913], "valid"], [[7914, 7914], "mapped", [7915]], [[7915, 7915], "valid"], [[7916, 7916], "mapped", [7917]], [[7917, 7917], "valid"], [[7918, 7918], "mapped", [7919]], [[7919, 7919], "valid"], [[7920, 7920], "mapped", [7921]], [[7921, 7921], "valid"], [[7922, 7922], "mapped", [7923]], [[7923, 7923], "valid"], [[7924, 7924], "mapped", [7925]], [[7925, 7925], "valid"], [[7926, 7926], "mapped", [7927]], [[7927, 7927], "valid"], [[7928, 7928], "mapped", [7929]], [[7929, 7929], "valid"], [[7930, 7930], "mapped", [7931]], [[7931, 7931], "valid"], [[7932, 7932], "mapped", [7933]], [[7933, 7933], "valid"], [[7934, 7934], "mapped", [7935]], [[7935, 7935], "valid"], [[7936, 7943], "valid"], [[7944, 7944], "mapped", [7936]], [[7945, 7945], "mapped", [7937]], [[7946, 7946], "mapped", [7938]], [[7947, 7947], "mapped", [7939]], [[7948, 7948], "mapped", [7940]], [[7949, 7949], "mapped", [7941]], [[7950, 7950], "mapped", [7942]], [[7951, 7951], "mapped", [7943]], [[7952, 7957], "valid"], [[7958, 7959], "disallowed"], [[7960, 7960], "mapped", [7952]], [[7961, 7961], "mapped", [7953]], [[7962, 7962], "mapped", [7954]], [[7963, 7963], "mapped", [7955]], [[7964, 7964], "mapped", [7956]], [[7965, 7965], "mapped", [7957]], [[7966, 7967], "disallowed"], [[7968, 7975], "valid"], [[7976, 7976], "mapped", [7968]], [[7977, 7977], "mapped", [7969]], [[7978, 7978], "mapped", [7970]], [[7979, 7979], "mapped", [7971]], [[7980, 7980], "mapped", [7972]], [[7981, 7981], "mapped", [7973]], [[7982, 7982], "mapped", [7974]], [[7983, 7983], "mapped", [7975]], [[7984, 7991], "valid"], [[7992, 7992], "mapped", [7984]], [[7993, 7993], "mapped", [7985]], [[7994, 7994], "mapped", [7986]], [[7995, 7995], "mapped", [7987]], [[7996, 7996], "mapped", [7988]], [[7997, 7997], "mapped", [7989]], [[7998, 7998], "mapped", [7990]], [[7999, 7999], "mapped", [7991]], [[8e3, 8005], "valid"], [[8006, 8007], "disallowed"], [[8008, 8008], "mapped", [8e3]], [[8009, 8009], "mapped", [8001]], [[8010, 8010], "mapped", [8002]], [[8011, 8011], "mapped", [8003]], [[8012, 8012], "mapped", [8004]], [[8013, 8013], "mapped", [8005]], [[8014, 8015], "disallowed"], [[8016, 8023], "valid"], [[8024, 8024], "disallowed"], [[8025, 8025], "mapped", [8017]], [[8026, 8026], "disallowed"], [[8027, 8027], "mapped", [8019]], [[8028, 8028], "disallowed"], [[8029, 8029], "mapped", [8021]], [[8030, 8030], "disallowed"], [[8031, 8031], "mapped", [8023]], [[8032, 8039], "valid"], [[8040, 8040], "mapped", [8032]], [[8041, 8041], "mapped", [8033]], [[8042, 8042], "mapped", [8034]], [[8043, 8043], "mapped", [8035]], [[8044, 8044], "mapped", [8036]], [[8045, 8045], "mapped", [8037]], [[8046, 8046], "mapped", [8038]], [[8047, 8047], "mapped", [8039]], [[8048, 8048], "valid"], [[8049, 8049], "mapped", [940]], [[8050, 8050], "valid"], [[8051, 8051], "mapped", [941]], [[8052, 8052], "valid"], [[8053, 8053], "mapped", [942]], [[8054, 8054], "valid"], [[8055, 8055], "mapped", [943]], [[8056, 8056], "valid"], [[8057, 8057], "mapped", [972]], [[8058, 8058], "valid"], [[8059, 8059], "mapped", [973]], [[8060, 8060], "valid"], [[8061, 8061], "mapped", [974]], [[8062, 8063], "disallowed"], [[8064, 8064], "mapped", [7936, 953]], [[8065, 8065], "mapped", [7937, 953]], [[8066, 8066], "mapped", [7938, 953]], [[8067, 8067], "mapped", [7939, 953]], [[8068, 8068], "mapped", [7940, 953]], [[8069, 8069], "mapped", [7941, 953]], [[8070, 8070], "mapped", [7942, 953]], [[8071, 8071], "mapped", [7943, 953]], [[8072, 8072], "mapped", [7936, 953]], [[8073, 8073], "mapped", [7937, 953]], [[8074, 8074], "mapped", [7938, 953]], [[8075, 8075], "mapped", [7939, 953]], [[8076, 8076], "mapped", [7940, 953]], [[8077, 8077], "mapped", [7941, 953]], [[8078, 8078], "mapped", [7942, 953]], [[8079, 8079], "mapped", [7943, 953]], [[8080, 8080], "mapped", [7968, 953]], [[8081, 8081], "mapped", [7969, 953]], [[8082, 8082], "mapped", [7970, 953]], [[8083, 8083], "mapped", [7971, 953]], [[8084, 8084], "mapped", [7972, 953]], [[8085, 8085], "mapped", [7973, 953]], [[8086, 8086], "mapped", [7974, 953]], [[8087, 8087], "mapped", [7975, 953]], [[8088, 8088], "mapped", [7968, 953]], [[8089, 8089], "mapped", [7969, 953]], [[8090, 8090], "mapped", [7970, 953]], [[8091, 8091], "mapped", [7971, 953]], [[8092, 8092], "mapped", [7972, 953]], [[8093, 8093], "mapped", [7973, 953]], [[8094, 8094], "mapped", [7974, 953]], [[8095, 8095], "mapped", [7975, 953]], [[8096, 8096], "mapped", [8032, 953]], [[8097, 8097], "mapped", [8033, 953]], [[8098, 8098], "mapped", [8034, 953]], [[8099, 8099], "mapped", [8035, 953]], [[8100, 8100], "mapped", [8036, 953]], [[8101, 8101], "mapped", [8037, 953]], [[8102, 8102], "mapped", [8038, 953]], [[8103, 8103], "mapped", [8039, 953]], [[8104, 8104], "mapped", [8032, 953]], [[8105, 8105], "mapped", [8033, 953]], [[8106, 8106], "mapped", [8034, 953]], [[8107, 8107], "mapped", [8035, 953]], [[8108, 8108], "mapped", [8036, 953]], [[8109, 8109], "mapped", [8037, 953]], [[8110, 8110], "mapped", [8038, 953]], [[8111, 8111], "mapped", [8039, 953]], [[8112, 8113], "valid"], [[8114, 8114], "mapped", [8048, 953]], [[8115, 8115], "mapped", [945, 953]], [[8116, 8116], "mapped", [940, 953]], [[8117, 8117], "disallowed"], [[8118, 8118], "valid"], [[8119, 8119], "mapped", [8118, 953]], [[8120, 8120], "mapped", [8112]], [[8121, 8121], "mapped", [8113]], [[8122, 8122], "mapped", [8048]], [[8123, 8123], "mapped", [940]], [[8124, 8124], "mapped", [945, 953]], [[8125, 8125], "disallowed_STD3_mapped", [32, 787]], [[8126, 8126], "mapped", [953]], [[8127, 8127], "disallowed_STD3_mapped", [32, 787]], [[8128, 8128], "disallowed_STD3_mapped", [32, 834]], [[8129, 8129], "disallowed_STD3_mapped", [32, 776, 834]], [[8130, 8130], "mapped", [8052, 953]], [[8131, 8131], "mapped", [951, 953]], [[8132, 8132], "mapped", [942, 953]], [[8133, 8133], "disallowed"], [[8134, 8134], "valid"], [[8135, 8135], "mapped", [8134, 953]], [[8136, 8136], "mapped", [8050]], [[8137, 8137], "mapped", [941]], [[8138, 8138], "mapped", [8052]], [[8139, 8139], "mapped", [942]], [[8140, 8140], "mapped", [951, 953]], [[8141, 8141], "disallowed_STD3_mapped", [32, 787, 768]], [[8142, 8142], "disallowed_STD3_mapped", [32, 787, 769]], [[8143, 8143], "disallowed_STD3_mapped", [32, 787, 834]], [[8144, 8146], "valid"], [[8147, 8147], "mapped", [912]], [[8148, 8149], "disallowed"], [[8150, 8151], "valid"], [[8152, 8152], "mapped", [8144]], [[8153, 8153], "mapped", [8145]], [[8154, 8154], "mapped", [8054]], [[8155, 8155], "mapped", [943]], [[8156, 8156], "disallowed"], [[8157, 8157], "disallowed_STD3_mapped", [32, 788, 768]], [[8158, 8158], "disallowed_STD3_mapped", [32, 788, 769]], [[8159, 8159], "disallowed_STD3_mapped", [32, 788, 834]], [[8160, 8162], "valid"], [[8163, 8163], "mapped", [944]], [[8164, 8167], "valid"], [[8168, 8168], "mapped", [8160]], [[8169, 8169], "mapped", [8161]], [[8170, 8170], "mapped", [8058]], [[8171, 8171], "mapped", [973]], [[8172, 8172], "mapped", [8165]], [[8173, 8173], "disallowed_STD3_mapped", [32, 776, 768]], [[8174, 8174], "disallowed_STD3_mapped", [32, 776, 769]], [[8175, 8175], "disallowed_STD3_mapped", [96]], [[8176, 8177], "disallowed"], [[8178, 8178], "mapped", [8060, 953]], [[8179, 8179], "mapped", [969, 953]], [[8180, 8180], "mapped", [974, 953]], [[8181, 8181], "disallowed"], [[8182, 8182], "valid"], [[8183, 8183], "mapped", [8182, 953]], [[8184, 8184], "mapped", [8056]], [[8185, 8185], "mapped", [972]], [[8186, 8186], "mapped", [8060]], [[8187, 8187], "mapped", [974]], [[8188, 8188], "mapped", [969, 953]], [[8189, 8189], "disallowed_STD3_mapped", [32, 769]], [[8190, 8190], "disallowed_STD3_mapped", [32, 788]], [[8191, 8191], "disallowed"], [[8192, 8202], "disallowed_STD3_mapped", [32]], [[8203, 8203], "ignored"], [[8204, 8205], "deviation", []], [[8206, 8207], "disallowed"], [[8208, 8208], "valid", [], "NV8"], [[8209, 8209], "mapped", [8208]], [[8210, 8214], "valid", [], "NV8"], [[8215, 8215], "disallowed_STD3_mapped", [32, 819]], [[8216, 8227], "valid", [], "NV8"], [[8228, 8230], "disallowed"], [[8231, 8231], "valid", [], "NV8"], [[8232, 8238], "disallowed"], [[8239, 8239], "disallowed_STD3_mapped", [32]], [[8240, 8242], "valid", [], "NV8"], [[8243, 8243], "mapped", [8242, 8242]], [[8244, 8244], "mapped", [8242, 8242, 8242]], [[8245, 8245], "valid", [], "NV8"], [[8246, 8246], "mapped", [8245, 8245]], [[8247, 8247], "mapped", [8245, 8245, 8245]], [[8248, 8251], "valid", [], "NV8"], [[8252, 8252], "disallowed_STD3_mapped", [33, 33]], [[8253, 8253], "valid", [], "NV8"], [[8254, 8254], "disallowed_STD3_mapped", [32, 773]], [[8255, 8262], "valid", [], "NV8"], [[8263, 8263], "disallowed_STD3_mapped", [63, 63]], [[8264, 8264], "disallowed_STD3_mapped", [63, 33]], [[8265, 8265], "disallowed_STD3_mapped", [33, 63]], [[8266, 8269], "valid", [], "NV8"], [[8270, 8274], "valid", [], "NV8"], [[8275, 8276], "valid", [], "NV8"], [[8277, 8278], "valid", [], "NV8"], [[8279, 8279], "mapped", [8242, 8242, 8242, 8242]], [[8280, 8286], "valid", [], "NV8"], [[8287, 8287], "disallowed_STD3_mapped", [32]], [[8288, 8288], "ignored"], [[8289, 8291], "disallowed"], [[8292, 8292], "ignored"], [[8293, 8293], "disallowed"], [[8294, 8297], "disallowed"], [[8298, 8303], "disallowed"], [[8304, 8304], "mapped", [48]], [[8305, 8305], "mapped", [105]], [[8306, 8307], "disallowed"], [[8308, 8308], "mapped", [52]], [[8309, 8309], "mapped", [53]], [[8310, 8310], "mapped", [54]], [[8311, 8311], "mapped", [55]], [[8312, 8312], "mapped", [56]], [[8313, 8313], "mapped", [57]], [[8314, 8314], "disallowed_STD3_mapped", [43]], [[8315, 8315], "mapped", [8722]], [[8316, 8316], "disallowed_STD3_mapped", [61]], [[8317, 8317], "disallowed_STD3_mapped", [40]], [[8318, 8318], "disallowed_STD3_mapped", [41]], [[8319, 8319], "mapped", [110]], [[8320, 8320], "mapped", [48]], [[8321, 8321], "mapped", [49]], [[8322, 8322], "mapped", [50]], [[8323, 8323], "mapped", [51]], [[8324, 8324], "mapped", [52]], [[8325, 8325], "mapped", [53]], [[8326, 8326], "mapped", [54]], [[8327, 8327], "mapped", [55]], [[8328, 8328], "mapped", [56]], [[8329, 8329], "mapped", [57]], [[8330, 8330], "disallowed_STD3_mapped", [43]], [[8331, 8331], "mapped", [8722]], [[8332, 8332], "disallowed_STD3_mapped", [61]], [[8333, 8333], "disallowed_STD3_mapped", [40]], [[8334, 8334], "disallowed_STD3_mapped", [41]], [[8335, 8335], "disallowed"], [[8336, 8336], "mapped", [97]], [[8337, 8337], "mapped", [101]], [[8338, 8338], "mapped", [111]], [[8339, 8339], "mapped", [120]], [[8340, 8340], "mapped", [601]], [[8341, 8341], "mapped", [104]], [[8342, 8342], "mapped", [107]], [[8343, 8343], "mapped", [108]], [[8344, 8344], "mapped", [109]], [[8345, 8345], "mapped", [110]], [[8346, 8346], "mapped", [112]], [[8347, 8347], "mapped", [115]], [[8348, 8348], "mapped", [116]], [[8349, 8351], "disallowed"], [[8352, 8359], "valid", [], "NV8"], [[8360, 8360], "mapped", [114, 115]], [[8361, 8362], "valid", [], "NV8"], [[8363, 8363], "valid", [], "NV8"], [[8364, 8364], "valid", [], "NV8"], [[8365, 8367], "valid", [], "NV8"], [[8368, 8369], "valid", [], "NV8"], [[8370, 8373], "valid", [], "NV8"], [[8374, 8376], "valid", [], "NV8"], [[8377, 8377], "valid", [], "NV8"], [[8378, 8378], "valid", [], "NV8"], [[8379, 8381], "valid", [], "NV8"], [[8382, 8382], "valid", [], "NV8"], [[8383, 8399], "disallowed"], [[8400, 8417], "valid", [], "NV8"], [[8418, 8419], "valid", [], "NV8"], [[8420, 8426], "valid", [], "NV8"], [[8427, 8427], "valid", [], "NV8"], [[8428, 8431], "valid", [], "NV8"], [[8432, 8432], "valid", [], "NV8"], [[8433, 8447], "disallowed"], [[8448, 8448], "disallowed_STD3_mapped", [97, 47, 99]], [[8449, 8449], "disallowed_STD3_mapped", [97, 47, 115]], [[8450, 8450], "mapped", [99]], [[8451, 8451], "mapped", [176, 99]], [[8452, 8452], "valid", [], "NV8"], [[8453, 8453], "disallowed_STD3_mapped", [99, 47, 111]], [[8454, 8454], "disallowed_STD3_mapped", [99, 47, 117]], [[8455, 8455], "mapped", [603]], [[8456, 8456], "valid", [], "NV8"], [[8457, 8457], "mapped", [176, 102]], [[8458, 8458], "mapped", [103]], [[8459, 8462], "mapped", [104]], [[8463, 8463], "mapped", [295]], [[8464, 8465], "mapped", [105]], [[8466, 8467], "mapped", [108]], [[8468, 8468], "valid", [], "NV8"], [[8469, 8469], "mapped", [110]], [[8470, 8470], "mapped", [110, 111]], [[8471, 8472], "valid", [], "NV8"], [[8473, 8473], "mapped", [112]], [[8474, 8474], "mapped", [113]], [[8475, 8477], "mapped", [114]], [[8478, 8479], "valid", [], "NV8"], [[8480, 8480], "mapped", [115, 109]], [[8481, 8481], "mapped", [116, 101, 108]], [[8482, 8482], "mapped", [116, 109]], [[8483, 8483], "valid", [], "NV8"], [[8484, 8484], "mapped", [122]], [[8485, 8485], "valid", [], "NV8"], [[8486, 8486], "mapped", [969]], [[8487, 8487], "valid", [], "NV8"], [[8488, 8488], "mapped", [122]], [[8489, 8489], "valid", [], "NV8"], [[8490, 8490], "mapped", [107]], [[8491, 8491], "mapped", [229]], [[8492, 8492], "mapped", [98]], [[8493, 8493], "mapped", [99]], [[8494, 8494], "valid", [], "NV8"], [[8495, 8496], "mapped", [101]], [[8497, 8497], "mapped", [102]], [[8498, 8498], "disallowed"], [[8499, 8499], "mapped", [109]], [[8500, 8500], "mapped", [111]], [[8501, 8501], "mapped", [1488]], [[8502, 8502], "mapped", [1489]], [[8503, 8503], "mapped", [1490]], [[8504, 8504], "mapped", [1491]], [[8505, 8505], "mapped", [105]], [[8506, 8506], "valid", [], "NV8"], [[8507, 8507], "mapped", [102, 97, 120]], [[8508, 8508], "mapped", [960]], [[8509, 8510], "mapped", [947]], [[8511, 8511], "mapped", [960]], [[8512, 8512], "mapped", [8721]], [[8513, 8516], "valid", [], "NV8"], [[8517, 8518], "mapped", [100]], [[8519, 8519], "mapped", [101]], [[8520, 8520], "mapped", [105]], [[8521, 8521], "mapped", [106]], [[8522, 8523], "valid", [], "NV8"], [[8524, 8524], "valid", [], "NV8"], [[8525, 8525], "valid", [], "NV8"], [[8526, 8526], "valid"], [[8527, 8527], "valid", [], "NV8"], [[8528, 8528], "mapped", [49, 8260, 55]], [[8529, 8529], "mapped", [49, 8260, 57]], [[8530, 8530], "mapped", [49, 8260, 49, 48]], [[8531, 8531], "mapped", [49, 8260, 51]], [[8532, 8532], "mapped", [50, 8260, 51]], [[8533, 8533], "mapped", [49, 8260, 53]], [[8534, 8534], "mapped", [50, 8260, 53]], [[8535, 8535], "mapped", [51, 8260, 53]], [[8536, 8536], "mapped", [52, 8260, 53]], [[8537, 8537], "mapped", [49, 8260, 54]], [[8538, 8538], "mapped", [53, 8260, 54]], [[8539, 8539], "mapped", [49, 8260, 56]], [[8540, 8540], "mapped", [51, 8260, 56]], [[8541, 8541], "mapped", [53, 8260, 56]], [[8542, 8542], "mapped", [55, 8260, 56]], [[8543, 8543], "mapped", [49, 8260]], [[8544, 8544], "mapped", [105]], [[8545, 8545], "mapped", [105, 105]], [[8546, 8546], "mapped", [105, 105, 105]], [[8547, 8547], "mapped", [105, 118]], [[8548, 8548], "mapped", [118]], [[8549, 8549], "mapped", [118, 105]], [[8550, 8550], "mapped", [118, 105, 105]], [[8551, 8551], "mapped", [118, 105, 105, 105]], [[8552, 8552], "mapped", [105, 120]], [[8553, 8553], "mapped", [120]], [[8554, 8554], "mapped", [120, 105]], [[8555, 8555], "mapped", [120, 105, 105]], [[8556, 8556], "mapped", [108]], [[8557, 8557], "mapped", [99]], [[8558, 8558], "mapped", [100]], [[8559, 8559], "mapped", [109]], [[8560, 8560], "mapped", [105]], [[8561, 8561], "mapped", [105, 105]], [[8562, 8562], "mapped", [105, 105, 105]], [[8563, 8563], "mapped", [105, 118]], [[8564, 8564], "mapped", [118]], [[8565, 8565], "mapped", [118, 105]], [[8566, 8566], "mapped", [118, 105, 105]], [[8567, 8567], "mapped", [118, 105, 105, 105]], [[8568, 8568], "mapped", [105, 120]], [[8569, 8569], "mapped", [120]], [[8570, 8570], "mapped", [120, 105]], [[8571, 8571], "mapped", [120, 105, 105]], [[8572, 8572], "mapped", [108]], [[8573, 8573], "mapped", [99]], [[8574, 8574], "mapped", [100]], [[8575, 8575], "mapped", [109]], [[8576, 8578], "valid", [], "NV8"], [[8579, 8579], "disallowed"], [[8580, 8580], "valid"], [[8581, 8584], "valid", [], "NV8"], [[8585, 8585], "mapped", [48, 8260, 51]], [[8586, 8587], "valid", [], "NV8"], [[8588, 8591], "disallowed"], [[8592, 8682], "valid", [], "NV8"], [[8683, 8691], "valid", [], "NV8"], [[8692, 8703], "valid", [], "NV8"], [[8704, 8747], "valid", [], "NV8"], [[8748, 8748], "mapped", [8747, 8747]], [[8749, 8749], "mapped", [8747, 8747, 8747]], [[8750, 8750], "valid", [], "NV8"], [[8751, 8751], "mapped", [8750, 8750]], [[8752, 8752], "mapped", [8750, 8750, 8750]], [[8753, 8799], "valid", [], "NV8"], [[8800, 8800], "disallowed_STD3_valid"], [[8801, 8813], "valid", [], "NV8"], [[8814, 8815], "disallowed_STD3_valid"], [[8816, 8945], "valid", [], "NV8"], [[8946, 8959], "valid", [], "NV8"], [[8960, 8960], "valid", [], "NV8"], [[8961, 8961], "valid", [], "NV8"], [[8962, 9e3], "valid", [], "NV8"], [[9001, 9001], "mapped", [12296]], [[9002, 9002], "mapped", [12297]], [[9003, 9082], "valid", [], "NV8"], [[9083, 9083], "valid", [], "NV8"], [[9084, 9084], "valid", [], "NV8"], [[9085, 9114], "valid", [], "NV8"], [[9115, 9166], "valid", [], "NV8"], [[9167, 9168], "valid", [], "NV8"], [[9169, 9179], "valid", [], "NV8"], [[9180, 9191], "valid", [], "NV8"], [[9192, 9192], "valid", [], "NV8"], [[9193, 9203], "valid", [], "NV8"], [[9204, 9210], "valid", [], "NV8"], [[9211, 9215], "disallowed"], [[9216, 9252], "valid", [], "NV8"], [[9253, 9254], "valid", [], "NV8"], [[9255, 9279], "disallowed"], [[9280, 9290], "valid", [], "NV8"], [[9291, 9311], "disallowed"], [[9312, 9312], "mapped", [49]], [[9313, 9313], "mapped", [50]], [[9314, 9314], "mapped", [51]], [[9315, 9315], "mapped", [52]], [[9316, 9316], "mapped", [53]], [[9317, 9317], "mapped", [54]], [[9318, 9318], "mapped", [55]], [[9319, 9319], "mapped", [56]], [[9320, 9320], "mapped", [57]], [[9321, 9321], "mapped", [49, 48]], [[9322, 9322], "mapped", [49, 49]], [[9323, 9323], "mapped", [49, 50]], [[9324, 9324], "mapped", [49, 51]], [[9325, 9325], "mapped", [49, 52]], [[9326, 9326], "mapped", [49, 53]], [[9327, 9327], "mapped", [49, 54]], [[9328, 9328], "mapped", [49, 55]], [[9329, 9329], "mapped", [49, 56]], [[9330, 9330], "mapped", [49, 57]], [[9331, 9331], "mapped", [50, 48]], [[9332, 9332], "disallowed_STD3_mapped", [40, 49, 41]], [[9333, 9333], "disallowed_STD3_mapped", [40, 50, 41]], [[9334, 9334], "disallowed_STD3_mapped", [40, 51, 41]], [[9335, 9335], "disallowed_STD3_mapped", [40, 52, 41]], [[9336, 9336], "disallowed_STD3_mapped", [40, 53, 41]], [[9337, 9337], "disallowed_STD3_mapped", [40, 54, 41]], [[9338, 9338], "disallowed_STD3_mapped", [40, 55, 41]], [[9339, 9339], "disallowed_STD3_mapped", [40, 56, 41]], [[9340, 9340], "disallowed_STD3_mapped", [40, 57, 41]], [[9341, 9341], "disallowed_STD3_mapped", [40, 49, 48, 41]], [[9342, 9342], "disallowed_STD3_mapped", [40, 49, 49, 41]], [[9343, 9343], "disallowed_STD3_mapped", [40, 49, 50, 41]], [[9344, 9344], "disallowed_STD3_mapped", [40, 49, 51, 41]], [[9345, 9345], "disallowed_STD3_mapped", [40, 49, 52, 41]], [[9346, 9346], "disallowed_STD3_mapped", [40, 49, 53, 41]], [[9347, 9347], "disallowed_STD3_mapped", [40, 49, 54, 41]], [[9348, 9348], "disallowed_STD3_mapped", [40, 49, 55, 41]], [[9349, 9349], "disallowed_STD3_mapped", [40, 49, 56, 41]], [[9350, 9350], "disallowed_STD3_mapped", [40, 49, 57, 41]], [[9351, 9351], "disallowed_STD3_mapped", [40, 50, 48, 41]], [[9352, 9371], "disallowed"], [[9372, 9372], "disallowed_STD3_mapped", [40, 97, 41]], [[9373, 9373], "disallowed_STD3_mapped", [40, 98, 41]], [[9374, 9374], "disallowed_STD3_mapped", [40, 99, 41]], [[9375, 9375], "disallowed_STD3_mapped", [40, 100, 41]], [[9376, 9376], "disallowed_STD3_mapped", [40, 101, 41]], [[9377, 9377], "disallowed_STD3_mapped", [40, 102, 41]], [[9378, 9378], "disallowed_STD3_mapped", [40, 103, 41]], [[9379, 9379], "disallowed_STD3_mapped", [40, 104, 41]], [[9380, 9380], "disallowed_STD3_mapped", [40, 105, 41]], [[9381, 9381], "disallowed_STD3_mapped", [40, 106, 41]], [[9382, 9382], "disallowed_STD3_mapped", [40, 107, 41]], [[9383, 9383], "disallowed_STD3_mapped", [40, 108, 41]], [[9384, 9384], "disallowed_STD3_mapped", [40, 109, 41]], [[9385, 9385], "disallowed_STD3_mapped", [40, 110, 41]], [[9386, 9386], "disallowed_STD3_mapped", [40, 111, 41]], [[9387, 9387], "disallowed_STD3_mapped", [40, 112, 41]], [[9388, 9388], "disallowed_STD3_mapped", [40, 113, 41]], [[9389, 9389], "disallowed_STD3_mapped", [40, 114, 41]], [[9390, 9390], "disallowed_STD3_mapped", [40, 115, 41]], [[9391, 9391], "disallowed_STD3_mapped", [40, 116, 41]], [[9392, 9392], "disallowed_STD3_mapped", [40, 117, 41]], [[9393, 9393], "disallowed_STD3_mapped", [40, 118, 41]], [[9394, 9394], "disallowed_STD3_mapped", [40, 119, 41]], [[9395, 9395], "disallowed_STD3_mapped", [40, 120, 41]], [[9396, 9396], "disallowed_STD3_mapped", [40, 121, 41]], [[9397, 9397], "disallowed_STD3_mapped", [40, 122, 41]], [[9398, 9398], "mapped", [97]], [[9399, 9399], "mapped", [98]], [[9400, 9400], "mapped", [99]], [[9401, 9401], "mapped", [100]], [[9402, 9402], "mapped", [101]], [[9403, 9403], "mapped", [102]], [[9404, 9404], "mapped", [103]], [[9405, 9405], "mapped", [104]], [[9406, 9406], "mapped", [105]], [[9407, 9407], "mapped", [106]], [[9408, 9408], "mapped", [107]], [[9409, 9409], "mapped", [108]], [[9410, 9410], "mapped", [109]], [[9411, 9411], "mapped", [110]], [[9412, 9412], "mapped", [111]], [[9413, 9413], "mapped", [112]], [[9414, 9414], "mapped", [113]], [[9415, 9415], "mapped", [114]], [[9416, 9416], "mapped", [115]], [[9417, 9417], "mapped", [116]], [[9418, 9418], "mapped", [117]], [[9419, 9419], "mapped", [118]], [[9420, 9420], "mapped", [119]], [[9421, 9421], "mapped", [120]], [[9422, 9422], "mapped", [121]], [[9423, 9423], "mapped", [122]], [[9424, 9424], "mapped", [97]], [[9425, 9425], "mapped", [98]], [[9426, 9426], "mapped", [99]], [[9427, 9427], "mapped", [100]], [[9428, 9428], "mapped", [101]], [[9429, 9429], "mapped", [102]], [[9430, 9430], "mapped", [103]], [[9431, 9431], "mapped", [104]], [[9432, 9432], "mapped", [105]], [[9433, 9433], "mapped", [106]], [[9434, 9434], "mapped", [107]], [[9435, 9435], "mapped", [108]], [[9436, 9436], "mapped", [109]], [[9437, 9437], "mapped", [110]], [[9438, 9438], "mapped", [111]], [[9439, 9439], "mapped", [112]], [[9440, 9440], "mapped", [113]], [[9441, 9441], "mapped", [114]], [[9442, 9442], "mapped", [115]], [[9443, 9443], "mapped", [116]], [[9444, 9444], "mapped", [117]], [[9445, 9445], "mapped", [118]], [[9446, 9446], "mapped", [119]], [[9447, 9447], "mapped", [120]], [[9448, 9448], "mapped", [121]], [[9449, 9449], "mapped", [122]], [[9450, 9450], "mapped", [48]], [[9451, 9470], "valid", [], "NV8"], [[9471, 9471], "valid", [], "NV8"], [[9472, 9621], "valid", [], "NV8"], [[9622, 9631], "valid", [], "NV8"], [[9632, 9711], "valid", [], "NV8"], [[9712, 9719], "valid", [], "NV8"], [[9720, 9727], "valid", [], "NV8"], [[9728, 9747], "valid", [], "NV8"], [[9748, 9749], "valid", [], "NV8"], [[9750, 9751], "valid", [], "NV8"], [[9752, 9752], "valid", [], "NV8"], [[9753, 9753], "valid", [], "NV8"], [[9754, 9839], "valid", [], "NV8"], [[9840, 9841], "valid", [], "NV8"], [[9842, 9853], "valid", [], "NV8"], [[9854, 9855], "valid", [], "NV8"], [[9856, 9865], "valid", [], "NV8"], [[9866, 9873], "valid", [], "NV8"], [[9874, 9884], "valid", [], "NV8"], [[9885, 9885], "valid", [], "NV8"], [[9886, 9887], "valid", [], "NV8"], [[9888, 9889], "valid", [], "NV8"], [[9890, 9905], "valid", [], "NV8"], [[9906, 9906], "valid", [], "NV8"], [[9907, 9916], "valid", [], "NV8"], [[9917, 9919], "valid", [], "NV8"], [[9920, 9923], "valid", [], "NV8"], [[9924, 9933], "valid", [], "NV8"], [[9934, 9934], "valid", [], "NV8"], [[9935, 9953], "valid", [], "NV8"], [[9954, 9954], "valid", [], "NV8"], [[9955, 9955], "valid", [], "NV8"], [[9956, 9959], "valid", [], "NV8"], [[9960, 9983], "valid", [], "NV8"], [[9984, 9984], "valid", [], "NV8"], [[9985, 9988], "valid", [], "NV8"], [[9989, 9989], "valid", [], "NV8"], [[9990, 9993], "valid", [], "NV8"], [[9994, 9995], "valid", [], "NV8"], [[9996, 10023], "valid", [], "NV8"], [[10024, 10024], "valid", [], "NV8"], [[10025, 10059], "valid", [], "NV8"], [[10060, 10060], "valid", [], "NV8"], [[10061, 10061], "valid", [], "NV8"], [[10062, 10062], "valid", [], "NV8"], [[10063, 10066], "valid", [], "NV8"], [[10067, 10069], "valid", [], "NV8"], [[10070, 10070], "valid", [], "NV8"], [[10071, 10071], "valid", [], "NV8"], [[10072, 10078], "valid", [], "NV8"], [[10079, 10080], "valid", [], "NV8"], [[10081, 10087], "valid", [], "NV8"], [[10088, 10101], "valid", [], "NV8"], [[10102, 10132], "valid", [], "NV8"], [[10133, 10135], "valid", [], "NV8"], [[10136, 10159], "valid", [], "NV8"], [[10160, 10160], "valid", [], "NV8"], [[10161, 10174], "valid", [], "NV8"], [[10175, 10175], "valid", [], "NV8"], [[10176, 10182], "valid", [], "NV8"], [[10183, 10186], "valid", [], "NV8"], [[10187, 10187], "valid", [], "NV8"], [[10188, 10188], "valid", [], "NV8"], [[10189, 10189], "valid", [], "NV8"], [[10190, 10191], "valid", [], "NV8"], [[10192, 10219], "valid", [], "NV8"], [[10220, 10223], "valid", [], "NV8"], [[10224, 10239], "valid", [], "NV8"], [[10240, 10495], "valid", [], "NV8"], [[10496, 10763], "valid", [], "NV8"], [[10764, 10764], "mapped", [8747, 8747, 8747, 8747]], [[10765, 10867], "valid", [], "NV8"], [[10868, 10868], "disallowed_STD3_mapped", [58, 58, 61]], [[10869, 10869], "disallowed_STD3_mapped", [61, 61]], [[10870, 10870], "disallowed_STD3_mapped", [61, 61, 61]], [[10871, 10971], "valid", [], "NV8"], [[10972, 10972], "mapped", [10973, 824]], [[10973, 11007], "valid", [], "NV8"], [[11008, 11021], "valid", [], "NV8"], [[11022, 11027], "valid", [], "NV8"], [[11028, 11034], "valid", [], "NV8"], [[11035, 11039], "valid", [], "NV8"], [[11040, 11043], "valid", [], "NV8"], [[11044, 11084], "valid", [], "NV8"], [[11085, 11087], "valid", [], "NV8"], [[11088, 11092], "valid", [], "NV8"], [[11093, 11097], "valid", [], "NV8"], [[11098, 11123], "valid", [], "NV8"], [[11124, 11125], "disallowed"], [[11126, 11157], "valid", [], "NV8"], [[11158, 11159], "disallowed"], [[11160, 11193], "valid", [], "NV8"], [[11194, 11196], "disallowed"], [[11197, 11208], "valid", [], "NV8"], [[11209, 11209], "disallowed"], [[11210, 11217], "valid", [], "NV8"], [[11218, 11243], "disallowed"], [[11244, 11247], "valid", [], "NV8"], [[11248, 11263], "disallowed"], [[11264, 11264], "mapped", [11312]], [[11265, 11265], "mapped", [11313]], [[11266, 11266], "mapped", [11314]], [[11267, 11267], "mapped", [11315]], [[11268, 11268], "mapped", [11316]], [[11269, 11269], "mapped", [11317]], [[11270, 11270], "mapped", [11318]], [[11271, 11271], "mapped", [11319]], [[11272, 11272], "mapped", [11320]], [[11273, 11273], "mapped", [11321]], [[11274, 11274], "mapped", [11322]], [[11275, 11275], "mapped", [11323]], [[11276, 11276], "mapped", [11324]], [[11277, 11277], "mapped", [11325]], [[11278, 11278], "mapped", [11326]], [[11279, 11279], "mapped", [11327]], [[11280, 11280], "mapped", [11328]], [[11281, 11281], "mapped", [11329]], [[11282, 11282], "mapped", [11330]], [[11283, 11283], "mapped", [11331]], [[11284, 11284], "mapped", [11332]], [[11285, 11285], "mapped", [11333]], [[11286, 11286], "mapped", [11334]], [[11287, 11287], "mapped", [11335]], [[11288, 11288], "mapped", [11336]], [[11289, 11289], "mapped", [11337]], [[11290, 11290], "mapped", [11338]], [[11291, 11291], "mapped", [11339]], [[11292, 11292], "mapped", [11340]], [[11293, 11293], "mapped", [11341]], [[11294, 11294], "mapped", [11342]], [[11295, 11295], "mapped", [11343]], [[11296, 11296], "mapped", [11344]], [[11297, 11297], "mapped", [11345]], [[11298, 11298], "mapped", [11346]], [[11299, 11299], "mapped", [11347]], [[11300, 11300], "mapped", [11348]], [[11301, 11301], "mapped", [11349]], [[11302, 11302], "mapped", [11350]], [[11303, 11303], "mapped", [11351]], [[11304, 11304], "mapped", [11352]], [[11305, 11305], "mapped", [11353]], [[11306, 11306], "mapped", [11354]], [[11307, 11307], "mapped", [11355]], [[11308, 11308], "mapped", [11356]], [[11309, 11309], "mapped", [11357]], [[11310, 11310], "mapped", [11358]], [[11311, 11311], "disallowed"], [[11312, 11358], "valid"], [[11359, 11359], "disallowed"], [[11360, 11360], "mapped", [11361]], [[11361, 11361], "valid"], [[11362, 11362], "mapped", [619]], [[11363, 11363], "mapped", [7549]], [[11364, 11364], "mapped", [637]], [[11365, 11366], "valid"], [[11367, 11367], "mapped", [11368]], [[11368, 11368], "valid"], [[11369, 11369], "mapped", [11370]], [[11370, 11370], "valid"], [[11371, 11371], "mapped", [11372]], [[11372, 11372], "valid"], [[11373, 11373], "mapped", [593]], [[11374, 11374], "mapped", [625]], [[11375, 11375], "mapped", [592]], [[11376, 11376], "mapped", [594]], [[11377, 11377], "valid"], [[11378, 11378], "mapped", [11379]], [[11379, 11379], "valid"], [[11380, 11380], "valid"], [[11381, 11381], "mapped", [11382]], [[11382, 11383], "valid"], [[11384, 11387], "valid"], [[11388, 11388], "mapped", [106]], [[11389, 11389], "mapped", [118]], [[11390, 11390], "mapped", [575]], [[11391, 11391], "mapped", [576]], [[11392, 11392], "mapped", [11393]], [[11393, 11393], "valid"], [[11394, 11394], "mapped", [11395]], [[11395, 11395], "valid"], [[11396, 11396], "mapped", [11397]], [[11397, 11397], "valid"], [[11398, 11398], "mapped", [11399]], [[11399, 11399], "valid"], [[11400, 11400], "mapped", [11401]], [[11401, 11401], "valid"], [[11402, 11402], "mapped", [11403]], [[11403, 11403], "valid"], [[11404, 11404], "mapped", [11405]], [[11405, 11405], "valid"], [[11406, 11406], "mapped", [11407]], [[11407, 11407], "valid"], [[11408, 11408], "mapped", [11409]], [[11409, 11409], "valid"], [[11410, 11410], "mapped", [11411]], [[11411, 11411], "valid"], [[11412, 11412], "mapped", [11413]], [[11413, 11413], "valid"], [[11414, 11414], "mapped", [11415]], [[11415, 11415], "valid"], [[11416, 11416], "mapped", [11417]], [[11417, 11417], "valid"], [[11418, 11418], "mapped", [11419]], [[11419, 11419], "valid"], [[11420, 11420], "mapped", [11421]], [[11421, 11421], "valid"], [[11422, 11422], "mapped", [11423]], [[11423, 11423], "valid"], [[11424, 11424], "mapped", [11425]], [[11425, 11425], "valid"], [[11426, 11426], "mapped", [11427]], [[11427, 11427], "valid"], [[11428, 11428], "mapped", [11429]], [[11429, 11429], "valid"], [[11430, 11430], "mapped", [11431]], [[11431, 11431], "valid"], [[11432, 11432], "mapped", [11433]], [[11433, 11433], "valid"], [[11434, 11434], "mapped", [11435]], [[11435, 11435], "valid"], [[11436, 11436], "mapped", [11437]], [[11437, 11437], "valid"], [[11438, 11438], "mapped", [11439]], [[11439, 11439], "valid"], [[11440, 11440], "mapped", [11441]], [[11441, 11441], "valid"], [[11442, 11442], "mapped", [11443]], [[11443, 11443], "valid"], [[11444, 11444], "mapped", [11445]], [[11445, 11445], "valid"], [[11446, 11446], "mapped", [11447]], [[11447, 11447], "valid"], [[11448, 11448], "mapped", [11449]], [[11449, 11449], "valid"], [[11450, 11450], "mapped", [11451]], [[11451, 11451], "valid"], [[11452, 11452], "mapped", [11453]], [[11453, 11453], "valid"], [[11454, 11454], "mapped", [11455]], [[11455, 11455], "valid"], [[11456, 11456], "mapped", [11457]], [[11457, 11457], "valid"], [[11458, 11458], "mapped", [11459]], [[11459, 11459], "valid"], [[11460, 11460], "mapped", [11461]], [[11461, 11461], "valid"], [[11462, 11462], "mapped", [11463]], [[11463, 11463], "valid"], [[11464, 11464], "mapped", [11465]], [[11465, 11465], "valid"], [[11466, 11466], "mapped", [11467]], [[11467, 11467], "valid"], [[11468, 11468], "mapped", [11469]], [[11469, 11469], "valid"], [[11470, 11470], "mapped", [11471]], [[11471, 11471], "valid"], [[11472, 11472], "mapped", [11473]], [[11473, 11473], "valid"], [[11474, 11474], "mapped", [11475]], [[11475, 11475], "valid"], [[11476, 11476], "mapped", [11477]], [[11477, 11477], "valid"], [[11478, 11478], "mapped", [11479]], [[11479, 11479], "valid"], [[11480, 11480], "mapped", [11481]], [[11481, 11481], "valid"], [[11482, 11482], "mapped", [11483]], [[11483, 11483], "valid"], [[11484, 11484], "mapped", [11485]], [[11485, 11485], "valid"], [[11486, 11486], "mapped", [11487]], [[11487, 11487], "valid"], [[11488, 11488], "mapped", [11489]], [[11489, 11489], "valid"], [[11490, 11490], "mapped", [11491]], [[11491, 11492], "valid"], [[11493, 11498], "valid", [], "NV8"], [[11499, 11499], "mapped", [11500]], [[11500, 11500], "valid"], [[11501, 11501], "mapped", [11502]], [[11502, 11505], "valid"], [[11506, 11506], "mapped", [11507]], [[11507, 11507], "valid"], [[11508, 11512], "disallowed"], [[11513, 11519], "valid", [], "NV8"], [[11520, 11557], "valid"], [[11558, 11558], "disallowed"], [[11559, 11559], "valid"], [[11560, 11564], "disallowed"], [[11565, 11565], "valid"], [[11566, 11567], "disallowed"], [[11568, 11621], "valid"], [[11622, 11623], "valid"], [[11624, 11630], "disallowed"], [[11631, 11631], "mapped", [11617]], [[11632, 11632], "valid", [], "NV8"], [[11633, 11646], "disallowed"], [[11647, 11647], "valid"], [[11648, 11670], "valid"], [[11671, 11679], "disallowed"], [[11680, 11686], "valid"], [[11687, 11687], "disallowed"], [[11688, 11694], "valid"], [[11695, 11695], "disallowed"], [[11696, 11702], "valid"], [[11703, 11703], "disallowed"], [[11704, 11710], "valid"], [[11711, 11711], "disallowed"], [[11712, 11718], "valid"], [[11719, 11719], "disallowed"], [[11720, 11726], "valid"], [[11727, 11727], "disallowed"], [[11728, 11734], "valid"], [[11735, 11735], "disallowed"], [[11736, 11742], "valid"], [[11743, 11743], "disallowed"], [[11744, 11775], "valid"], [[11776, 11799], "valid", [], "NV8"], [[11800, 11803], "valid", [], "NV8"], [[11804, 11805], "valid", [], "NV8"], [[11806, 11822], "valid", [], "NV8"], [[11823, 11823], "valid"], [[11824, 11824], "valid", [], "NV8"], [[11825, 11825], "valid", [], "NV8"], [[11826, 11835], "valid", [], "NV8"], [[11836, 11842], "valid", [], "NV8"], [[11843, 11903], "disallowed"], [[11904, 11929], "valid", [], "NV8"], [[11930, 11930], "disallowed"], [[11931, 11934], "valid", [], "NV8"], [[11935, 11935], "mapped", [27597]], [[11936, 12018], "valid", [], "NV8"], [[12019, 12019], "mapped", [40863]], [[12020, 12031], "disallowed"], [[12032, 12032], "mapped", [19968]], [[12033, 12033], "mapped", [20008]], [[12034, 12034], "mapped", [20022]], [[12035, 12035], "mapped", [20031]], [[12036, 12036], "mapped", [20057]], [[12037, 12037], "mapped", [20101]], [[12038, 12038], "mapped", [20108]], [[12039, 12039], "mapped", [20128]], [[12040, 12040], "mapped", [20154]], [[12041, 12041], "mapped", [20799]], [[12042, 12042], "mapped", [20837]], [[12043, 12043], "mapped", [20843]], [[12044, 12044], "mapped", [20866]], [[12045, 12045], "mapped", [20886]], [[12046, 12046], "mapped", [20907]], [[12047, 12047], "mapped", [20960]], [[12048, 12048], "mapped", [20981]], [[12049, 12049], "mapped", [20992]], [[12050, 12050], "mapped", [21147]], [[12051, 12051], "mapped", [21241]], [[12052, 12052], "mapped", [21269]], [[12053, 12053], "mapped", [21274]], [[12054, 12054], "mapped", [21304]], [[12055, 12055], "mapped", [21313]], [[12056, 12056], "mapped", [21340]], [[12057, 12057], "mapped", [21353]], [[12058, 12058], "mapped", [21378]], [[12059, 12059], "mapped", [21430]], [[12060, 12060], "mapped", [21448]], [[12061, 12061], "mapped", [21475]], [[12062, 12062], "mapped", [22231]], [[12063, 12063], "mapped", [22303]], [[12064, 12064], "mapped", [22763]], [[12065, 12065], "mapped", [22786]], [[12066, 12066], "mapped", [22794]], [[12067, 12067], "mapped", [22805]], [[12068, 12068], "mapped", [22823]], [[12069, 12069], "mapped", [22899]], [[12070, 12070], "mapped", [23376]], [[12071, 12071], "mapped", [23424]], [[12072, 12072], "mapped", [23544]], [[12073, 12073], "mapped", [23567]], [[12074, 12074], "mapped", [23586]], [[12075, 12075], "mapped", [23608]], [[12076, 12076], "mapped", [23662]], [[12077, 12077], "mapped", [23665]], [[12078, 12078], "mapped", [24027]], [[12079, 12079], "mapped", [24037]], [[12080, 12080], "mapped", [24049]], [[12081, 12081], "mapped", [24062]], [[12082, 12082], "mapped", [24178]], [[12083, 12083], "mapped", [24186]], [[12084, 12084], "mapped", [24191]], [[12085, 12085], "mapped", [24308]], [[12086, 12086], "mapped", [24318]], [[12087, 12087], "mapped", [24331]], [[12088, 12088], "mapped", [24339]], [[12089, 12089], "mapped", [24400]], [[12090, 12090], "mapped", [24417]], [[12091, 12091], "mapped", [24435]], [[12092, 12092], "mapped", [24515]], [[12093, 12093], "mapped", [25096]], [[12094, 12094], "mapped", [25142]], [[12095, 12095], "mapped", [25163]], [[12096, 12096], "mapped", [25903]], [[12097, 12097], "mapped", [25908]], [[12098, 12098], "mapped", [25991]], [[12099, 12099], "mapped", [26007]], [[12100, 12100], "mapped", [26020]], [[12101, 12101], "mapped", [26041]], [[12102, 12102], "mapped", [26080]], [[12103, 12103], "mapped", [26085]], [[12104, 12104], "mapped", [26352]], [[12105, 12105], "mapped", [26376]], [[12106, 12106], "mapped", [26408]], [[12107, 12107], "mapped", [27424]], [[12108, 12108], "mapped", [27490]], [[12109, 12109], "mapped", [27513]], [[12110, 12110], "mapped", [27571]], [[12111, 12111], "mapped", [27595]], [[12112, 12112], "mapped", [27604]], [[12113, 12113], "mapped", [27611]], [[12114, 12114], "mapped", [27663]], [[12115, 12115], "mapped", [27668]], [[12116, 12116], "mapped", [27700]], [[12117, 12117], "mapped", [28779]], [[12118, 12118], "mapped", [29226]], [[12119, 12119], "mapped", [29238]], [[12120, 12120], "mapped", [29243]], [[12121, 12121], "mapped", [29247]], [[12122, 12122], "mapped", [29255]], [[12123, 12123], "mapped", [29273]], [[12124, 12124], "mapped", [29275]], [[12125, 12125], "mapped", [29356]], [[12126, 12126], "mapped", [29572]], [[12127, 12127], "mapped", [29577]], [[12128, 12128], "mapped", [29916]], [[12129, 12129], "mapped", [29926]], [[12130, 12130], "mapped", [29976]], [[12131, 12131], "mapped", [29983]], [[12132, 12132], "mapped", [29992]], [[12133, 12133], "mapped", [3e4]], [[12134, 12134], "mapped", [30091]], [[12135, 12135], "mapped", [30098]], [[12136, 12136], "mapped", [30326]], [[12137, 12137], "mapped", [30333]], [[12138, 12138], "mapped", [30382]], [[12139, 12139], "mapped", [30399]], [[12140, 12140], "mapped", [30446]], [[12141, 12141], "mapped", [30683]], [[12142, 12142], "mapped", [30690]], [[12143, 12143], "mapped", [30707]], [[12144, 12144], "mapped", [31034]], [[12145, 12145], "mapped", [31160]], [[12146, 12146], "mapped", [31166]], [[12147, 12147], "mapped", [31348]], [[12148, 12148], "mapped", [31435]], [[12149, 12149], "mapped", [31481]], [[12150, 12150], "mapped", [31859]], [[12151, 12151], "mapped", [31992]], [[12152, 12152], "mapped", [32566]], [[12153, 12153], "mapped", [32593]], [[12154, 12154], "mapped", [32650]], [[12155, 12155], "mapped", [32701]], [[12156, 12156], "mapped", [32769]], [[12157, 12157], "mapped", [32780]], [[12158, 12158], "mapped", [32786]], [[12159, 12159], "mapped", [32819]], [[12160, 12160], "mapped", [32895]], [[12161, 12161], "mapped", [32905]], [[12162, 12162], "mapped", [33251]], [[12163, 12163], "mapped", [33258]], [[12164, 12164], "mapped", [33267]], [[12165, 12165], "mapped", [33276]], [[12166, 12166], "mapped", [33292]], [[12167, 12167], "mapped", [33307]], [[12168, 12168], "mapped", [33311]], [[12169, 12169], "mapped", [33390]], [[12170, 12170], "mapped", [33394]], [[12171, 12171], "mapped", [33400]], [[12172, 12172], "mapped", [34381]], [[12173, 12173], "mapped", [34411]], [[12174, 12174], "mapped", [34880]], [[12175, 12175], "mapped", [34892]], [[12176, 12176], "mapped", [34915]], [[12177, 12177], "mapped", [35198]], [[12178, 12178], "mapped", [35211]], [[12179, 12179], "mapped", [35282]], [[12180, 12180], "mapped", [35328]], [[12181, 12181], "mapped", [35895]], [[12182, 12182], "mapped", [35910]], [[12183, 12183], "mapped", [35925]], [[12184, 12184], "mapped", [35960]], [[12185, 12185], "mapped", [35997]], [[12186, 12186], "mapped", [36196]], [[12187, 12187], "mapped", [36208]], [[12188, 12188], "mapped", [36275]], [[12189, 12189], "mapped", [36523]], [[12190, 12190], "mapped", [36554]], [[12191, 12191], "mapped", [36763]], [[12192, 12192], "mapped", [36784]], [[12193, 12193], "mapped", [36789]], [[12194, 12194], "mapped", [37009]], [[12195, 12195], "mapped", [37193]], [[12196, 12196], "mapped", [37318]], [[12197, 12197], "mapped", [37324]], [[12198, 12198], "mapped", [37329]], [[12199, 12199], "mapped", [38263]], [[12200, 12200], "mapped", [38272]], [[12201, 12201], "mapped", [38428]], [[12202, 12202], "mapped", [38582]], [[12203, 12203], "mapped", [38585]], [[12204, 12204], "mapped", [38632]], [[12205, 12205], "mapped", [38737]], [[12206, 12206], "mapped", [38750]], [[12207, 12207], "mapped", [38754]], [[12208, 12208], "mapped", [38761]], [[12209, 12209], "mapped", [38859]], [[12210, 12210], "mapped", [38893]], [[12211, 12211], "mapped", [38899]], [[12212, 12212], "mapped", [38913]], [[12213, 12213], "mapped", [39080]], [[12214, 12214], "mapped", [39131]], [[12215, 12215], "mapped", [39135]], [[12216, 12216], "mapped", [39318]], [[12217, 12217], "mapped", [39321]], [[12218, 12218], "mapped", [39340]], [[12219, 12219], "mapped", [39592]], [[12220, 12220], "mapped", [39640]], [[12221, 12221], "mapped", [39647]], [[12222, 12222], "mapped", [39717]], [[12223, 12223], "mapped", [39727]], [[12224, 12224], "mapped", [39730]], [[12225, 12225], "mapped", [39740]], [[12226, 12226], "mapped", [39770]], [[12227, 12227], "mapped", [40165]], [[12228, 12228], "mapped", [40565]], [[12229, 12229], "mapped", [40575]], [[12230, 12230], "mapped", [40613]], [[12231, 12231], "mapped", [40635]], [[12232, 12232], "mapped", [40643]], [[12233, 12233], "mapped", [40653]], [[12234, 12234], "mapped", [40657]], [[12235, 12235], "mapped", [40697]], [[12236, 12236], "mapped", [40701]], [[12237, 12237], "mapped", [40718]], [[12238, 12238], "mapped", [40723]], [[12239, 12239], "mapped", [40736]], [[12240, 12240], "mapped", [40763]], [[12241, 12241], "mapped", [40778]], [[12242, 12242], "mapped", [40786]], [[12243, 12243], "mapped", [40845]], [[12244, 12244], "mapped", [40860]], [[12245, 12245], "mapped", [40864]], [[12246, 12271], "disallowed"], [[12272, 12283], "disallowed"], [[12284, 12287], "disallowed"], [[12288, 12288], "disallowed_STD3_mapped", [32]], [[12289, 12289], "valid", [], "NV8"], [[12290, 12290], "mapped", [46]], [[12291, 12292], "valid", [], "NV8"], [[12293, 12295], "valid"], [[12296, 12329], "valid", [], "NV8"], [[12330, 12333], "valid"], [[12334, 12341], "valid", [], "NV8"], [[12342, 12342], "mapped", [12306]], [[12343, 12343], "valid", [], "NV8"], [[12344, 12344], "mapped", [21313]], [[12345, 12345], "mapped", [21316]], [[12346, 12346], "mapped", [21317]], [[12347, 12347], "valid", [], "NV8"], [[12348, 12348], "valid"], [[12349, 12349], "valid", [], "NV8"], [[12350, 12350], "valid", [], "NV8"], [[12351, 12351], "valid", [], "NV8"], [[12352, 12352], "disallowed"], [[12353, 12436], "valid"], [[12437, 12438], "valid"], [[12439, 12440], "disallowed"], [[12441, 12442], "valid"], [[12443, 12443], "disallowed_STD3_mapped", [32, 12441]], [[12444, 12444], "disallowed_STD3_mapped", [32, 12442]], [[12445, 12446], "valid"], [[12447, 12447], "mapped", [12424, 12426]], [[12448, 12448], "valid", [], "NV8"], [[12449, 12542], "valid"], [[12543, 12543], "mapped", [12467, 12488]], [[12544, 12548], "disallowed"], [[12549, 12588], "valid"], [[12589, 12589], "valid"], [[12590, 12592], "disallowed"], [[12593, 12593], "mapped", [4352]], [[12594, 12594], "mapped", [4353]], [[12595, 12595], "mapped", [4522]], [[12596, 12596], "mapped", [4354]], [[12597, 12597], "mapped", [4524]], [[12598, 12598], "mapped", [4525]], [[12599, 12599], "mapped", [4355]], [[12600, 12600], "mapped", [4356]], [[12601, 12601], "mapped", [4357]], [[12602, 12602], "mapped", [4528]], [[12603, 12603], "mapped", [4529]], [[12604, 12604], "mapped", [4530]], [[12605, 12605], "mapped", [4531]], [[12606, 12606], "mapped", [4532]], [[12607, 12607], "mapped", [4533]], [[12608, 12608], "mapped", [4378]], [[12609, 12609], "mapped", [4358]], [[12610, 12610], "mapped", [4359]], [[12611, 12611], "mapped", [4360]], [[12612, 12612], "mapped", [4385]], [[12613, 12613], "mapped", [4361]], [[12614, 12614], "mapped", [4362]], [[12615, 12615], "mapped", [4363]], [[12616, 12616], "mapped", [4364]], [[12617, 12617], "mapped", [4365]], [[12618, 12618], "mapped", [4366]], [[12619, 12619], "mapped", [4367]], [[12620, 12620], "mapped", [4368]], [[12621, 12621], "mapped", [4369]], [[12622, 12622], "mapped", [4370]], [[12623, 12623], "mapped", [4449]], [[12624, 12624], "mapped", [4450]], [[12625, 12625], "mapped", [4451]], [[12626, 12626], "mapped", [4452]], [[12627, 12627], "mapped", [4453]], [[12628, 12628], "mapped", [4454]], [[12629, 12629], "mapped", [4455]], [[12630, 12630], "mapped", [4456]], [[12631, 12631], "mapped", [4457]], [[12632, 12632], "mapped", [4458]], [[12633, 12633], "mapped", [4459]], [[12634, 12634], "mapped", [4460]], [[12635, 12635], "mapped", [4461]], [[12636, 12636], "mapped", [4462]], [[12637, 12637], "mapped", [4463]], [[12638, 12638], "mapped", [4464]], [[12639, 12639], "mapped", [4465]], [[12640, 12640], "mapped", [4466]], [[12641, 12641], "mapped", [4467]], [[12642, 12642], "mapped", [4468]], [[12643, 12643], "mapped", [4469]], [[12644, 12644], "disallowed"], [[12645, 12645], "mapped", [4372]], [[12646, 12646], "mapped", [4373]], [[12647, 12647], "mapped", [4551]], [[12648, 12648], "mapped", [4552]], [[12649, 12649], "mapped", [4556]], [[12650, 12650], "mapped", [4558]], [[12651, 12651], "mapped", [4563]], [[12652, 12652], "mapped", [4567]], [[12653, 12653], "mapped", [4569]], [[12654, 12654], "mapped", [4380]], [[12655, 12655], "mapped", [4573]], [[12656, 12656], "mapped", [4575]], [[12657, 12657], "mapped", [4381]], [[12658, 12658], "mapped", [4382]], [[12659, 12659], "mapped", [4384]], [[12660, 12660], "mapped", [4386]], [[12661, 12661], "mapped", [4387]], [[12662, 12662], "mapped", [4391]], [[12663, 12663], "mapped", [4393]], [[12664, 12664], "mapped", [4395]], [[12665, 12665], "mapped", [4396]], [[12666, 12666], "mapped", [4397]], [[12667, 12667], "mapped", [4398]], [[12668, 12668], "mapped", [4399]], [[12669, 12669], "mapped", [4402]], [[12670, 12670], "mapped", [4406]], [[12671, 12671], "mapped", [4416]], [[12672, 12672], "mapped", [4423]], [[12673, 12673], "mapped", [4428]], [[12674, 12674], "mapped", [4593]], [[12675, 12675], "mapped", [4594]], [[12676, 12676], "mapped", [4439]], [[12677, 12677], "mapped", [4440]], [[12678, 12678], "mapped", [4441]], [[12679, 12679], "mapped", [4484]], [[12680, 12680], "mapped", [4485]], [[12681, 12681], "mapped", [4488]], [[12682, 12682], "mapped", [4497]], [[12683, 12683], "mapped", [4498]], [[12684, 12684], "mapped", [4500]], [[12685, 12685], "mapped", [4510]], [[12686, 12686], "mapped", [4513]], [[12687, 12687], "disallowed"], [[12688, 12689], "valid", [], "NV8"], [[12690, 12690], "mapped", [19968]], [[12691, 12691], "mapped", [20108]], [[12692, 12692], "mapped", [19977]], [[12693, 12693], "mapped", [22235]], [[12694, 12694], "mapped", [19978]], [[12695, 12695], "mapped", [20013]], [[12696, 12696], "mapped", [19979]], [[12697, 12697], "mapped", [30002]], [[12698, 12698], "mapped", [20057]], [[12699, 12699], "mapped", [19993]], [[12700, 12700], "mapped", [19969]], [[12701, 12701], "mapped", [22825]], [[12702, 12702], "mapped", [22320]], [[12703, 12703], "mapped", [20154]], [[12704, 12727], "valid"], [[12728, 12730], "valid"], [[12731, 12735], "disallowed"], [[12736, 12751], "valid", [], "NV8"], [[12752, 12771], "valid", [], "NV8"], [[12772, 12783], "disallowed"], [[12784, 12799], "valid"], [[12800, 12800], "disallowed_STD3_mapped", [40, 4352, 41]], [[12801, 12801], "disallowed_STD3_mapped", [40, 4354, 41]], [[12802, 12802], "disallowed_STD3_mapped", [40, 4355, 41]], [[12803, 12803], "disallowed_STD3_mapped", [40, 4357, 41]], [[12804, 12804], "disallowed_STD3_mapped", [40, 4358, 41]], [[12805, 12805], "disallowed_STD3_mapped", [40, 4359, 41]], [[12806, 12806], "disallowed_STD3_mapped", [40, 4361, 41]], [[12807, 12807], "disallowed_STD3_mapped", [40, 4363, 41]], [[12808, 12808], "disallowed_STD3_mapped", [40, 4364, 41]], [[12809, 12809], "disallowed_STD3_mapped", [40, 4366, 41]], [[12810, 12810], "disallowed_STD3_mapped", [40, 4367, 41]], [[12811, 12811], "disallowed_STD3_mapped", [40, 4368, 41]], [[12812, 12812], "disallowed_STD3_mapped", [40, 4369, 41]], [[12813, 12813], "disallowed_STD3_mapped", [40, 4370, 41]], [[12814, 12814], "disallowed_STD3_mapped", [40, 44032, 41]], [[12815, 12815], "disallowed_STD3_mapped", [40, 45208, 41]], [[12816, 12816], "disallowed_STD3_mapped", [40, 45796, 41]], [[12817, 12817], "disallowed_STD3_mapped", [40, 46972, 41]], [[12818, 12818], "disallowed_STD3_mapped", [40, 47560, 41]], [[12819, 12819], "disallowed_STD3_mapped", [40, 48148, 41]], [[12820, 12820], "disallowed_STD3_mapped", [40, 49324, 41]], [[12821, 12821], "disallowed_STD3_mapped", [40, 50500, 41]], [[12822, 12822], "disallowed_STD3_mapped", [40, 51088, 41]], [[12823, 12823], "disallowed_STD3_mapped", [40, 52264, 41]], [[12824, 12824], "disallowed_STD3_mapped", [40, 52852, 41]], [[12825, 12825], "disallowed_STD3_mapped", [40, 53440, 41]], [[12826, 12826], "disallowed_STD3_mapped", [40, 54028, 41]], [[12827, 12827], "disallowed_STD3_mapped", [40, 54616, 41]], [[12828, 12828], "disallowed_STD3_mapped", [40, 51452, 41]], [[12829, 12829], "disallowed_STD3_mapped", [40, 50724, 51204, 41]], [[12830, 12830], "disallowed_STD3_mapped", [40, 50724, 54980, 41]], [[12831, 12831], "disallowed"], [[12832, 12832], "disallowed_STD3_mapped", [40, 19968, 41]], [[12833, 12833], "disallowed_STD3_mapped", [40, 20108, 41]], [[12834, 12834], "disallowed_STD3_mapped", [40, 19977, 41]], [[12835, 12835], "disallowed_STD3_mapped", [40, 22235, 41]], [[12836, 12836], "disallowed_STD3_mapped", [40, 20116, 41]], [[12837, 12837], "disallowed_STD3_mapped", [40, 20845, 41]], [[12838, 12838], "disallowed_STD3_mapped", [40, 19971, 41]], [[12839, 12839], "disallowed_STD3_mapped", [40, 20843, 41]], [[12840, 12840], "disallowed_STD3_mapped", [40, 20061, 41]], [[12841, 12841], "disallowed_STD3_mapped", [40, 21313, 41]], [[12842, 12842], "disallowed_STD3_mapped", [40, 26376, 41]], [[12843, 12843], "disallowed_STD3_mapped", [40, 28779, 41]], [[12844, 12844], "disallowed_STD3_mapped", [40, 27700, 41]], [[12845, 12845], "disallowed_STD3_mapped", [40, 26408, 41]], [[12846, 12846], "disallowed_STD3_mapped", [40, 37329, 41]], [[12847, 12847], "disallowed_STD3_mapped", [40, 22303, 41]], [[12848, 12848], "disallowed_STD3_mapped", [40, 26085, 41]], [[12849, 12849], "disallowed_STD3_mapped", [40, 26666, 41]], [[12850, 12850], "disallowed_STD3_mapped", [40, 26377, 41]], [[12851, 12851], "disallowed_STD3_mapped", [40, 31038, 41]], [[12852, 12852], "disallowed_STD3_mapped", [40, 21517, 41]], [[12853, 12853], "disallowed_STD3_mapped", [40, 29305, 41]], [[12854, 12854], "disallowed_STD3_mapped", [40, 36001, 41]], [[12855, 12855], "disallowed_STD3_mapped", [40, 31069, 41]], [[12856, 12856], "disallowed_STD3_mapped", [40, 21172, 41]], [[12857, 12857], "disallowed_STD3_mapped", [40, 20195, 41]], [[12858, 12858], "disallowed_STD3_mapped", [40, 21628, 41]], [[12859, 12859], "disallowed_STD3_mapped", [40, 23398, 41]], [[12860, 12860], "disallowed_STD3_mapped", [40, 30435, 41]], [[12861, 12861], "disallowed_STD3_mapped", [40, 20225, 41]], [[12862, 12862], "disallowed_STD3_mapped", [40, 36039, 41]], [[12863, 12863], "disallowed_STD3_mapped", [40, 21332, 41]], [[12864, 12864], "disallowed_STD3_mapped", [40, 31085, 41]], [[12865, 12865], "disallowed_STD3_mapped", [40, 20241, 41]], [[12866, 12866], "disallowed_STD3_mapped", [40, 33258, 41]], [[12867, 12867], "disallowed_STD3_mapped", [40, 33267, 41]], [[12868, 12868], "mapped", [21839]], [[12869, 12869], "mapped", [24188]], [[12870, 12870], "mapped", [25991]], [[12871, 12871], "mapped", [31631]], [[12872, 12879], "valid", [], "NV8"], [[12880, 12880], "mapped", [112, 116, 101]], [[12881, 12881], "mapped", [50, 49]], [[12882, 12882], "mapped", [50, 50]], [[12883, 12883], "mapped", [50, 51]], [[12884, 12884], "mapped", [50, 52]], [[12885, 12885], "mapped", [50, 53]], [[12886, 12886], "mapped", [50, 54]], [[12887, 12887], "mapped", [50, 55]], [[12888, 12888], "mapped", [50, 56]], [[12889, 12889], "mapped", [50, 57]], [[12890, 12890], "mapped", [51, 48]], [[12891, 12891], "mapped", [51, 49]], [[12892, 12892], "mapped", [51, 50]], [[12893, 12893], "mapped", [51, 51]], [[12894, 12894], "mapped", [51, 52]], [[12895, 12895], "mapped", [51, 53]], [[12896, 12896], "mapped", [4352]], [[12897, 12897], "mapped", [4354]], [[12898, 12898], "mapped", [4355]], [[12899, 12899], "mapped", [4357]], [[12900, 12900], "mapped", [4358]], [[12901, 12901], "mapped", [4359]], [[12902, 12902], "mapped", [4361]], [[12903, 12903], "mapped", [4363]], [[12904, 12904], "mapped", [4364]], [[12905, 12905], "mapped", [4366]], [[12906, 12906], "mapped", [4367]], [[12907, 12907], "mapped", [4368]], [[12908, 12908], "mapped", [4369]], [[12909, 12909], "mapped", [4370]], [[12910, 12910], "mapped", [44032]], [[12911, 12911], "mapped", [45208]], [[12912, 12912], "mapped", [45796]], [[12913, 12913], "mapped", [46972]], [[12914, 12914], "mapped", [47560]], [[12915, 12915], "mapped", [48148]], [[12916, 12916], "mapped", [49324]], [[12917, 12917], "mapped", [50500]], [[12918, 12918], "mapped", [51088]], [[12919, 12919], "mapped", [52264]], [[12920, 12920], "mapped", [52852]], [[12921, 12921], "mapped", [53440]], [[12922, 12922], "mapped", [54028]], [[12923, 12923], "mapped", [54616]], [[12924, 12924], "mapped", [52280, 44256]], [[12925, 12925], "mapped", [51452, 51032]], [[12926, 12926], "mapped", [50864]], [[12927, 12927], "valid", [], "NV8"], [[12928, 12928], "mapped", [19968]], [[12929, 12929], "mapped", [20108]], [[12930, 12930], "mapped", [19977]], [[12931, 12931], "mapped", [22235]], [[12932, 12932], "mapped", [20116]], [[12933, 12933], "mapped", [20845]], [[12934, 12934], "mapped", [19971]], [[12935, 12935], "mapped", [20843]], [[12936, 12936], "mapped", [20061]], [[12937, 12937], "mapped", [21313]], [[12938, 12938], "mapped", [26376]], [[12939, 12939], "mapped", [28779]], [[12940, 12940], "mapped", [27700]], [[12941, 12941], "mapped", [26408]], [[12942, 12942], "mapped", [37329]], [[12943, 12943], "mapped", [22303]], [[12944, 12944], "mapped", [26085]], [[12945, 12945], "mapped", [26666]], [[12946, 12946], "mapped", [26377]], [[12947, 12947], "mapped", [31038]], [[12948, 12948], "mapped", [21517]], [[12949, 12949], "mapped", [29305]], [[12950, 12950], "mapped", [36001]], [[12951, 12951], "mapped", [31069]], [[12952, 12952], "mapped", [21172]], [[12953, 12953], "mapped", [31192]], [[12954, 12954], "mapped", [30007]], [[12955, 12955], "mapped", [22899]], [[12956, 12956], "mapped", [36969]], [[12957, 12957], "mapped", [20778]], [[12958, 12958], "mapped", [21360]], [[12959, 12959], "mapped", [27880]], [[12960, 12960], "mapped", [38917]], [[12961, 12961], "mapped", [20241]], [[12962, 12962], "mapped", [20889]], [[12963, 12963], "mapped", [27491]], [[12964, 12964], "mapped", [19978]], [[12965, 12965], "mapped", [20013]], [[12966, 12966], "mapped", [19979]], [[12967, 12967], "mapped", [24038]], [[12968, 12968], "mapped", [21491]], [[12969, 12969], "mapped", [21307]], [[12970, 12970], "mapped", [23447]], [[12971, 12971], "mapped", [23398]], [[12972, 12972], "mapped", [30435]], [[12973, 12973], "mapped", [20225]], [[12974, 12974], "mapped", [36039]], [[12975, 12975], "mapped", [21332]], [[12976, 12976], "mapped", [22812]], [[12977, 12977], "mapped", [51, 54]], [[12978, 12978], "mapped", [51, 55]], [[12979, 12979], "mapped", [51, 56]], [[12980, 12980], "mapped", [51, 57]], [[12981, 12981], "mapped", [52, 48]], [[12982, 12982], "mapped", [52, 49]], [[12983, 12983], "mapped", [52, 50]], [[12984, 12984], "mapped", [52, 51]], [[12985, 12985], "mapped", [52, 52]], [[12986, 12986], "mapped", [52, 53]], [[12987, 12987], "mapped", [52, 54]], [[12988, 12988], "mapped", [52, 55]], [[12989, 12989], "mapped", [52, 56]], [[12990, 12990], "mapped", [52, 57]], [[12991, 12991], "mapped", [53, 48]], [[12992, 12992], "mapped", [49, 26376]], [[12993, 12993], "mapped", [50, 26376]], [[12994, 12994], "mapped", [51, 26376]], [[12995, 12995], "mapped", [52, 26376]], [[12996, 12996], "mapped", [53, 26376]], [[12997, 12997], "mapped", [54, 26376]], [[12998, 12998], "mapped", [55, 26376]], [[12999, 12999], "mapped", [56, 26376]], [[13e3, 13e3], "mapped", [57, 26376]], [[13001, 13001], "mapped", [49, 48, 26376]], [[13002, 13002], "mapped", [49, 49, 26376]], [[13003, 13003], "mapped", [49, 50, 26376]], [[13004, 13004], "mapped", [104, 103]], [[13005, 13005], "mapped", [101, 114, 103]], [[13006, 13006], "mapped", [101, 118]], [[13007, 13007], "mapped", [108, 116, 100]], [[13008, 13008], "mapped", [12450]], [[13009, 13009], "mapped", [12452]], [[13010, 13010], "mapped", [12454]], [[13011, 13011], "mapped", [12456]], [[13012, 13012], "mapped", [12458]], [[13013, 13013], "mapped", [12459]], [[13014, 13014], "mapped", [12461]], [[13015, 13015], "mapped", [12463]], [[13016, 13016], "mapped", [12465]], [[13017, 13017], "mapped", [12467]], [[13018, 13018], "mapped", [12469]], [[13019, 13019], "mapped", [12471]], [[13020, 13020], "mapped", [12473]], [[13021, 13021], "mapped", [12475]], [[13022, 13022], "mapped", [12477]], [[13023, 13023], "mapped", [12479]], [[13024, 13024], "mapped", [12481]], [[13025, 13025], "mapped", [12484]], [[13026, 13026], "mapped", [12486]], [[13027, 13027], "mapped", [12488]], [[13028, 13028], "mapped", [12490]], [[13029, 13029], "mapped", [12491]], [[13030, 13030], "mapped", [12492]], [[13031, 13031], "mapped", [12493]], [[13032, 13032], "mapped", [12494]], [[13033, 13033], "mapped", [12495]], [[13034, 13034], "mapped", [12498]], [[13035, 13035], "mapped", [12501]], [[13036, 13036], "mapped", [12504]], [[13037, 13037], "mapped", [12507]], [[13038, 13038], "mapped", [12510]], [[13039, 13039], "mapped", [12511]], [[13040, 13040], "mapped", [12512]], [[13041, 13041], "mapped", [12513]], [[13042, 13042], "mapped", [12514]], [[13043, 13043], "mapped", [12516]], [[13044, 13044], "mapped", [12518]], [[13045, 13045], "mapped", [12520]], [[13046, 13046], "mapped", [12521]], [[13047, 13047], "mapped", [12522]], [[13048, 13048], "mapped", [12523]], [[13049, 13049], "mapped", [12524]], [[13050, 13050], "mapped", [12525]], [[13051, 13051], "mapped", [12527]], [[13052, 13052], "mapped", [12528]], [[13053, 13053], "mapped", [12529]], [[13054, 13054], "mapped", [12530]], [[13055, 13055], "disallowed"], [[13056, 13056], "mapped", [12450, 12497, 12540, 12488]], [[13057, 13057], "mapped", [12450, 12523, 12501, 12449]], [[13058, 13058], "mapped", [12450, 12531, 12506, 12450]], [[13059, 13059], "mapped", [12450, 12540, 12523]], [[13060, 13060], "mapped", [12452, 12491, 12531, 12464]], [[13061, 13061], "mapped", [12452, 12531, 12481]], [[13062, 13062], "mapped", [12454, 12457, 12531]], [[13063, 13063], "mapped", [12456, 12473, 12463, 12540, 12489]], [[13064, 13064], "mapped", [12456, 12540, 12459, 12540]], [[13065, 13065], "mapped", [12458, 12531, 12473]], [[13066, 13066], "mapped", [12458, 12540, 12512]], [[13067, 13067], "mapped", [12459, 12452, 12522]], [[13068, 13068], "mapped", [12459, 12521, 12483, 12488]], [[13069, 13069], "mapped", [12459, 12525, 12522, 12540]], [[13070, 13070], "mapped", [12460, 12525, 12531]], [[13071, 13071], "mapped", [12460, 12531, 12510]], [[13072, 13072], "mapped", [12462, 12460]], [[13073, 13073], "mapped", [12462, 12491, 12540]], [[13074, 13074], "mapped", [12461, 12517, 12522, 12540]], [[13075, 13075], "mapped", [12462, 12523, 12480, 12540]], [[13076, 13076], "mapped", [12461, 12525]], [[13077, 13077], "mapped", [12461, 12525, 12464, 12521, 12512]], [[13078, 13078], "mapped", [12461, 12525, 12513, 12540, 12488, 12523]], [[13079, 13079], "mapped", [12461, 12525, 12527, 12483, 12488]], [[13080, 13080], "mapped", [12464, 12521, 12512]], [[13081, 13081], "mapped", [12464, 12521, 12512, 12488, 12531]], [[13082, 13082], "mapped", [12463, 12523, 12476, 12452, 12525]], [[13083, 13083], "mapped", [12463, 12525, 12540, 12493]], [[13084, 13084], "mapped", [12465, 12540, 12473]], [[13085, 13085], "mapped", [12467, 12523, 12490]], [[13086, 13086], "mapped", [12467, 12540, 12509]], [[13087, 13087], "mapped", [12469, 12452, 12463, 12523]], [[13088, 13088], "mapped", [12469, 12531, 12481, 12540, 12512]], [[13089, 13089], "mapped", [12471, 12522, 12531, 12464]], [[13090, 13090], "mapped", [12475, 12531, 12481]], [[13091, 13091], "mapped", [12475, 12531, 12488]], [[13092, 13092], "mapped", [12480, 12540, 12473]], [[13093, 13093], "mapped", [12487, 12471]], [[13094, 13094], "mapped", [12489, 12523]], [[13095, 13095], "mapped", [12488, 12531]], [[13096, 13096], "mapped", [12490, 12494]], [[13097, 13097], "mapped", [12494, 12483, 12488]], [[13098, 13098], "mapped", [12495, 12452, 12484]], [[13099, 13099], "mapped", [12497, 12540, 12475, 12531, 12488]], [[13100, 13100], "mapped", [12497, 12540, 12484]], [[13101, 13101], "mapped", [12496, 12540, 12524, 12523]], [[13102, 13102], "mapped", [12500, 12450, 12473, 12488, 12523]], [[13103, 13103], "mapped", [12500, 12463, 12523]], [[13104, 13104], "mapped", [12500, 12467]], [[13105, 13105], "mapped", [12499, 12523]], [[13106, 13106], "mapped", [12501, 12449, 12521, 12483, 12489]], [[13107, 13107], "mapped", [12501, 12451, 12540, 12488]], [[13108, 13108], "mapped", [12502, 12483, 12471, 12455, 12523]], [[13109, 13109], "mapped", [12501, 12521, 12531]], [[13110, 13110], "mapped", [12504, 12463, 12479, 12540, 12523]], [[13111, 13111], "mapped", [12506, 12477]], [[13112, 13112], "mapped", [12506, 12491, 12498]], [[13113, 13113], "mapped", [12504, 12523, 12484]], [[13114, 13114], "mapped", [12506, 12531, 12473]], [[13115, 13115], "mapped", [12506, 12540, 12472]], [[13116, 13116], "mapped", [12505, 12540, 12479]], [[13117, 13117], "mapped", [12509, 12452, 12531, 12488]], [[13118, 13118], "mapped", [12508, 12523, 12488]], [[13119, 13119], "mapped", [12507, 12531]], [[13120, 13120], "mapped", [12509, 12531, 12489]], [[13121, 13121], "mapped", [12507, 12540, 12523]], [[13122, 13122], "mapped", [12507, 12540, 12531]], [[13123, 13123], "mapped", [12510, 12452, 12463, 12525]], [[13124, 13124], "mapped", [12510, 12452, 12523]], [[13125, 13125], "mapped", [12510, 12483, 12495]], [[13126, 13126], "mapped", [12510, 12523, 12463]], [[13127, 13127], "mapped", [12510, 12531, 12471, 12519, 12531]], [[13128, 13128], "mapped", [12511, 12463, 12525, 12531]], [[13129, 13129], "mapped", [12511, 12522]], [[13130, 13130], "mapped", [12511, 12522, 12496, 12540, 12523]], [[13131, 13131], "mapped", [12513, 12460]], [[13132, 13132], "mapped", [12513, 12460, 12488, 12531]], [[13133, 13133], "mapped", [12513, 12540, 12488, 12523]], [[13134, 13134], "mapped", [12516, 12540, 12489]], [[13135, 13135], "mapped", [12516, 12540, 12523]], [[13136, 13136], "mapped", [12518, 12450, 12531]], [[13137, 13137], "mapped", [12522, 12483, 12488, 12523]], [[13138, 13138], "mapped", [12522, 12521]], [[13139, 13139], "mapped", [12523, 12500, 12540]], [[13140, 13140], "mapped", [12523, 12540, 12502, 12523]], [[13141, 13141], "mapped", [12524, 12512]], [[13142, 13142], "mapped", [12524, 12531, 12488, 12466, 12531]], [[13143, 13143], "mapped", [12527, 12483, 12488]], [[13144, 13144], "mapped", [48, 28857]], [[13145, 13145], "mapped", [49, 28857]], [[13146, 13146], "mapped", [50, 28857]], [[13147, 13147], "mapped", [51, 28857]], [[13148, 13148], "mapped", [52, 28857]], [[13149, 13149], "mapped", [53, 28857]], [[13150, 13150], "mapped", [54, 28857]], [[13151, 13151], "mapped", [55, 28857]], [[13152, 13152], "mapped", [56, 28857]], [[13153, 13153], "mapped", [57, 28857]], [[13154, 13154], "mapped", [49, 48, 28857]], [[13155, 13155], "mapped", [49, 49, 28857]], [[13156, 13156], "mapped", [49, 50, 28857]], [[13157, 13157], "mapped", [49, 51, 28857]], [[13158, 13158], "mapped", [49, 52, 28857]], [[13159, 13159], "mapped", [49, 53, 28857]], [[13160, 13160], "mapped", [49, 54, 28857]], [[13161, 13161], "mapped", [49, 55, 28857]], [[13162, 13162], "mapped", [49, 56, 28857]], [[13163, 13163], "mapped", [49, 57, 28857]], [[13164, 13164], "mapped", [50, 48, 28857]], [[13165, 13165], "mapped", [50, 49, 28857]], [[13166, 13166], "mapped", [50, 50, 28857]], [[13167, 13167], "mapped", [50, 51, 28857]], [[13168, 13168], "mapped", [50, 52, 28857]], [[13169, 13169], "mapped", [104, 112, 97]], [[13170, 13170], "mapped", [100, 97]], [[13171, 13171], "mapped", [97, 117]], [[13172, 13172], "mapped", [98, 97, 114]], [[13173, 13173], "mapped", [111, 118]], [[13174, 13174], "mapped", [112, 99]], [[13175, 13175], "mapped", [100, 109]], [[13176, 13176], "mapped", [100, 109, 50]], [[13177, 13177], "mapped", [100, 109, 51]], [[13178, 13178], "mapped", [105, 117]], [[13179, 13179], "mapped", [24179, 25104]], [[13180, 13180], "mapped", [26157, 21644]], [[13181, 13181], "mapped", [22823, 27491]], [[13182, 13182], "mapped", [26126, 27835]], [[13183, 13183], "mapped", [26666, 24335, 20250, 31038]], [[13184, 13184], "mapped", [112, 97]], [[13185, 13185], "mapped", [110, 97]], [[13186, 13186], "mapped", [956, 97]], [[13187, 13187], "mapped", [109, 97]], [[13188, 13188], "mapped", [107, 97]], [[13189, 13189], "mapped", [107, 98]], [[13190, 13190], "mapped", [109, 98]], [[13191, 13191], "mapped", [103, 98]], [[13192, 13192], "mapped", [99, 97, 108]], [[13193, 13193], "mapped", [107, 99, 97, 108]], [[13194, 13194], "mapped", [112, 102]], [[13195, 13195], "mapped", [110, 102]], [[13196, 13196], "mapped", [956, 102]], [[13197, 13197], "mapped", [956, 103]], [[13198, 13198], "mapped", [109, 103]], [[13199, 13199], "mapped", [107, 103]], [[13200, 13200], "mapped", [104, 122]], [[13201, 13201], "mapped", [107, 104, 122]], [[13202, 13202], "mapped", [109, 104, 122]], [[13203, 13203], "mapped", [103, 104, 122]], [[13204, 13204], "mapped", [116, 104, 122]], [[13205, 13205], "mapped", [956, 108]], [[13206, 13206], "mapped", [109, 108]], [[13207, 13207], "mapped", [100, 108]], [[13208, 13208], "mapped", [107, 108]], [[13209, 13209], "mapped", [102, 109]], [[13210, 13210], "mapped", [110, 109]], [[13211, 13211], "mapped", [956, 109]], [[13212, 13212], "mapped", [109, 109]], [[13213, 13213], "mapped", [99, 109]], [[13214, 13214], "mapped", [107, 109]], [[13215, 13215], "mapped", [109, 109, 50]], [[13216, 13216], "mapped", [99, 109, 50]], [[13217, 13217], "mapped", [109, 50]], [[13218, 13218], "mapped", [107, 109, 50]], [[13219, 13219], "mapped", [109, 109, 51]], [[13220, 13220], "mapped", [99, 109, 51]], [[13221, 13221], "mapped", [109, 51]], [[13222, 13222], "mapped", [107, 109, 51]], [[13223, 13223], "mapped", [109, 8725, 115]], [[13224, 13224], "mapped", [109, 8725, 115, 50]], [[13225, 13225], "mapped", [112, 97]], [[13226, 13226], "mapped", [107, 112, 97]], [[13227, 13227], "mapped", [109, 112, 97]], [[13228, 13228], "mapped", [103, 112, 97]], [[13229, 13229], "mapped", [114, 97, 100]], [[13230, 13230], "mapped", [114, 97, 100, 8725, 115]], [[13231, 13231], "mapped", [114, 97, 100, 8725, 115, 50]], [[13232, 13232], "mapped", [112, 115]], [[13233, 13233], "mapped", [110, 115]], [[13234, 13234], "mapped", [956, 115]], [[13235, 13235], "mapped", [109, 115]], [[13236, 13236], "mapped", [112, 118]], [[13237, 13237], "mapped", [110, 118]], [[13238, 13238], "mapped", [956, 118]], [[13239, 13239], "mapped", [109, 118]], [[13240, 13240], "mapped", [107, 118]], [[13241, 13241], "mapped", [109, 118]], [[13242, 13242], "mapped", [112, 119]], [[13243, 13243], "mapped", [110, 119]], [[13244, 13244], "mapped", [956, 119]], [[13245, 13245], "mapped", [109, 119]], [[13246, 13246], "mapped", [107, 119]], [[13247, 13247], "mapped", [109, 119]], [[13248, 13248], "mapped", [107, 969]], [[13249, 13249], "mapped", [109, 969]], [[13250, 13250], "disallowed"], [[13251, 13251], "mapped", [98, 113]], [[13252, 13252], "mapped", [99, 99]], [[13253, 13253], "mapped", [99, 100]], [[13254, 13254], "mapped", [99, 8725, 107, 103]], [[13255, 13255], "disallowed"], [[13256, 13256], "mapped", [100, 98]], [[13257, 13257], "mapped", [103, 121]], [[13258, 13258], "mapped", [104, 97]], [[13259, 13259], "mapped", [104, 112]], [[13260, 13260], "mapped", [105, 110]], [[13261, 13261], "mapped", [107, 107]], [[13262, 13262], "mapped", [107, 109]], [[13263, 13263], "mapped", [107, 116]], [[13264, 13264], "mapped", [108, 109]], [[13265, 13265], "mapped", [108, 110]], [[13266, 13266], "mapped", [108, 111, 103]], [[13267, 13267], "mapped", [108, 120]], [[13268, 13268], "mapped", [109, 98]], [[13269, 13269], "mapped", [109, 105, 108]], [[13270, 13270], "mapped", [109, 111, 108]], [[13271, 13271], "mapped", [112, 104]], [[13272, 13272], "disallowed"], [[13273, 13273], "mapped", [112, 112, 109]], [[13274, 13274], "mapped", [112, 114]], [[13275, 13275], "mapped", [115, 114]], [[13276, 13276], "mapped", [115, 118]], [[13277, 13277], "mapped", [119, 98]], [[13278, 13278], "mapped", [118, 8725, 109]], [[13279, 13279], "mapped", [97, 8725, 109]], [[13280, 13280], "mapped", [49, 26085]], [[13281, 13281], "mapped", [50, 26085]], [[13282, 13282], "mapped", [51, 26085]], [[13283, 13283], "mapped", [52, 26085]], [[13284, 13284], "mapped", [53, 26085]], [[13285, 13285], "mapped", [54, 26085]], [[13286, 13286], "mapped", [55, 26085]], [[13287, 13287], "mapped", [56, 26085]], [[13288, 13288], "mapped", [57, 26085]], [[13289, 13289], "mapped", [49, 48, 26085]], [[13290, 13290], "mapped", [49, 49, 26085]], [[13291, 13291], "mapped", [49, 50, 26085]], [[13292, 13292], "mapped", [49, 51, 26085]], [[13293, 13293], "mapped", [49, 52, 26085]], [[13294, 13294], "mapped", [49, 53, 26085]], [[13295, 13295], "mapped", [49, 54, 26085]], [[13296, 13296], "mapped", [49, 55, 26085]], [[13297, 13297], "mapped", [49, 56, 26085]], [[13298, 13298], "mapped", [49, 57, 26085]], [[13299, 13299], "mapped", [50, 48, 26085]], [[13300, 13300], "mapped", [50, 49, 26085]], [[13301, 13301], "mapped", [50, 50, 26085]], [[13302, 13302], "mapped", [50, 51, 26085]], [[13303, 13303], "mapped", [50, 52, 26085]], [[13304, 13304], "mapped", [50, 53, 26085]], [[13305, 13305], "mapped", [50, 54, 26085]], [[13306, 13306], "mapped", [50, 55, 26085]], [[13307, 13307], "mapped", [50, 56, 26085]], [[13308, 13308], "mapped", [50, 57, 26085]], [[13309, 13309], "mapped", [51, 48, 26085]], [[13310, 13310], "mapped", [51, 49, 26085]], [[13311, 13311], "mapped", [103, 97, 108]], [[13312, 19893], "valid"], [[19894, 19903], "disallowed"], [[19904, 19967], "valid", [], "NV8"], [[19968, 40869], "valid"], [[40870, 40891], "valid"], [[40892, 40899], "valid"], [[40900, 40907], "valid"], [[40908, 40908], "valid"], [[40909, 40917], "valid"], [[40918, 40959], "disallowed"], [[40960, 42124], "valid"], [[42125, 42127], "disallowed"], [[42128, 42145], "valid", [], "NV8"], [[42146, 42147], "valid", [], "NV8"], [[42148, 42163], "valid", [], "NV8"], [[42164, 42164], "valid", [], "NV8"], [[42165, 42176], "valid", [], "NV8"], [[42177, 42177], "valid", [], "NV8"], [[42178, 42180], "valid", [], "NV8"], [[42181, 42181], "valid", [], "NV8"], [[42182, 42182], "valid", [], "NV8"], [[42183, 42191], "disallowed"], [[42192, 42237], "valid"], [[42238, 42239], "valid", [], "NV8"], [[42240, 42508], "valid"], [[42509, 42511], "valid", [], "NV8"], [[42512, 42539], "valid"], [[42540, 42559], "disallowed"], [[42560, 42560], "mapped", [42561]], [[42561, 42561], "valid"], [[42562, 42562], "mapped", [42563]], [[42563, 42563], "valid"], [[42564, 42564], "mapped", [42565]], [[42565, 42565], "valid"], [[42566, 42566], "mapped", [42567]], [[42567, 42567], "valid"], [[42568, 42568], "mapped", [42569]], [[42569, 42569], "valid"], [[42570, 42570], "mapped", [42571]], [[42571, 42571], "valid"], [[42572, 42572], "mapped", [42573]], [[42573, 42573], "valid"], [[42574, 42574], "mapped", [42575]], [[42575, 42575], "valid"], [[42576, 42576], "mapped", [42577]], [[42577, 42577], "valid"], [[42578, 42578], "mapped", [42579]], [[42579, 42579], "valid"], [[42580, 42580], "mapped", [42581]], [[42581, 42581], "valid"], [[42582, 42582], "mapped", [42583]], [[42583, 42583], "valid"], [[42584, 42584], "mapped", [42585]], [[42585, 42585], "valid"], [[42586, 42586], "mapped", [42587]], [[42587, 42587], "valid"], [[42588, 42588], "mapped", [42589]], [[42589, 42589], "valid"], [[42590, 42590], "mapped", [42591]], [[42591, 42591], "valid"], [[42592, 42592], "mapped", [42593]], [[42593, 42593], "valid"], [[42594, 42594], "mapped", [42595]], [[42595, 42595], "valid"], [[42596, 42596], "mapped", [42597]], [[42597, 42597], "valid"], [[42598, 42598], "mapped", [42599]], [[42599, 42599], "valid"], [[42600, 42600], "mapped", [42601]], [[42601, 42601], "valid"], [[42602, 42602], "mapped", [42603]], [[42603, 42603], "valid"], [[42604, 42604], "mapped", [42605]], [[42605, 42607], "valid"], [[42608, 42611], "valid", [], "NV8"], [[42612, 42619], "valid"], [[42620, 42621], "valid"], [[42622, 42622], "valid", [], "NV8"], [[42623, 42623], "valid"], [[42624, 42624], "mapped", [42625]], [[42625, 42625], "valid"], [[42626, 42626], "mapped", [42627]], [[42627, 42627], "valid"], [[42628, 42628], "mapped", [42629]], [[42629, 42629], "valid"], [[42630, 42630], "mapped", [42631]], [[42631, 42631], "valid"], [[42632, 42632], "mapped", [42633]], [[42633, 42633], "valid"], [[42634, 42634], "mapped", [42635]], [[42635, 42635], "valid"], [[42636, 42636], "mapped", [42637]], [[42637, 42637], "valid"], [[42638, 42638], "mapped", [42639]], [[42639, 42639], "valid"], [[42640, 42640], "mapped", [42641]], [[42641, 42641], "valid"], [[42642, 42642], "mapped", [42643]], [[42643, 42643], "valid"], [[42644, 42644], "mapped", [42645]], [[42645, 42645], "valid"], [[42646, 42646], "mapped", [42647]], [[42647, 42647], "valid"], [[42648, 42648], "mapped", [42649]], [[42649, 42649], "valid"], [[42650, 42650], "mapped", [42651]], [[42651, 42651], "valid"], [[42652, 42652], "mapped", [1098]], [[42653, 42653], "mapped", [1100]], [[42654, 42654], "valid"], [[42655, 42655], "valid"], [[42656, 42725], "valid"], [[42726, 42735], "valid", [], "NV8"], [[42736, 42737], "valid"], [[42738, 42743], "valid", [], "NV8"], [[42744, 42751], "disallowed"], [[42752, 42774], "valid", [], "NV8"], [[42775, 42778], "valid"], [[42779, 42783], "valid"], [[42784, 42785], "valid", [], "NV8"], [[42786, 42786], "mapped", [42787]], [[42787, 42787], "valid"], [[42788, 42788], "mapped", [42789]], [[42789, 42789], "valid"], [[42790, 42790], "mapped", [42791]], [[42791, 42791], "valid"], [[42792, 42792], "mapped", [42793]], [[42793, 42793], "valid"], [[42794, 42794], "mapped", [42795]], [[42795, 42795], "valid"], [[42796, 42796], "mapped", [42797]], [[42797, 42797], "valid"], [[42798, 42798], "mapped", [42799]], [[42799, 42801], "valid"], [[42802, 42802], "mapped", [42803]], [[42803, 42803], "valid"], [[42804, 42804], "mapped", [42805]], [[42805, 42805], "valid"], [[42806, 42806], "mapped", [42807]], [[42807, 42807], "valid"], [[42808, 42808], "mapped", [42809]], [[42809, 42809], "valid"], [[42810, 42810], "mapped", [42811]], [[42811, 42811], "valid"], [[42812, 42812], "mapped", [42813]], [[42813, 42813], "valid"], [[42814, 42814], "mapped", [42815]], [[42815, 42815], "valid"], [[42816, 42816], "mapped", [42817]], [[42817, 42817], "valid"], [[42818, 42818], "mapped", [42819]], [[42819, 42819], "valid"], [[42820, 42820], "mapped", [42821]], [[42821, 42821], "valid"], [[42822, 42822], "mapped", [42823]], [[42823, 42823], "valid"], [[42824, 42824], "mapped", [42825]], [[42825, 42825], "valid"], [[42826, 42826], "mapped", [42827]], [[42827, 42827], "valid"], [[42828, 42828], "mapped", [42829]], [[42829, 42829], "valid"], [[42830, 42830], "mapped", [42831]], [[42831, 42831], "valid"], [[42832, 42832], "mapped", [42833]], [[42833, 42833], "valid"], [[42834, 42834], "mapped", [42835]], [[42835, 42835], "valid"], [[42836, 42836], "mapped", [42837]], [[42837, 42837], "valid"], [[42838, 42838], "mapped", [42839]], [[42839, 42839], "valid"], [[42840, 42840], "mapped", [42841]], [[42841, 42841], "valid"], [[42842, 42842], "mapped", [42843]], [[42843, 42843], "valid"], [[42844, 42844], "mapped", [42845]], [[42845, 42845], "valid"], [[42846, 42846], "mapped", [42847]], [[42847, 42847], "valid"], [[42848, 42848], "mapped", [42849]], [[42849, 42849], "valid"], [[42850, 42850], "mapped", [42851]], [[42851, 42851], "valid"], [[42852, 42852], "mapped", [42853]], [[42853, 42853], "valid"], [[42854, 42854], "mapped", [42855]], [[42855, 42855], "valid"], [[42856, 42856], "mapped", [42857]], [[42857, 42857], "valid"], [[42858, 42858], "mapped", [42859]], [[42859, 42859], "valid"], [[42860, 42860], "mapped", [42861]], [[42861, 42861], "valid"], [[42862, 42862], "mapped", [42863]], [[42863, 42863], "valid"], [[42864, 42864], "mapped", [42863]], [[42865, 42872], "valid"], [[42873, 42873], "mapped", [42874]], [[42874, 42874], "valid"], [[42875, 42875], "mapped", [42876]], [[42876, 42876], "valid"], [[42877, 42877], "mapped", [7545]], [[42878, 42878], "mapped", [42879]], [[42879, 42879], "valid"], [[42880, 42880], "mapped", [42881]], [[42881, 42881], "valid"], [[42882, 42882], "mapped", [42883]], [[42883, 42883], "valid"], [[42884, 42884], "mapped", [42885]], [[42885, 42885], "valid"], [[42886, 42886], "mapped", [42887]], [[42887, 42888], "valid"], [[42889, 42890], "valid", [], "NV8"], [[42891, 42891], "mapped", [42892]], [[42892, 42892], "valid"], [[42893, 42893], "mapped", [613]], [[42894, 42894], "valid"], [[42895, 42895], "valid"], [[42896, 42896], "mapped", [42897]], [[42897, 42897], "valid"], [[42898, 42898], "mapped", [42899]], [[42899, 42899], "valid"], [[42900, 42901], "valid"], [[42902, 42902], "mapped", [42903]], [[42903, 42903], "valid"], [[42904, 42904], "mapped", [42905]], [[42905, 42905], "valid"], [[42906, 42906], "mapped", [42907]], [[42907, 42907], "valid"], [[42908, 42908], "mapped", [42909]], [[42909, 42909], "valid"], [[42910, 42910], "mapped", [42911]], [[42911, 42911], "valid"], [[42912, 42912], "mapped", [42913]], [[42913, 42913], "valid"], [[42914, 42914], "mapped", [42915]], [[42915, 42915], "valid"], [[42916, 42916], "mapped", [42917]], [[42917, 42917], "valid"], [[42918, 42918], "mapped", [42919]], [[42919, 42919], "valid"], [[42920, 42920], "mapped", [42921]], [[42921, 42921], "valid"], [[42922, 42922], "mapped", [614]], [[42923, 42923], "mapped", [604]], [[42924, 42924], "mapped", [609]], [[42925, 42925], "mapped", [620]], [[42926, 42927], "disallowed"], [[42928, 42928], "mapped", [670]], [[42929, 42929], "mapped", [647]], [[42930, 42930], "mapped", [669]], [[42931, 42931], "mapped", [43859]], [[42932, 42932], "mapped", [42933]], [[42933, 42933], "valid"], [[42934, 42934], "mapped", [42935]], [[42935, 42935], "valid"], [[42936, 42998], "disallowed"], [[42999, 42999], "valid"], [[43e3, 43e3], "mapped", [295]], [[43001, 43001], "mapped", [339]], [[43002, 43002], "valid"], [[43003, 43007], "valid"], [[43008, 43047], "valid"], [[43048, 43051], "valid", [], "NV8"], [[43052, 43055], "disallowed"], [[43056, 43065], "valid", [], "NV8"], [[43066, 43071], "disallowed"], [[43072, 43123], "valid"], [[43124, 43127], "valid", [], "NV8"], [[43128, 43135], "disallowed"], [[43136, 43204], "valid"], [[43205, 43213], "disallowed"], [[43214, 43215], "valid", [], "NV8"], [[43216, 43225], "valid"], [[43226, 43231], "disallowed"], [[43232, 43255], "valid"], [[43256, 43258], "valid", [], "NV8"], [[43259, 43259], "valid"], [[43260, 43260], "valid", [], "NV8"], [[43261, 43261], "valid"], [[43262, 43263], "disallowed"], [[43264, 43309], "valid"], [[43310, 43311], "valid", [], "NV8"], [[43312, 43347], "valid"], [[43348, 43358], "disallowed"], [[43359, 43359], "valid", [], "NV8"], [[43360, 43388], "valid", [], "NV8"], [[43389, 43391], "disallowed"], [[43392, 43456], "valid"], [[43457, 43469], "valid", [], "NV8"], [[43470, 43470], "disallowed"], [[43471, 43481], "valid"], [[43482, 43485], "disallowed"], [[43486, 43487], "valid", [], "NV8"], [[43488, 43518], "valid"], [[43519, 43519], "disallowed"], [[43520, 43574], "valid"], [[43575, 43583], "disallowed"], [[43584, 43597], "valid"], [[43598, 43599], "disallowed"], [[43600, 43609], "valid"], [[43610, 43611], "disallowed"], [[43612, 43615], "valid", [], "NV8"], [[43616, 43638], "valid"], [[43639, 43641], "valid", [], "NV8"], [[43642, 43643], "valid"], [[43644, 43647], "valid"], [[43648, 43714], "valid"], [[43715, 43738], "disallowed"], [[43739, 43741], "valid"], [[43742, 43743], "valid", [], "NV8"], [[43744, 43759], "valid"], [[43760, 43761], "valid", [], "NV8"], [[43762, 43766], "valid"], [[43767, 43776], "disallowed"], [[43777, 43782], "valid"], [[43783, 43784], "disallowed"], [[43785, 43790], "valid"], [[43791, 43792], "disallowed"], [[43793, 43798], "valid"], [[43799, 43807], "disallowed"], [[43808, 43814], "valid"], [[43815, 43815], "disallowed"], [[43816, 43822], "valid"], [[43823, 43823], "disallowed"], [[43824, 43866], "valid"], [[43867, 43867], "valid", [], "NV8"], [[43868, 43868], "mapped", [42791]], [[43869, 43869], "mapped", [43831]], [[43870, 43870], "mapped", [619]], [[43871, 43871], "mapped", [43858]], [[43872, 43875], "valid"], [[43876, 43877], "valid"], [[43878, 43887], "disallowed"], [[43888, 43888], "mapped", [5024]], [[43889, 43889], "mapped", [5025]], [[43890, 43890], "mapped", [5026]], [[43891, 43891], "mapped", [5027]], [[43892, 43892], "mapped", [5028]], [[43893, 43893], "mapped", [5029]], [[43894, 43894], "mapped", [5030]], [[43895, 43895], "mapped", [5031]], [[43896, 43896], "mapped", [5032]], [[43897, 43897], "mapped", [5033]], [[43898, 43898], "mapped", [5034]], [[43899, 43899], "mapped", [5035]], [[43900, 43900], "mapped", [5036]], [[43901, 43901], "mapped", [5037]], [[43902, 43902], "mapped", [5038]], [[43903, 43903], "mapped", [5039]], [[43904, 43904], "mapped", [5040]], [[43905, 43905], "mapped", [5041]], [[43906, 43906], "mapped", [5042]], [[43907, 43907], "mapped", [5043]], [[43908, 43908], "mapped", [5044]], [[43909, 43909], "mapped", [5045]], [[43910, 43910], "mapped", [5046]], [[43911, 43911], "mapped", [5047]], [[43912, 43912], "mapped", [5048]], [[43913, 43913], "mapped", [5049]], [[43914, 43914], "mapped", [5050]], [[43915, 43915], "mapped", [5051]], [[43916, 43916], "mapped", [5052]], [[43917, 43917], "mapped", [5053]], [[43918, 43918], "mapped", [5054]], [[43919, 43919], "mapped", [5055]], [[43920, 43920], "mapped", [5056]], [[43921, 43921], "mapped", [5057]], [[43922, 43922], "mapped", [5058]], [[43923, 43923], "mapped", [5059]], [[43924, 43924], "mapped", [5060]], [[43925, 43925], "mapped", [5061]], [[43926, 43926], "mapped", [5062]], [[43927, 43927], "mapped", [5063]], [[43928, 43928], "mapped", [5064]], [[43929, 43929], "mapped", [5065]], [[43930, 43930], "mapped", [5066]], [[43931, 43931], "mapped", [5067]], [[43932, 43932], "mapped", [5068]], [[43933, 43933], "mapped", [5069]], [[43934, 43934], "mapped", [5070]], [[43935, 43935], "mapped", [5071]], [[43936, 43936], "mapped", [5072]], [[43937, 43937], "mapped", [5073]], [[43938, 43938], "mapped", [5074]], [[43939, 43939], "mapped", [5075]], [[43940, 43940], "mapped", [5076]], [[43941, 43941], "mapped", [5077]], [[43942, 43942], "mapped", [5078]], [[43943, 43943], "mapped", [5079]], [[43944, 43944], "mapped", [5080]], [[43945, 43945], "mapped", [5081]], [[43946, 43946], "mapped", [5082]], [[43947, 43947], "mapped", [5083]], [[43948, 43948], "mapped", [5084]], [[43949, 43949], "mapped", [5085]], [[43950, 43950], "mapped", [5086]], [[43951, 43951], "mapped", [5087]], [[43952, 43952], "mapped", [5088]], [[43953, 43953], "mapped", [5089]], [[43954, 43954], "mapped", [5090]], [[43955, 43955], "mapped", [5091]], [[43956, 43956], "mapped", [5092]], [[43957, 43957], "mapped", [5093]], [[43958, 43958], "mapped", [5094]], [[43959, 43959], "mapped", [5095]], [[43960, 43960], "mapped", [5096]], [[43961, 43961], "mapped", [5097]], [[43962, 43962], "mapped", [5098]], [[43963, 43963], "mapped", [5099]], [[43964, 43964], "mapped", [5100]], [[43965, 43965], "mapped", [5101]], [[43966, 43966], "mapped", [5102]], [[43967, 43967], "mapped", [5103]], [[43968, 44010], "valid"], [[44011, 44011], "valid", [], "NV8"], [[44012, 44013], "valid"], [[44014, 44015], "disallowed"], [[44016, 44025], "valid"], [[44026, 44031], "disallowed"], [[44032, 55203], "valid"], [[55204, 55215], "disallowed"], [[55216, 55238], "valid", [], "NV8"], [[55239, 55242], "disallowed"], [[55243, 55291], "valid", [], "NV8"], [[55292, 55295], "disallowed"], [[55296, 57343], "disallowed"], [[57344, 63743], "disallowed"], [[63744, 63744], "mapped", [35912]], [[63745, 63745], "mapped", [26356]], [[63746, 63746], "mapped", [36554]], [[63747, 63747], "mapped", [36040]], [[63748, 63748], "mapped", [28369]], [[63749, 63749], "mapped", [20018]], [[63750, 63750], "mapped", [21477]], [[63751, 63752], "mapped", [40860]], [[63753, 63753], "mapped", [22865]], [[63754, 63754], "mapped", [37329]], [[63755, 63755], "mapped", [21895]], [[63756, 63756], "mapped", [22856]], [[63757, 63757], "mapped", [25078]], [[63758, 63758], "mapped", [30313]], [[63759, 63759], "mapped", [32645]], [[63760, 63760], "mapped", [34367]], [[63761, 63761], "mapped", [34746]], [[63762, 63762], "mapped", [35064]], [[63763, 63763], "mapped", [37007]], [[63764, 63764], "mapped", [27138]], [[63765, 63765], "mapped", [27931]], [[63766, 63766], "mapped", [28889]], [[63767, 63767], "mapped", [29662]], [[63768, 63768], "mapped", [33853]], [[63769, 63769], "mapped", [37226]], [[63770, 63770], "mapped", [39409]], [[63771, 63771], "mapped", [20098]], [[63772, 63772], "mapped", [21365]], [[63773, 63773], "mapped", [27396]], [[63774, 63774], "mapped", [29211]], [[63775, 63775], "mapped", [34349]], [[63776, 63776], "mapped", [40478]], [[63777, 63777], "mapped", [23888]], [[63778, 63778], "mapped", [28651]], [[63779, 63779], "mapped", [34253]], [[63780, 63780], "mapped", [35172]], [[63781, 63781], "mapped", [25289]], [[63782, 63782], "mapped", [33240]], [[63783, 63783], "mapped", [34847]], [[63784, 63784], "mapped", [24266]], [[63785, 63785], "mapped", [26391]], [[63786, 63786], "mapped", [28010]], [[63787, 63787], "mapped", [29436]], [[63788, 63788], "mapped", [37070]], [[63789, 63789], "mapped", [20358]], [[63790, 63790], "mapped", [20919]], [[63791, 63791], "mapped", [21214]], [[63792, 63792], "mapped", [25796]], [[63793, 63793], "mapped", [27347]], [[63794, 63794], "mapped", [29200]], [[63795, 63795], "mapped", [30439]], [[63796, 63796], "mapped", [32769]], [[63797, 63797], "mapped", [34310]], [[63798, 63798], "mapped", [34396]], [[63799, 63799], "mapped", [36335]], [[63800, 63800], "mapped", [38706]], [[63801, 63801], "mapped", [39791]], [[63802, 63802], "mapped", [40442]], [[63803, 63803], "mapped", [30860]], [[63804, 63804], "mapped", [31103]], [[63805, 63805], "mapped", [32160]], [[63806, 63806], "mapped", [33737]], [[63807, 63807], "mapped", [37636]], [[63808, 63808], "mapped", [40575]], [[63809, 63809], "mapped", [35542]], [[63810, 63810], "mapped", [22751]], [[63811, 63811], "mapped", [24324]], [[63812, 63812], "mapped", [31840]], [[63813, 63813], "mapped", [32894]], [[63814, 63814], "mapped", [29282]], [[63815, 63815], "mapped", [30922]], [[63816, 63816], "mapped", [36034]], [[63817, 63817], "mapped", [38647]], [[63818, 63818], "mapped", [22744]], [[63819, 63819], "mapped", [23650]], [[63820, 63820], "mapped", [27155]], [[63821, 63821], "mapped", [28122]], [[63822, 63822], "mapped", [28431]], [[63823, 63823], "mapped", [32047]], [[63824, 63824], "mapped", [32311]], [[63825, 63825], "mapped", [38475]], [[63826, 63826], "mapped", [21202]], [[63827, 63827], "mapped", [32907]], [[63828, 63828], "mapped", [20956]], [[63829, 63829], "mapped", [20940]], [[63830, 63830], "mapped", [31260]], [[63831, 63831], "mapped", [32190]], [[63832, 63832], "mapped", [33777]], [[63833, 63833], "mapped", [38517]], [[63834, 63834], "mapped", [35712]], [[63835, 63835], "mapped", [25295]], [[63836, 63836], "mapped", [27138]], [[63837, 63837], "mapped", [35582]], [[63838, 63838], "mapped", [20025]], [[63839, 63839], "mapped", [23527]], [[63840, 63840], "mapped", [24594]], [[63841, 63841], "mapped", [29575]], [[63842, 63842], "mapped", [30064]], [[63843, 63843], "mapped", [21271]], [[63844, 63844], "mapped", [30971]], [[63845, 63845], "mapped", [20415]], [[63846, 63846], "mapped", [24489]], [[63847, 63847], "mapped", [19981]], [[63848, 63848], "mapped", [27852]], [[63849, 63849], "mapped", [25976]], [[63850, 63850], "mapped", [32034]], [[63851, 63851], "mapped", [21443]], [[63852, 63852], "mapped", [22622]], [[63853, 63853], "mapped", [30465]], [[63854, 63854], "mapped", [33865]], [[63855, 63855], "mapped", [35498]], [[63856, 63856], "mapped", [27578]], [[63857, 63857], "mapped", [36784]], [[63858, 63858], "mapped", [27784]], [[63859, 63859], "mapped", [25342]], [[63860, 63860], "mapped", [33509]], [[63861, 63861], "mapped", [25504]], [[63862, 63862], "mapped", [30053]], [[63863, 63863], "mapped", [20142]], [[63864, 63864], "mapped", [20841]], [[63865, 63865], "mapped", [20937]], [[63866, 63866], "mapped", [26753]], [[63867, 63867], "mapped", [31975]], [[63868, 63868], "mapped", [33391]], [[63869, 63869], "mapped", [35538]], [[63870, 63870], "mapped", [37327]], [[63871, 63871], "mapped", [21237]], [[63872, 63872], "mapped", [21570]], [[63873, 63873], "mapped", [22899]], [[63874, 63874], "mapped", [24300]], [[63875, 63875], "mapped", [26053]], [[63876, 63876], "mapped", [28670]], [[63877, 63877], "mapped", [31018]], [[63878, 63878], "mapped", [38317]], [[63879, 63879], "mapped", [39530]], [[63880, 63880], "mapped", [40599]], [[63881, 63881], "mapped", [40654]], [[63882, 63882], "mapped", [21147]], [[63883, 63883], "mapped", [26310]], [[63884, 63884], "mapped", [27511]], [[63885, 63885], "mapped", [36706]], [[63886, 63886], "mapped", [24180]], [[63887, 63887], "mapped", [24976]], [[63888, 63888], "mapped", [25088]], [[63889, 63889], "mapped", [25754]], [[63890, 63890], "mapped", [28451]], [[63891, 63891], "mapped", [29001]], [[63892, 63892], "mapped", [29833]], [[63893, 63893], "mapped", [31178]], [[63894, 63894], "mapped", [32244]], [[63895, 63895], "mapped", [32879]], [[63896, 63896], "mapped", [36646]], [[63897, 63897], "mapped", [34030]], [[63898, 63898], "mapped", [36899]], [[63899, 63899], "mapped", [37706]], [[63900, 63900], "mapped", [21015]], [[63901, 63901], "mapped", [21155]], [[63902, 63902], "mapped", [21693]], [[63903, 63903], "mapped", [28872]], [[63904, 63904], "mapped", [35010]], [[63905, 63905], "mapped", [35498]], [[63906, 63906], "mapped", [24265]], [[63907, 63907], "mapped", [24565]], [[63908, 63908], "mapped", [25467]], [[63909, 63909], "mapped", [27566]], [[63910, 63910], "mapped", [31806]], [[63911, 63911], "mapped", [29557]], [[63912, 63912], "mapped", [20196]], [[63913, 63913], "mapped", [22265]], [[63914, 63914], "mapped", [23527]], [[63915, 63915], "mapped", [23994]], [[63916, 63916], "mapped", [24604]], [[63917, 63917], "mapped", [29618]], [[63918, 63918], "mapped", [29801]], [[63919, 63919], "mapped", [32666]], [[63920, 63920], "mapped", [32838]], [[63921, 63921], "mapped", [37428]], [[63922, 63922], "mapped", [38646]], [[63923, 63923], "mapped", [38728]], [[63924, 63924], "mapped", [38936]], [[63925, 63925], "mapped", [20363]], [[63926, 63926], "mapped", [31150]], [[63927, 63927], "mapped", [37300]], [[63928, 63928], "mapped", [38584]], [[63929, 63929], "mapped", [24801]], [[63930, 63930], "mapped", [20102]], [[63931, 63931], "mapped", [20698]], [[63932, 63932], "mapped", [23534]], [[63933, 63933], "mapped", [23615]], [[63934, 63934], "mapped", [26009]], [[63935, 63935], "mapped", [27138]], [[63936, 63936], "mapped", [29134]], [[63937, 63937], "mapped", [30274]], [[63938, 63938], "mapped", [34044]], [[63939, 63939], "mapped", [36988]], [[63940, 63940], "mapped", [40845]], [[63941, 63941], "mapped", [26248]], [[63942, 63942], "mapped", [38446]], [[63943, 63943], "mapped", [21129]], [[63944, 63944], "mapped", [26491]], [[63945, 63945], "mapped", [26611]], [[63946, 63946], "mapped", [27969]], [[63947, 63947], "mapped", [28316]], [[63948, 63948], "mapped", [29705]], [[63949, 63949], "mapped", [30041]], [[63950, 63950], "mapped", [30827]], [[63951, 63951], "mapped", [32016]], [[63952, 63952], "mapped", [39006]], [[63953, 63953], "mapped", [20845]], [[63954, 63954], "mapped", [25134]], [[63955, 63955], "mapped", [38520]], [[63956, 63956], "mapped", [20523]], [[63957, 63957], "mapped", [23833]], [[63958, 63958], "mapped", [28138]], [[63959, 63959], "mapped", [36650]], [[63960, 63960], "mapped", [24459]], [[63961, 63961], "mapped", [24900]], [[63962, 63962], "mapped", [26647]], [[63963, 63963], "mapped", [29575]], [[63964, 63964], "mapped", [38534]], [[63965, 63965], "mapped", [21033]], [[63966, 63966], "mapped", [21519]], [[63967, 63967], "mapped", [23653]], [[63968, 63968], "mapped", [26131]], [[63969, 63969], "mapped", [26446]], [[63970, 63970], "mapped", [26792]], [[63971, 63971], "mapped", [27877]], [[63972, 63972], "mapped", [29702]], [[63973, 63973], "mapped", [30178]], [[63974, 63974], "mapped", [32633]], [[63975, 63975], "mapped", [35023]], [[63976, 63976], "mapped", [35041]], [[63977, 63977], "mapped", [37324]], [[63978, 63978], "mapped", [38626]], [[63979, 63979], "mapped", [21311]], [[63980, 63980], "mapped", [28346]], [[63981, 63981], "mapped", [21533]], [[63982, 63982], "mapped", [29136]], [[63983, 63983], "mapped", [29848]], [[63984, 63984], "mapped", [34298]], [[63985, 63985], "mapped", [38563]], [[63986, 63986], "mapped", [40023]], [[63987, 63987], "mapped", [40607]], [[63988, 63988], "mapped", [26519]], [[63989, 63989], "mapped", [28107]], [[63990, 63990], "mapped", [33256]], [[63991, 63991], "mapped", [31435]], [[63992, 63992], "mapped", [31520]], [[63993, 63993], "mapped", [31890]], [[63994, 63994], "mapped", [29376]], [[63995, 63995], "mapped", [28825]], [[63996, 63996], "mapped", [35672]], [[63997, 63997], "mapped", [20160]], [[63998, 63998], "mapped", [33590]], [[63999, 63999], "mapped", [21050]], [[64e3, 64e3], "mapped", [20999]], [[64001, 64001], "mapped", [24230]], [[64002, 64002], "mapped", [25299]], [[64003, 64003], "mapped", [31958]], [[64004, 64004], "mapped", [23429]], [[64005, 64005], "mapped", [27934]], [[64006, 64006], "mapped", [26292]], [[64007, 64007], "mapped", [36667]], [[64008, 64008], "mapped", [34892]], [[64009, 64009], "mapped", [38477]], [[64010, 64010], "mapped", [35211]], [[64011, 64011], "mapped", [24275]], [[64012, 64012], "mapped", [20800]], [[64013, 64013], "mapped", [21952]], [[64014, 64015], "valid"], [[64016, 64016], "mapped", [22618]], [[64017, 64017], "valid"], [[64018, 64018], "mapped", [26228]], [[64019, 64020], "valid"], [[64021, 64021], "mapped", [20958]], [[64022, 64022], "mapped", [29482]], [[64023, 64023], "mapped", [30410]], [[64024, 64024], "mapped", [31036]], [[64025, 64025], "mapped", [31070]], [[64026, 64026], "mapped", [31077]], [[64027, 64027], "mapped", [31119]], [[64028, 64028], "mapped", [38742]], [[64029, 64029], "mapped", [31934]], [[64030, 64030], "mapped", [32701]], [[64031, 64031], "valid"], [[64032, 64032], "mapped", [34322]], [[64033, 64033], "valid"], [[64034, 64034], "mapped", [35576]], [[64035, 64036], "valid"], [[64037, 64037], "mapped", [36920]], [[64038, 64038], "mapped", [37117]], [[64039, 64041], "valid"], [[64042, 64042], "mapped", [39151]], [[64043, 64043], "mapped", [39164]], [[64044, 64044], "mapped", [39208]], [[64045, 64045], "mapped", [40372]], [[64046, 64046], "mapped", [37086]], [[64047, 64047], "mapped", [38583]], [[64048, 64048], "mapped", [20398]], [[64049, 64049], "mapped", [20711]], [[64050, 64050], "mapped", [20813]], [[64051, 64051], "mapped", [21193]], [[64052, 64052], "mapped", [21220]], [[64053, 64053], "mapped", [21329]], [[64054, 64054], "mapped", [21917]], [[64055, 64055], "mapped", [22022]], [[64056, 64056], "mapped", [22120]], [[64057, 64057], "mapped", [22592]], [[64058, 64058], "mapped", [22696]], [[64059, 64059], "mapped", [23652]], [[64060, 64060], "mapped", [23662]], [[64061, 64061], "mapped", [24724]], [[64062, 64062], "mapped", [24936]], [[64063, 64063], "mapped", [24974]], [[64064, 64064], "mapped", [25074]], [[64065, 64065], "mapped", [25935]], [[64066, 64066], "mapped", [26082]], [[64067, 64067], "mapped", [26257]], [[64068, 64068], "mapped", [26757]], [[64069, 64069], "mapped", [28023]], [[64070, 64070], "mapped", [28186]], [[64071, 64071], "mapped", [28450]], [[64072, 64072], "mapped", [29038]], [[64073, 64073], "mapped", [29227]], [[64074, 64074], "mapped", [29730]], [[64075, 64075], "mapped", [30865]], [[64076, 64076], "mapped", [31038]], [[64077, 64077], "mapped", [31049]], [[64078, 64078], "mapped", [31048]], [[64079, 64079], "mapped", [31056]], [[64080, 64080], "mapped", [31062]], [[64081, 64081], "mapped", [31069]], [[64082, 64082], "mapped", [31117]], [[64083, 64083], "mapped", [31118]], [[64084, 64084], "mapped", [31296]], [[64085, 64085], "mapped", [31361]], [[64086, 64086], "mapped", [31680]], [[64087, 64087], "mapped", [32244]], [[64088, 64088], "mapped", [32265]], [[64089, 64089], "mapped", [32321]], [[64090, 64090], "mapped", [32626]], [[64091, 64091], "mapped", [32773]], [[64092, 64092], "mapped", [33261]], [[64093, 64094], "mapped", [33401]], [[64095, 64095], "mapped", [33879]], [[64096, 64096], "mapped", [35088]], [[64097, 64097], "mapped", [35222]], [[64098, 64098], "mapped", [35585]], [[64099, 64099], "mapped", [35641]], [[64100, 64100], "mapped", [36051]], [[64101, 64101], "mapped", [36104]], [[64102, 64102], "mapped", [36790]], [[64103, 64103], "mapped", [36920]], [[64104, 64104], "mapped", [38627]], [[64105, 64105], "mapped", [38911]], [[64106, 64106], "mapped", [38971]], [[64107, 64107], "mapped", [24693]], [[64108, 64108], "mapped", [148206]], [[64109, 64109], "mapped", [33304]], [[64110, 64111], "disallowed"], [[64112, 64112], "mapped", [20006]], [[64113, 64113], "mapped", [20917]], [[64114, 64114], "mapped", [20840]], [[64115, 64115], "mapped", [20352]], [[64116, 64116], "mapped", [20805]], [[64117, 64117], "mapped", [20864]], [[64118, 64118], "mapped", [21191]], [[64119, 64119], "mapped", [21242]], [[64120, 64120], "mapped", [21917]], [[64121, 64121], "mapped", [21845]], [[64122, 64122], "mapped", [21913]], [[64123, 64123], "mapped", [21986]], [[64124, 64124], "mapped", [22618]], [[64125, 64125], "mapped", [22707]], [[64126, 64126], "mapped", [22852]], [[64127, 64127], "mapped", [22868]], [[64128, 64128], "mapped", [23138]], [[64129, 64129], "mapped", [23336]], [[64130, 64130], "mapped", [24274]], [[64131, 64131], "mapped", [24281]], [[64132, 64132], "mapped", [24425]], [[64133, 64133], "mapped", [24493]], [[64134, 64134], "mapped", [24792]], [[64135, 64135], "mapped", [24910]], [[64136, 64136], "mapped", [24840]], [[64137, 64137], "mapped", [24974]], [[64138, 64138], "mapped", [24928]], [[64139, 64139], "mapped", [25074]], [[64140, 64140], "mapped", [25140]], [[64141, 64141], "mapped", [25540]], [[64142, 64142], "mapped", [25628]], [[64143, 64143], "mapped", [25682]], [[64144, 64144], "mapped", [25942]], [[64145, 64145], "mapped", [26228]], [[64146, 64146], "mapped", [26391]], [[64147, 64147], "mapped", [26395]], [[64148, 64148], "mapped", [26454]], [[64149, 64149], "mapped", [27513]], [[64150, 64150], "mapped", [27578]], [[64151, 64151], "mapped", [27969]], [[64152, 64152], "mapped", [28379]], [[64153, 64153], "mapped", [28363]], [[64154, 64154], "mapped", [28450]], [[64155, 64155], "mapped", [28702]], [[64156, 64156], "mapped", [29038]], [[64157, 64157], "mapped", [30631]], [[64158, 64158], "mapped", [29237]], [[64159, 64159], "mapped", [29359]], [[64160, 64160], "mapped", [29482]], [[64161, 64161], "mapped", [29809]], [[64162, 64162], "mapped", [29958]], [[64163, 64163], "mapped", [30011]], [[64164, 64164], "mapped", [30237]], [[64165, 64165], "mapped", [30239]], [[64166, 64166], "mapped", [30410]], [[64167, 64167], "mapped", [30427]], [[64168, 64168], "mapped", [30452]], [[64169, 64169], "mapped", [30538]], [[64170, 64170], "mapped", [30528]], [[64171, 64171], "mapped", [30924]], [[64172, 64172], "mapped", [31409]], [[64173, 64173], "mapped", [31680]], [[64174, 64174], "mapped", [31867]], [[64175, 64175], "mapped", [32091]], [[64176, 64176], "mapped", [32244]], [[64177, 64177], "mapped", [32574]], [[64178, 64178], "mapped", [32773]], [[64179, 64179], "mapped", [33618]], [[64180, 64180], "mapped", [33775]], [[64181, 64181], "mapped", [34681]], [[64182, 64182], "mapped", [35137]], [[64183, 64183], "mapped", [35206]], [[64184, 64184], "mapped", [35222]], [[64185, 64185], "mapped", [35519]], [[64186, 64186], "mapped", [35576]], [[64187, 64187], "mapped", [35531]], [[64188, 64188], "mapped", [35585]], [[64189, 64189], "mapped", [35582]], [[64190, 64190], "mapped", [35565]], [[64191, 64191], "mapped", [35641]], [[64192, 64192], "mapped", [35722]], [[64193, 64193], "mapped", [36104]], [[64194, 64194], "mapped", [36664]], [[64195, 64195], "mapped", [36978]], [[64196, 64196], "mapped", [37273]], [[64197, 64197], "mapped", [37494]], [[64198, 64198], "mapped", [38524]], [[64199, 64199], "mapped", [38627]], [[64200, 64200], "mapped", [38742]], [[64201, 64201], "mapped", [38875]], [[64202, 64202], "mapped", [38911]], [[64203, 64203], "mapped", [38923]], [[64204, 64204], "mapped", [38971]], [[64205, 64205], "mapped", [39698]], [[64206, 64206], "mapped", [40860]], [[64207, 64207], "mapped", [141386]], [[64208, 64208], "mapped", [141380]], [[64209, 64209], "mapped", [144341]], [[64210, 64210], "mapped", [15261]], [[64211, 64211], "mapped", [16408]], [[64212, 64212], "mapped", [16441]], [[64213, 64213], "mapped", [152137]], [[64214, 64214], "mapped", [154832]], [[64215, 64215], "mapped", [163539]], [[64216, 64216], "mapped", [40771]], [[64217, 64217], "mapped", [40846]], [[64218, 64255], "disallowed"], [[64256, 64256], "mapped", [102, 102]], [[64257, 64257], "mapped", [102, 105]], [[64258, 64258], "mapped", [102, 108]], [[64259, 64259], "mapped", [102, 102, 105]], [[64260, 64260], "mapped", [102, 102, 108]], [[64261, 64262], "mapped", [115, 116]], [[64263, 64274], "disallowed"], [[64275, 64275], "mapped", [1396, 1398]], [[64276, 64276], "mapped", [1396, 1381]], [[64277, 64277], "mapped", [1396, 1387]], [[64278, 64278], "mapped", [1406, 1398]], [[64279, 64279], "mapped", [1396, 1389]], [[64280, 64284], "disallowed"], [[64285, 64285], "mapped", [1497, 1460]], [[64286, 64286], "valid"], [[64287, 64287], "mapped", [1522, 1463]], [[64288, 64288], "mapped", [1506]], [[64289, 64289], "mapped", [1488]], [[64290, 64290], "mapped", [1491]], [[64291, 64291], "mapped", [1492]], [[64292, 64292], "mapped", [1499]], [[64293, 64293], "mapped", [1500]], [[64294, 64294], "mapped", [1501]], [[64295, 64295], "mapped", [1512]], [[64296, 64296], "mapped", [1514]], [[64297, 64297], "disallowed_STD3_mapped", [43]], [[64298, 64298], "mapped", [1513, 1473]], [[64299, 64299], "mapped", [1513, 1474]], [[64300, 64300], "mapped", [1513, 1468, 1473]], [[64301, 64301], "mapped", [1513, 1468, 1474]], [[64302, 64302], "mapped", [1488, 1463]], [[64303, 64303], "mapped", [1488, 1464]], [[64304, 64304], "mapped", [1488, 1468]], [[64305, 64305], "mapped", [1489, 1468]], [[64306, 64306], "mapped", [1490, 1468]], [[64307, 64307], "mapped", [1491, 1468]], [[64308, 64308], "mapped", [1492, 1468]], [[64309, 64309], "mapped", [1493, 1468]], [[64310, 64310], "mapped", [1494, 1468]], [[64311, 64311], "disallowed"], [[64312, 64312], "mapped", [1496, 1468]], [[64313, 64313], "mapped", [1497, 1468]], [[64314, 64314], "mapped", [1498, 1468]], [[64315, 64315], "mapped", [1499, 1468]], [[64316, 64316], "mapped", [1500, 1468]], [[64317, 64317], "disallowed"], [[64318, 64318], "mapped", [1502, 1468]], [[64319, 64319], "disallowed"], [[64320, 64320], "mapped", [1504, 1468]], [[64321, 64321], "mapped", [1505, 1468]], [[64322, 64322], "disallowed"], [[64323, 64323], "mapped", [1507, 1468]], [[64324, 64324], "mapped", [1508, 1468]], [[64325, 64325], "disallowed"], [[64326, 64326], "mapped", [1510, 1468]], [[64327, 64327], "mapped", [1511, 1468]], [[64328, 64328], "mapped", [1512, 1468]], [[64329, 64329], "mapped", [1513, 1468]], [[64330, 64330], "mapped", [1514, 1468]], [[64331, 64331], "mapped", [1493, 1465]], [[64332, 64332], "mapped", [1489, 1471]], [[64333, 64333], "mapped", [1499, 1471]], [[64334, 64334], "mapped", [1508, 1471]], [[64335, 64335], "mapped", [1488, 1500]], [[64336, 64337], "mapped", [1649]], [[64338, 64341], "mapped", [1659]], [[64342, 64345], "mapped", [1662]], [[64346, 64349], "mapped", [1664]], [[64350, 64353], "mapped", [1658]], [[64354, 64357], "mapped", [1663]], [[64358, 64361], "mapped", [1657]], [[64362, 64365], "mapped", [1700]], [[64366, 64369], "mapped", [1702]], [[64370, 64373], "mapped", [1668]], [[64374, 64377], "mapped", [1667]], [[64378, 64381], "mapped", [1670]], [[64382, 64385], "mapped", [1671]], [[64386, 64387], "mapped", [1677]], [[64388, 64389], "mapped", [1676]], [[64390, 64391], "mapped", [1678]], [[64392, 64393], "mapped", [1672]], [[64394, 64395], "mapped", [1688]], [[64396, 64397], "mapped", [1681]], [[64398, 64401], "mapped", [1705]], [[64402, 64405], "mapped", [1711]], [[64406, 64409], "mapped", [1715]], [[64410, 64413], "mapped", [1713]], [[64414, 64415], "mapped", [1722]], [[64416, 64419], "mapped", [1723]], [[64420, 64421], "mapped", [1728]], [[64422, 64425], "mapped", [1729]], [[64426, 64429], "mapped", [1726]], [[64430, 64431], "mapped", [1746]], [[64432, 64433], "mapped", [1747]], [[64434, 64449], "valid", [], "NV8"], [[64450, 64466], "disallowed"], [[64467, 64470], "mapped", [1709]], [[64471, 64472], "mapped", [1735]], [[64473, 64474], "mapped", [1734]], [[64475, 64476], "mapped", [1736]], [[64477, 64477], "mapped", [1735, 1652]], [[64478, 64479], "mapped", [1739]], [[64480, 64481], "mapped", [1733]], [[64482, 64483], "mapped", [1737]], [[64484, 64487], "mapped", [1744]], [[64488, 64489], "mapped", [1609]], [[64490, 64491], "mapped", [1574, 1575]], [[64492, 64493], "mapped", [1574, 1749]], [[64494, 64495], "mapped", [1574, 1608]], [[64496, 64497], "mapped", [1574, 1735]], [[64498, 64499], "mapped", [1574, 1734]], [[64500, 64501], "mapped", [1574, 1736]], [[64502, 64504], "mapped", [1574, 1744]], [[64505, 64507], "mapped", [1574, 1609]], [[64508, 64511], "mapped", [1740]], [[64512, 64512], "mapped", [1574, 1580]], [[64513, 64513], "mapped", [1574, 1581]], [[64514, 64514], "mapped", [1574, 1605]], [[64515, 64515], "mapped", [1574, 1609]], [[64516, 64516], "mapped", [1574, 1610]], [[64517, 64517], "mapped", [1576, 1580]], [[64518, 64518], "mapped", [1576, 1581]], [[64519, 64519], "mapped", [1576, 1582]], [[64520, 64520], "mapped", [1576, 1605]], [[64521, 64521], "mapped", [1576, 1609]], [[64522, 64522], "mapped", [1576, 1610]], [[64523, 64523], "mapped", [1578, 1580]], [[64524, 64524], "mapped", [1578, 1581]], [[64525, 64525], "mapped", [1578, 1582]], [[64526, 64526], "mapped", [1578, 1605]], [[64527, 64527], "mapped", [1578, 1609]], [[64528, 64528], "mapped", [1578, 1610]], [[64529, 64529], "mapped", [1579, 1580]], [[64530, 64530], "mapped", [1579, 1605]], [[64531, 64531], "mapped", [1579, 1609]], [[64532, 64532], "mapped", [1579, 1610]], [[64533, 64533], "mapped", [1580, 1581]], [[64534, 64534], "mapped", [1580, 1605]], [[64535, 64535], "mapped", [1581, 1580]], [[64536, 64536], "mapped", [1581, 1605]], [[64537, 64537], "mapped", [1582, 1580]], [[64538, 64538], "mapped", [1582, 1581]], [[64539, 64539], "mapped", [1582, 1605]], [[64540, 64540], "mapped", [1587, 1580]], [[64541, 64541], "mapped", [1587, 1581]], [[64542, 64542], "mapped", [1587, 1582]], [[64543, 64543], "mapped", [1587, 1605]], [[64544, 64544], "mapped", [1589, 1581]], [[64545, 64545], "mapped", [1589, 1605]], [[64546, 64546], "mapped", [1590, 1580]], [[64547, 64547], "mapped", [1590, 1581]], [[64548, 64548], "mapped", [1590, 1582]], [[64549, 64549], "mapped", [1590, 1605]], [[64550, 64550], "mapped", [1591, 1581]], [[64551, 64551], "mapped", [1591, 1605]], [[64552, 64552], "mapped", [1592, 1605]], [[64553, 64553], "mapped", [1593, 1580]], [[64554, 64554], "mapped", [1593, 1605]], [[64555, 64555], "mapped", [1594, 1580]], [[64556, 64556], "mapped", [1594, 1605]], [[64557, 64557], "mapped", [1601, 1580]], [[64558, 64558], "mapped", [1601, 1581]], [[64559, 64559], "mapped", [1601, 1582]], [[64560, 64560], "mapped", [1601, 1605]], [[64561, 64561], "mapped", [1601, 1609]], [[64562, 64562], "mapped", [1601, 1610]], [[64563, 64563], "mapped", [1602, 1581]], [[64564, 64564], "mapped", [1602, 1605]], [[64565, 64565], "mapped", [1602, 1609]], [[64566, 64566], "mapped", [1602, 1610]], [[64567, 64567], "mapped", [1603, 1575]], [[64568, 64568], "mapped", [1603, 1580]], [[64569, 64569], "mapped", [1603, 1581]], [[64570, 64570], "mapped", [1603, 1582]], [[64571, 64571], "mapped", [1603, 1604]], [[64572, 64572], "mapped", [1603, 1605]], [[64573, 64573], "mapped", [1603, 1609]], [[64574, 64574], "mapped", [1603, 1610]], [[64575, 64575], "mapped", [1604, 1580]], [[64576, 64576], "mapped", [1604, 1581]], [[64577, 64577], "mapped", [1604, 1582]], [[64578, 64578], "mapped", [1604, 1605]], [[64579, 64579], "mapped", [1604, 1609]], [[64580, 64580], "mapped", [1604, 1610]], [[64581, 64581], "mapped", [1605, 1580]], [[64582, 64582], "mapped", [1605, 1581]], [[64583, 64583], "mapped", [1605, 1582]], [[64584, 64584], "mapped", [1605, 1605]], [[64585, 64585], "mapped", [1605, 1609]], [[64586, 64586], "mapped", [1605, 1610]], [[64587, 64587], "mapped", [1606, 1580]], [[64588, 64588], "mapped", [1606, 1581]], [[64589, 64589], "mapped", [1606, 1582]], [[64590, 64590], "mapped", [1606, 1605]], [[64591, 64591], "mapped", [1606, 1609]], [[64592, 64592], "mapped", [1606, 1610]], [[64593, 64593], "mapped", [1607, 1580]], [[64594, 64594], "mapped", [1607, 1605]], [[64595, 64595], "mapped", [1607, 1609]], [[64596, 64596], "mapped", [1607, 1610]], [[64597, 64597], "mapped", [1610, 1580]], [[64598, 64598], "mapped", [1610, 1581]], [[64599, 64599], "mapped", [1610, 1582]], [[64600, 64600], "mapped", [1610, 1605]], [[64601, 64601], "mapped", [1610, 1609]], [[64602, 64602], "mapped", [1610, 1610]], [[64603, 64603], "mapped", [1584, 1648]], [[64604, 64604], "mapped", [1585, 1648]], [[64605, 64605], "mapped", [1609, 1648]], [[64606, 64606], "disallowed_STD3_mapped", [32, 1612, 1617]], [[64607, 64607], "disallowed_STD3_mapped", [32, 1613, 1617]], [[64608, 64608], "disallowed_STD3_mapped", [32, 1614, 1617]], [[64609, 64609], "disallowed_STD3_mapped", [32, 1615, 1617]], [[64610, 64610], "disallowed_STD3_mapped", [32, 1616, 1617]], [[64611, 64611], "disallowed_STD3_mapped", [32, 1617, 1648]], [[64612, 64612], "mapped", [1574, 1585]], [[64613, 64613], "mapped", [1574, 1586]], [[64614, 64614], "mapped", [1574, 1605]], [[64615, 64615], "mapped", [1574, 1606]], [[64616, 64616], "mapped", [1574, 1609]], [[64617, 64617], "mapped", [1574, 1610]], [[64618, 64618], "mapped", [1576, 1585]], [[64619, 64619], "mapped", [1576, 1586]], [[64620, 64620], "mapped", [1576, 1605]], [[64621, 64621], "mapped", [1576, 1606]], [[64622, 64622], "mapped", [1576, 1609]], [[64623, 64623], "mapped", [1576, 1610]], [[64624, 64624], "mapped", [1578, 1585]], [[64625, 64625], "mapped", [1578, 1586]], [[64626, 64626], "mapped", [1578, 1605]], [[64627, 64627], "mapped", [1578, 1606]], [[64628, 64628], "mapped", [1578, 1609]], [[64629, 64629], "mapped", [1578, 1610]], [[64630, 64630], "mapped", [1579, 1585]], [[64631, 64631], "mapped", [1579, 1586]], [[64632, 64632], "mapped", [1579, 1605]], [[64633, 64633], "mapped", [1579, 1606]], [[64634, 64634], "mapped", [1579, 1609]], [[64635, 64635], "mapped", [1579, 1610]], [[64636, 64636], "mapped", [1601, 1609]], [[64637, 64637], "mapped", [1601, 1610]], [[64638, 64638], "mapped", [1602, 1609]], [[64639, 64639], "mapped", [1602, 1610]], [[64640, 64640], "mapped", [1603, 1575]], [[64641, 64641], "mapped", [1603, 1604]], [[64642, 64642], "mapped", [1603, 1605]], [[64643, 64643], "mapped", [1603, 1609]], [[64644, 64644], "mapped", [1603, 1610]], [[64645, 64645], "mapped", [1604, 1605]], [[64646, 64646], "mapped", [1604, 1609]], [[64647, 64647], "mapped", [1604, 1610]], [[64648, 64648], "mapped", [1605, 1575]], [[64649, 64649], "mapped", [1605, 1605]], [[64650, 64650], "mapped", [1606, 1585]], [[64651, 64651], "mapped", [1606, 1586]], [[64652, 64652], "mapped", [1606, 1605]], [[64653, 64653], "mapped", [1606, 1606]], [[64654, 64654], "mapped", [1606, 1609]], [[64655, 64655], "mapped", [1606, 1610]], [[64656, 64656], "mapped", [1609, 1648]], [[64657, 64657], "mapped", [1610, 1585]], [[64658, 64658], "mapped", [1610, 1586]], [[64659, 64659], "mapped", [1610, 1605]], [[64660, 64660], "mapped", [1610, 1606]], [[64661, 64661], "mapped", [1610, 1609]], [[64662, 64662], "mapped", [1610, 1610]], [[64663, 64663], "mapped", [1574, 1580]], [[64664, 64664], "mapped", [1574, 1581]], [[64665, 64665], "mapped", [1574, 1582]], [[64666, 64666], "mapped", [1574, 1605]], [[64667, 64667], "mapped", [1574, 1607]], [[64668, 64668], "mapped", [1576, 1580]], [[64669, 64669], "mapped", [1576, 1581]], [[64670, 64670], "mapped", [1576, 1582]], [[64671, 64671], "mapped", [1576, 1605]], [[64672, 64672], "mapped", [1576, 1607]], [[64673, 64673], "mapped", [1578, 1580]], [[64674, 64674], "mapped", [1578, 1581]], [[64675, 64675], "mapped", [1578, 1582]], [[64676, 64676], "mapped", [1578, 1605]], [[64677, 64677], "mapped", [1578, 1607]], [[64678, 64678], "mapped", [1579, 1605]], [[64679, 64679], "mapped", [1580, 1581]], [[64680, 64680], "mapped", [1580, 1605]], [[64681, 64681], "mapped", [1581, 1580]], [[64682, 64682], "mapped", [1581, 1605]], [[64683, 64683], "mapped", [1582, 1580]], [[64684, 64684], "mapped", [1582, 1605]], [[64685, 64685], "mapped", [1587, 1580]], [[64686, 64686], "mapped", [1587, 1581]], [[64687, 64687], "mapped", [1587, 1582]], [[64688, 64688], "mapped", [1587, 1605]], [[64689, 64689], "mapped", [1589, 1581]], [[64690, 64690], "mapped", [1589, 1582]], [[64691, 64691], "mapped", [1589, 1605]], [[64692, 64692], "mapped", [1590, 1580]], [[64693, 64693], "mapped", [1590, 1581]], [[64694, 64694], "mapped", [1590, 1582]], [[64695, 64695], "mapped", [1590, 1605]], [[64696, 64696], "mapped", [1591, 1581]], [[64697, 64697], "mapped", [1592, 1605]], [[64698, 64698], "mapped", [1593, 1580]], [[64699, 64699], "mapped", [1593, 1605]], [[64700, 64700], "mapped", [1594, 1580]], [[64701, 64701], "mapped", [1594, 1605]], [[64702, 64702], "mapped", [1601, 1580]], [[64703, 64703], "mapped", [1601, 1581]], [[64704, 64704], "mapped", [1601, 1582]], [[64705, 64705], "mapped", [1601, 1605]], [[64706, 64706], "mapped", [1602, 1581]], [[64707, 64707], "mapped", [1602, 1605]], [[64708, 64708], "mapped", [1603, 1580]], [[64709, 64709], "mapped", [1603, 1581]], [[64710, 64710], "mapped", [1603, 1582]], [[64711, 64711], "mapped", [1603, 1604]], [[64712, 64712], "mapped", [1603, 1605]], [[64713, 64713], "mapped", [1604, 1580]], [[64714, 64714], "mapped", [1604, 1581]], [[64715, 64715], "mapped", [1604, 1582]], [[64716, 64716], "mapped", [1604, 1605]], [[64717, 64717], "mapped", [1604, 1607]], [[64718, 64718], "mapped", [1605, 1580]], [[64719, 64719], "mapped", [1605, 1581]], [[64720, 64720], "mapped", [1605, 1582]], [[64721, 64721], "mapped", [1605, 1605]], [[64722, 64722], "mapped", [1606, 1580]], [[64723, 64723], "mapped", [1606, 1581]], [[64724, 64724], "mapped", [1606, 1582]], [[64725, 64725], "mapped", [1606, 1605]], [[64726, 64726], "mapped", [1606, 1607]], [[64727, 64727], "mapped", [1607, 1580]], [[64728, 64728], "mapped", [1607, 1605]], [[64729, 64729], "mapped", [1607, 1648]], [[64730, 64730], "mapped", [1610, 1580]], [[64731, 64731], "mapped", [1610, 1581]], [[64732, 64732], "mapped", [1610, 1582]], [[64733, 64733], "mapped", [1610, 1605]], [[64734, 64734], "mapped", [1610, 1607]], [[64735, 64735], "mapped", [1574, 1605]], [[64736, 64736], "mapped", [1574, 1607]], [[64737, 64737], "mapped", [1576, 1605]], [[64738, 64738], "mapped", [1576, 1607]], [[64739, 64739], "mapped", [1578, 1605]], [[64740, 64740], "mapped", [1578, 1607]], [[64741, 64741], "mapped", [1579, 1605]], [[64742, 64742], "mapped", [1579, 1607]], [[64743, 64743], "mapped", [1587, 1605]], [[64744, 64744], "mapped", [1587, 1607]], [[64745, 64745], "mapped", [1588, 1605]], [[64746, 64746], "mapped", [1588, 1607]], [[64747, 64747], "mapped", [1603, 1604]], [[64748, 64748], "mapped", [1603, 1605]], [[64749, 64749], "mapped", [1604, 1605]], [[64750, 64750], "mapped", [1606, 1605]], [[64751, 64751], "mapped", [1606, 1607]], [[64752, 64752], "mapped", [1610, 1605]], [[64753, 64753], "mapped", [1610, 1607]], [[64754, 64754], "mapped", [1600, 1614, 1617]], [[64755, 64755], "mapped", [1600, 1615, 1617]], [[64756, 64756], "mapped", [1600, 1616, 1617]], [[64757, 64757], "mapped", [1591, 1609]], [[64758, 64758], "mapped", [1591, 1610]], [[64759, 64759], "mapped", [1593, 1609]], [[64760, 64760], "mapped", [1593, 1610]], [[64761, 64761], "mapped", [1594, 1609]], [[64762, 64762], "mapped", [1594, 1610]], [[64763, 64763], "mapped", [1587, 1609]], [[64764, 64764], "mapped", [1587, 1610]], [[64765, 64765], "mapped", [1588, 1609]], [[64766, 64766], "mapped", [1588, 1610]], [[64767, 64767], "mapped", [1581, 1609]], [[64768, 64768], "mapped", [1581, 1610]], [[64769, 64769], "mapped", [1580, 1609]], [[64770, 64770], "mapped", [1580, 1610]], [[64771, 64771], "mapped", [1582, 1609]], [[64772, 64772], "mapped", [1582, 1610]], [[64773, 64773], "mapped", [1589, 1609]], [[64774, 64774], "mapped", [1589, 1610]], [[64775, 64775], "mapped", [1590, 1609]], [[64776, 64776], "mapped", [1590, 1610]], [[64777, 64777], "mapped", [1588, 1580]], [[64778, 64778], "mapped", [1588, 1581]], [[64779, 64779], "mapped", [1588, 1582]], [[64780, 64780], "mapped", [1588, 1605]], [[64781, 64781], "mapped", [1588, 1585]], [[64782, 64782], "mapped", [1587, 1585]], [[64783, 64783], "mapped", [1589, 1585]], [[64784, 64784], "mapped", [1590, 1585]], [[64785, 64785], "mapped", [1591, 1609]], [[64786, 64786], "mapped", [1591, 1610]], [[64787, 64787], "mapped", [1593, 1609]], [[64788, 64788], "mapped", [1593, 1610]], [[64789, 64789], "mapped", [1594, 1609]], [[64790, 64790], "mapped", [1594, 1610]], [[64791, 64791], "mapped", [1587, 1609]], [[64792, 64792], "mapped", [1587, 1610]], [[64793, 64793], "mapped", [1588, 1609]], [[64794, 64794], "mapped", [1588, 1610]], [[64795, 64795], "mapped", [1581, 1609]], [[64796, 64796], "mapped", [1581, 1610]], [[64797, 64797], "mapped", [1580, 1609]], [[64798, 64798], "mapped", [1580, 1610]], [[64799, 64799], "mapped", [1582, 1609]], [[64800, 64800], "mapped", [1582, 1610]], [[64801, 64801], "mapped", [1589, 1609]], [[64802, 64802], "mapped", [1589, 1610]], [[64803, 64803], "mapped", [1590, 1609]], [[64804, 64804], "mapped", [1590, 1610]], [[64805, 64805], "mapped", [1588, 1580]], [[64806, 64806], "mapped", [1588, 1581]], [[64807, 64807], "mapped", [1588, 1582]], [[64808, 64808], "mapped", [1588, 1605]], [[64809, 64809], "mapped", [1588, 1585]], [[64810, 64810], "mapped", [1587, 1585]], [[64811, 64811], "mapped", [1589, 1585]], [[64812, 64812], "mapped", [1590, 1585]], [[64813, 64813], "mapped", [1588, 1580]], [[64814, 64814], "mapped", [1588, 1581]], [[64815, 64815], "mapped", [1588, 1582]], [[64816, 64816], "mapped", [1588, 1605]], [[64817, 64817], "mapped", [1587, 1607]], [[64818, 64818], "mapped", [1588, 1607]], [[64819, 64819], "mapped", [1591, 1605]], [[64820, 64820], "mapped", [1587, 1580]], [[64821, 64821], "mapped", [1587, 1581]], [[64822, 64822], "mapped", [1587, 1582]], [[64823, 64823], "mapped", [1588, 1580]], [[64824, 64824], "mapped", [1588, 1581]], [[64825, 64825], "mapped", [1588, 1582]], [[64826, 64826], "mapped", [1591, 1605]], [[64827, 64827], "mapped", [1592, 1605]], [[64828, 64829], "mapped", [1575, 1611]], [[64830, 64831], "valid", [], "NV8"], [[64832, 64847], "disallowed"], [[64848, 64848], "mapped", [1578, 1580, 1605]], [[64849, 64850], "mapped", [1578, 1581, 1580]], [[64851, 64851], "mapped", [1578, 1581, 1605]], [[64852, 64852], "mapped", [1578, 1582, 1605]], [[64853, 64853], "mapped", [1578, 1605, 1580]], [[64854, 64854], "mapped", [1578, 1605, 1581]], [[64855, 64855], "mapped", [1578, 1605, 1582]], [[64856, 64857], "mapped", [1580, 1605, 1581]], [[64858, 64858], "mapped", [1581, 1605, 1610]], [[64859, 64859], "mapped", [1581, 1605, 1609]], [[64860, 64860], "mapped", [1587, 1581, 1580]], [[64861, 64861], "mapped", [1587, 1580, 1581]], [[64862, 64862], "mapped", [1587, 1580, 1609]], [[64863, 64864], "mapped", [1587, 1605, 1581]], [[64865, 64865], "mapped", [1587, 1605, 1580]], [[64866, 64867], "mapped", [1587, 1605, 1605]], [[64868, 64869], "mapped", [1589, 1581, 1581]], [[64870, 64870], "mapped", [1589, 1605, 1605]], [[64871, 64872], "mapped", [1588, 1581, 1605]], [[64873, 64873], "mapped", [1588, 1580, 1610]], [[64874, 64875], "mapped", [1588, 1605, 1582]], [[64876, 64877], "mapped", [1588, 1605, 1605]], [[64878, 64878], "mapped", [1590, 1581, 1609]], [[64879, 64880], "mapped", [1590, 1582, 1605]], [[64881, 64882], "mapped", [1591, 1605, 1581]], [[64883, 64883], "mapped", [1591, 1605, 1605]], [[64884, 64884], "mapped", [1591, 1605, 1610]], [[64885, 64885], "mapped", [1593, 1580, 1605]], [[64886, 64887], "mapped", [1593, 1605, 1605]], [[64888, 64888], "mapped", [1593, 1605, 1609]], [[64889, 64889], "mapped", [1594, 1605, 1605]], [[64890, 64890], "mapped", [1594, 1605, 1610]], [[64891, 64891], "mapped", [1594, 1605, 1609]], [[64892, 64893], "mapped", [1601, 1582, 1605]], [[64894, 64894], "mapped", [1602, 1605, 1581]], [[64895, 64895], "mapped", [1602, 1605, 1605]], [[64896, 64896], "mapped", [1604, 1581, 1605]], [[64897, 64897], "mapped", [1604, 1581, 1610]], [[64898, 64898], "mapped", [1604, 1581, 1609]], [[64899, 64900], "mapped", [1604, 1580, 1580]], [[64901, 64902], "mapped", [1604, 1582, 1605]], [[64903, 64904], "mapped", [1604, 1605, 1581]], [[64905, 64905], "mapped", [1605, 1581, 1580]], [[64906, 64906], "mapped", [1605, 1581, 1605]], [[64907, 64907], "mapped", [1605, 1581, 1610]], [[64908, 64908], "mapped", [1605, 1580, 1581]], [[64909, 64909], "mapped", [1605, 1580, 1605]], [[64910, 64910], "mapped", [1605, 1582, 1580]], [[64911, 64911], "mapped", [1605, 1582, 1605]], [[64912, 64913], "disallowed"], [[64914, 64914], "mapped", [1605, 1580, 1582]], [[64915, 64915], "mapped", [1607, 1605, 1580]], [[64916, 64916], "mapped", [1607, 1605, 1605]], [[64917, 64917], "mapped", [1606, 1581, 1605]], [[64918, 64918], "mapped", [1606, 1581, 1609]], [[64919, 64920], "mapped", [1606, 1580, 1605]], [[64921, 64921], "mapped", [1606, 1580, 1609]], [[64922, 64922], "mapped", [1606, 1605, 1610]], [[64923, 64923], "mapped", [1606, 1605, 1609]], [[64924, 64925], "mapped", [1610, 1605, 1605]], [[64926, 64926], "mapped", [1576, 1582, 1610]], [[64927, 64927], "mapped", [1578, 1580, 1610]], [[64928, 64928], "mapped", [1578, 1580, 1609]], [[64929, 64929], "mapped", [1578, 1582, 1610]], [[64930, 64930], "mapped", [1578, 1582, 1609]], [[64931, 64931], "mapped", [1578, 1605, 1610]], [[64932, 64932], "mapped", [1578, 1605, 1609]], [[64933, 64933], "mapped", [1580, 1605, 1610]], [[64934, 64934], "mapped", [1580, 1581, 1609]], [[64935, 64935], "mapped", [1580, 1605, 1609]], [[64936, 64936], "mapped", [1587, 1582, 1609]], [[64937, 64937], "mapped", [1589, 1581, 1610]], [[64938, 64938], "mapped", [1588, 1581, 1610]], [[64939, 64939], "mapped", [1590, 1581, 1610]], [[64940, 64940], "mapped", [1604, 1580, 1610]], [[64941, 64941], "mapped", [1604, 1605, 1610]], [[64942, 64942], "mapped", [1610, 1581, 1610]], [[64943, 64943], "mapped", [1610, 1580, 1610]], [[64944, 64944], "mapped", [1610, 1605, 1610]], [[64945, 64945], "mapped", [1605, 1605, 1610]], [[64946, 64946], "mapped", [1602, 1605, 1610]], [[64947, 64947], "mapped", [1606, 1581, 1610]], [[64948, 64948], "mapped", [1602, 1605, 1581]], [[64949, 64949], "mapped", [1604, 1581, 1605]], [[64950, 64950], "mapped", [1593, 1605, 1610]], [[64951, 64951], "mapped", [1603, 1605, 1610]], [[64952, 64952], "mapped", [1606, 1580, 1581]], [[64953, 64953], "mapped", [1605, 1582, 1610]], [[64954, 64954], "mapped", [1604, 1580, 1605]], [[64955, 64955], "mapped", [1603, 1605, 1605]], [[64956, 64956], "mapped", [1604, 1580, 1605]], [[64957, 64957], "mapped", [1606, 1580, 1581]], [[64958, 64958], "mapped", [1580, 1581, 1610]], [[64959, 64959], "mapped", [1581, 1580, 1610]], [[64960, 64960], "mapped", [1605, 1580, 1610]], [[64961, 64961], "mapped", [1601, 1605, 1610]], [[64962, 64962], "mapped", [1576, 1581, 1610]], [[64963, 64963], "mapped", [1603, 1605, 1605]], [[64964, 64964], "mapped", [1593, 1580, 1605]], [[64965, 64965], "mapped", [1589, 1605, 1605]], [[64966, 64966], "mapped", [1587, 1582, 1610]], [[64967, 64967], "mapped", [1606, 1580, 1610]], [[64968, 64975], "disallowed"], [[64976, 65007], "disallowed"], [[65008, 65008], "mapped", [1589, 1604, 1746]], [[65009, 65009], "mapped", [1602, 1604, 1746]], [[65010, 65010], "mapped", [1575, 1604, 1604, 1607]], [[65011, 65011], "mapped", [1575, 1603, 1576, 1585]], [[65012, 65012], "mapped", [1605, 1581, 1605, 1583]], [[65013, 65013], "mapped", [1589, 1604, 1593, 1605]], [[65014, 65014], "mapped", [1585, 1587, 1608, 1604]], [[65015, 65015], "mapped", [1593, 1604, 1610, 1607]], [[65016, 65016], "mapped", [1608, 1587, 1604, 1605]], [[65017, 65017], "mapped", [1589, 1604, 1609]], [[65018, 65018], "disallowed_STD3_mapped", [1589, 1604, 1609, 32, 1575, 1604, 1604, 1607, 32, 1593, 1604, 1610, 1607, 32, 1608, 1587, 1604, 1605]], [[65019, 65019], "disallowed_STD3_mapped", [1580, 1604, 32, 1580, 1604, 1575, 1604, 1607]], [[65020, 65020], "mapped", [1585, 1740, 1575, 1604]], [[65021, 65021], "valid", [], "NV8"], [[65022, 65023], "disallowed"], [[65024, 65039], "ignored"], [[65040, 65040], "disallowed_STD3_mapped", [44]], [[65041, 65041], "mapped", [12289]], [[65042, 65042], "disallowed"], [[65043, 65043], "disallowed_STD3_mapped", [58]], [[65044, 65044], "disallowed_STD3_mapped", [59]], [[65045, 65045], "disallowed_STD3_mapped", [33]], [[65046, 65046], "disallowed_STD3_mapped", [63]], [[65047, 65047], "mapped", [12310]], [[65048, 65048], "mapped", [12311]], [[65049, 65049], "disallowed"], [[65050, 65055], "disallowed"], [[65056, 65059], "valid"], [[65060, 65062], "valid"], [[65063, 65069], "valid"], [[65070, 65071], "valid"], [[65072, 65072], "disallowed"], [[65073, 65073], "mapped", [8212]], [[65074, 65074], "mapped", [8211]], [[65075, 65076], "disallowed_STD3_mapped", [95]], [[65077, 65077], "disallowed_STD3_mapped", [40]], [[65078, 65078], "disallowed_STD3_mapped", [41]], [[65079, 65079], "disallowed_STD3_mapped", [123]], [[65080, 65080], "disallowed_STD3_mapped", [125]], [[65081, 65081], "mapped", [12308]], [[65082, 65082], "mapped", [12309]], [[65083, 65083], "mapped", [12304]], [[65084, 65084], "mapped", [12305]], [[65085, 65085], "mapped", [12298]], [[65086, 65086], "mapped", [12299]], [[65087, 65087], "mapped", [12296]], [[65088, 65088], "mapped", [12297]], [[65089, 65089], "mapped", [12300]], [[65090, 65090], "mapped", [12301]], [[65091, 65091], "mapped", [12302]], [[65092, 65092], "mapped", [12303]], [[65093, 65094], "valid", [], "NV8"], [[65095, 65095], "disallowed_STD3_mapped", [91]], [[65096, 65096], "disallowed_STD3_mapped", [93]], [[65097, 65100], "disallowed_STD3_mapped", [32, 773]], [[65101, 65103], "disallowed_STD3_mapped", [95]], [[65104, 65104], "disallowed_STD3_mapped", [44]], [[65105, 65105], "mapped", [12289]], [[65106, 65106], "disallowed"], [[65107, 65107], "disallowed"], [[65108, 65108], "disallowed_STD3_mapped", [59]], [[65109, 65109], "disallowed_STD3_mapped", [58]], [[65110, 65110], "disallowed_STD3_mapped", [63]], [[65111, 65111], "disallowed_STD3_mapped", [33]], [[65112, 65112], "mapped", [8212]], [[65113, 65113], "disallowed_STD3_mapped", [40]], [[65114, 65114], "disallowed_STD3_mapped", [41]], [[65115, 65115], "disallowed_STD3_mapped", [123]], [[65116, 65116], "disallowed_STD3_mapped", [125]], [[65117, 65117], "mapped", [12308]], [[65118, 65118], "mapped", [12309]], [[65119, 65119], "disallowed_STD3_mapped", [35]], [[65120, 65120], "disallowed_STD3_mapped", [38]], [[65121, 65121], "disallowed_STD3_mapped", [42]], [[65122, 65122], "disallowed_STD3_mapped", [43]], [[65123, 65123], "mapped", [45]], [[65124, 65124], "disallowed_STD3_mapped", [60]], [[65125, 65125], "disallowed_STD3_mapped", [62]], [[65126, 65126], "disallowed_STD3_mapped", [61]], [[65127, 65127], "disallowed"], [[65128, 65128], "disallowed_STD3_mapped", [92]], [[65129, 65129], "disallowed_STD3_mapped", [36]], [[65130, 65130], "disallowed_STD3_mapped", [37]], [[65131, 65131], "disallowed_STD3_mapped", [64]], [[65132, 65135], "disallowed"], [[65136, 65136], "disallowed_STD3_mapped", [32, 1611]], [[65137, 65137], "mapped", [1600, 1611]], [[65138, 65138], "disallowed_STD3_mapped", [32, 1612]], [[65139, 65139], "valid"], [[65140, 65140], "disallowed_STD3_mapped", [32, 1613]], [[65141, 65141], "disallowed"], [[65142, 65142], "disallowed_STD3_mapped", [32, 1614]], [[65143, 65143], "mapped", [1600, 1614]], [[65144, 65144], "disallowed_STD3_mapped", [32, 1615]], [[65145, 65145], "mapped", [1600, 1615]], [[65146, 65146], "disallowed_STD3_mapped", [32, 1616]], [[65147, 65147], "mapped", [1600, 1616]], [[65148, 65148], "disallowed_STD3_mapped", [32, 1617]], [[65149, 65149], "mapped", [1600, 1617]], [[65150, 65150], "disallowed_STD3_mapped", [32, 1618]], [[65151, 65151], "mapped", [1600, 1618]], [[65152, 65152], "mapped", [1569]], [[65153, 65154], "mapped", [1570]], [[65155, 65156], "mapped", [1571]], [[65157, 65158], "mapped", [1572]], [[65159, 65160], "mapped", [1573]], [[65161, 65164], "mapped", [1574]], [[65165, 65166], "mapped", [1575]], [[65167, 65170], "mapped", [1576]], [[65171, 65172], "mapped", [1577]], [[65173, 65176], "mapped", [1578]], [[65177, 65180], "mapped", [1579]], [[65181, 65184], "mapped", [1580]], [[65185, 65188], "mapped", [1581]], [[65189, 65192], "mapped", [1582]], [[65193, 65194], "mapped", [1583]], [[65195, 65196], "mapped", [1584]], [[65197, 65198], "mapped", [1585]], [[65199, 65200], "mapped", [1586]], [[65201, 65204], "mapped", [1587]], [[65205, 65208], "mapped", [1588]], [[65209, 65212], "mapped", [1589]], [[65213, 65216], "mapped", [1590]], [[65217, 65220], "mapped", [1591]], [[65221, 65224], "mapped", [1592]], [[65225, 65228], "mapped", [1593]], [[65229, 65232], "mapped", [1594]], [[65233, 65236], "mapped", [1601]], [[65237, 65240], "mapped", [1602]], [[65241, 65244], "mapped", [1603]], [[65245, 65248], "mapped", [1604]], [[65249, 65252], "mapped", [1605]], [[65253, 65256], "mapped", [1606]], [[65257, 65260], "mapped", [1607]], [[65261, 65262], "mapped", [1608]], [[65263, 65264], "mapped", [1609]], [[65265, 65268], "mapped", [1610]], [[65269, 65270], "mapped", [1604, 1570]], [[65271, 65272], "mapped", [1604, 1571]], [[65273, 65274], "mapped", [1604, 1573]], [[65275, 65276], "mapped", [1604, 1575]], [[65277, 65278], "disallowed"], [[65279, 65279], "ignored"], [[65280, 65280], "disallowed"], [[65281, 65281], "disallowed_STD3_mapped", [33]], [[65282, 65282], "disallowed_STD3_mapped", [34]], [[65283, 65283], "disallowed_STD3_mapped", [35]], [[65284, 65284], "disallowed_STD3_mapped", [36]], [[65285, 65285], "disallowed_STD3_mapped", [37]], [[65286, 65286], "disallowed_STD3_mapped", [38]], [[65287, 65287], "disallowed_STD3_mapped", [39]], [[65288, 65288], "disallowed_STD3_mapped", [40]], [[65289, 65289], "disallowed_STD3_mapped", [41]], [[65290, 65290], "disallowed_STD3_mapped", [42]], [[65291, 65291], "disallowed_STD3_mapped", [43]], [[65292, 65292], "disallowed_STD3_mapped", [44]], [[65293, 65293], "mapped", [45]], [[65294, 65294], "mapped", [46]], [[65295, 65295], "disallowed_STD3_mapped", [47]], [[65296, 65296], "mapped", [48]], [[65297, 65297], "mapped", [49]], [[65298, 65298], "mapped", [50]], [[65299, 65299], "mapped", [51]], [[65300, 65300], "mapped", [52]], [[65301, 65301], "mapped", [53]], [[65302, 65302], "mapped", [54]], [[65303, 65303], "mapped", [55]], [[65304, 65304], "mapped", [56]], [[65305, 65305], "mapped", [57]], [[65306, 65306], "disallowed_STD3_mapped", [58]], [[65307, 65307], "disallowed_STD3_mapped", [59]], [[65308, 65308], "disallowed_STD3_mapped", [60]], [[65309, 65309], "disallowed_STD3_mapped", [61]], [[65310, 65310], "disallowed_STD3_mapped", [62]], [[65311, 65311], "disallowed_STD3_mapped", [63]], [[65312, 65312], "disallowed_STD3_mapped", [64]], [[65313, 65313], "mapped", [97]], [[65314, 65314], "mapped", [98]], [[65315, 65315], "mapped", [99]], [[65316, 65316], "mapped", [100]], [[65317, 65317], "mapped", [101]], [[65318, 65318], "mapped", [102]], [[65319, 65319], "mapped", [103]], [[65320, 65320], "mapped", [104]], [[65321, 65321], "mapped", [105]], [[65322, 65322], "mapped", [106]], [[65323, 65323], "mapped", [107]], [[65324, 65324], "mapped", [108]], [[65325, 65325], "mapped", [109]], [[65326, 65326], "mapped", [110]], [[65327, 65327], "mapped", [111]], [[65328, 65328], "mapped", [112]], [[65329, 65329], "mapped", [113]], [[65330, 65330], "mapped", [114]], [[65331, 65331], "mapped", [115]], [[65332, 65332], "mapped", [116]], [[65333, 65333], "mapped", [117]], [[65334, 65334], "mapped", [118]], [[65335, 65335], "mapped", [119]], [[65336, 65336], "mapped", [120]], [[65337, 65337], "mapped", [121]], [[65338, 65338], "mapped", [122]], [[65339, 65339], "disallowed_STD3_mapped", [91]], [[65340, 65340], "disallowed_STD3_mapped", [92]], [[65341, 65341], "disallowed_STD3_mapped", [93]], [[65342, 65342], "disallowed_STD3_mapped", [94]], [[65343, 65343], "disallowed_STD3_mapped", [95]], [[65344, 65344], "disallowed_STD3_mapped", [96]], [[65345, 65345], "mapped", [97]], [[65346, 65346], "mapped", [98]], [[65347, 65347], "mapped", [99]], [[65348, 65348], "mapped", [100]], [[65349, 65349], "mapped", [101]], [[65350, 65350], "mapped", [102]], [[65351, 65351], "mapped", [103]], [[65352, 65352], "mapped", [104]], [[65353, 65353], "mapped", [105]], [[65354, 65354], "mapped", [106]], [[65355, 65355], "mapped", [107]], [[65356, 65356], "mapped", [108]], [[65357, 65357], "mapped", [109]], [[65358, 65358], "mapped", [110]], [[65359, 65359], "mapped", [111]], [[65360, 65360], "mapped", [112]], [[65361, 65361], "mapped", [113]], [[65362, 65362], "mapped", [114]], [[65363, 65363], "mapped", [115]], [[65364, 65364], "mapped", [116]], [[65365, 65365], "mapped", [117]], [[65366, 65366], "mapped", [118]], [[65367, 65367], "mapped", [119]], [[65368, 65368], "mapped", [120]], [[65369, 65369], "mapped", [121]], [[65370, 65370], "mapped", [122]], [[65371, 65371], "disallowed_STD3_mapped", [123]], [[65372, 65372], "disallowed_STD3_mapped", [124]], [[65373, 65373], "disallowed_STD3_mapped", [125]], [[65374, 65374], "disallowed_STD3_mapped", [126]], [[65375, 65375], "mapped", [10629]], [[65376, 65376], "mapped", [10630]], [[65377, 65377], "mapped", [46]], [[65378, 65378], "mapped", [12300]], [[65379, 65379], "mapped", [12301]], [[65380, 65380], "mapped", [12289]], [[65381, 65381], "mapped", [12539]], [[65382, 65382], "mapped", [12530]], [[65383, 65383], "mapped", [12449]], [[65384, 65384], "mapped", [12451]], [[65385, 65385], "mapped", [12453]], [[65386, 65386], "mapped", [12455]], [[65387, 65387], "mapped", [12457]], [[65388, 65388], "mapped", [12515]], [[65389, 65389], "mapped", [12517]], [[65390, 65390], "mapped", [12519]], [[65391, 65391], "mapped", [12483]], [[65392, 65392], "mapped", [12540]], [[65393, 65393], "mapped", [12450]], [[65394, 65394], "mapped", [12452]], [[65395, 65395], "mapped", [12454]], [[65396, 65396], "mapped", [12456]], [[65397, 65397], "mapped", [12458]], [[65398, 65398], "mapped", [12459]], [[65399, 65399], "mapped", [12461]], [[65400, 65400], "mapped", [12463]], [[65401, 65401], "mapped", [12465]], [[65402, 65402], "mapped", [12467]], [[65403, 65403], "mapped", [12469]], [[65404, 65404], "mapped", [12471]], [[65405, 65405], "mapped", [12473]], [[65406, 65406], "mapped", [12475]], [[65407, 65407], "mapped", [12477]], [[65408, 65408], "mapped", [12479]], [[65409, 65409], "mapped", [12481]], [[65410, 65410], "mapped", [12484]], [[65411, 65411], "mapped", [12486]], [[65412, 65412], "mapped", [12488]], [[65413, 65413], "mapped", [12490]], [[65414, 65414], "mapped", [12491]], [[65415, 65415], "mapped", [12492]], [[65416, 65416], "mapped", [12493]], [[65417, 65417], "mapped", [12494]], [[65418, 65418], "mapped", [12495]], [[65419, 65419], "mapped", [12498]], [[65420, 65420], "mapped", [12501]], [[65421, 65421], "mapped", [12504]], [[65422, 65422], "mapped", [12507]], [[65423, 65423], "mapped", [12510]], [[65424, 65424], "mapped", [12511]], [[65425, 65425], "mapped", [12512]], [[65426, 65426], "mapped", [12513]], [[65427, 65427], "mapped", [12514]], [[65428, 65428], "mapped", [12516]], [[65429, 65429], "mapped", [12518]], [[65430, 65430], "mapped", [12520]], [[65431, 65431], "mapped", [12521]], [[65432, 65432], "mapped", [12522]], [[65433, 65433], "mapped", [12523]], [[65434, 65434], "mapped", [12524]], [[65435, 65435], "mapped", [12525]], [[65436, 65436], "mapped", [12527]], [[65437, 65437], "mapped", [12531]], [[65438, 65438], "mapped", [12441]], [[65439, 65439], "mapped", [12442]], [[65440, 65440], "disallowed"], [[65441, 65441], "mapped", [4352]], [[65442, 65442], "mapped", [4353]], [[65443, 65443], "mapped", [4522]], [[65444, 65444], "mapped", [4354]], [[65445, 65445], "mapped", [4524]], [[65446, 65446], "mapped", [4525]], [[65447, 65447], "mapped", [4355]], [[65448, 65448], "mapped", [4356]], [[65449, 65449], "mapped", [4357]], [[65450, 65450], "mapped", [4528]], [[65451, 65451], "mapped", [4529]], [[65452, 65452], "mapped", [4530]], [[65453, 65453], "mapped", [4531]], [[65454, 65454], "mapped", [4532]], [[65455, 65455], "mapped", [4533]], [[65456, 65456], "mapped", [4378]], [[65457, 65457], "mapped", [4358]], [[65458, 65458], "mapped", [4359]], [[65459, 65459], "mapped", [4360]], [[65460, 65460], "mapped", [4385]], [[65461, 65461], "mapped", [4361]], [[65462, 65462], "mapped", [4362]], [[65463, 65463], "mapped", [4363]], [[65464, 65464], "mapped", [4364]], [[65465, 65465], "mapped", [4365]], [[65466, 65466], "mapped", [4366]], [[65467, 65467], "mapped", [4367]], [[65468, 65468], "mapped", [4368]], [[65469, 65469], "mapped", [4369]], [[65470, 65470], "mapped", [4370]], [[65471, 65473], "disallowed"], [[65474, 65474], "mapped", [4449]], [[65475, 65475], "mapped", [4450]], [[65476, 65476], "mapped", [4451]], [[65477, 65477], "mapped", [4452]], [[65478, 65478], "mapped", [4453]], [[65479, 65479], "mapped", [4454]], [[65480, 65481], "disallowed"], [[65482, 65482], "mapped", [4455]], [[65483, 65483], "mapped", [4456]], [[65484, 65484], "mapped", [4457]], [[65485, 65485], "mapped", [4458]], [[65486, 65486], "mapped", [4459]], [[65487, 65487], "mapped", [4460]], [[65488, 65489], "disallowed"], [[65490, 65490], "mapped", [4461]], [[65491, 65491], "mapped", [4462]], [[65492, 65492], "mapped", [4463]], [[65493, 65493], "mapped", [4464]], [[65494, 65494], "mapped", [4465]], [[65495, 65495], "mapped", [4466]], [[65496, 65497], "disallowed"], [[65498, 65498], "mapped", [4467]], [[65499, 65499], "mapped", [4468]], [[65500, 65500], "mapped", [4469]], [[65501, 65503], "disallowed"], [[65504, 65504], "mapped", [162]], [[65505, 65505], "mapped", [163]], [[65506, 65506], "mapped", [172]], [[65507, 65507], "disallowed_STD3_mapped", [32, 772]], [[65508, 65508], "mapped", [166]], [[65509, 65509], "mapped", [165]], [[65510, 65510], "mapped", [8361]], [[65511, 65511], "disallowed"], [[65512, 65512], "mapped", [9474]], [[65513, 65513], "mapped", [8592]], [[65514, 65514], "mapped", [8593]], [[65515, 65515], "mapped", [8594]], [[65516, 65516], "mapped", [8595]], [[65517, 65517], "mapped", [9632]], [[65518, 65518], "mapped", [9675]], [[65519, 65528], "disallowed"], [[65529, 65531], "disallowed"], [[65532, 65532], "disallowed"], [[65533, 65533], "disallowed"], [[65534, 65535], "disallowed"], [[65536, 65547], "valid"], [[65548, 65548], "disallowed"], [[65549, 65574], "valid"], [[65575, 65575], "disallowed"], [[65576, 65594], "valid"], [[65595, 65595], "disallowed"], [[65596, 65597], "valid"], [[65598, 65598], "disallowed"], [[65599, 65613], "valid"], [[65614, 65615], "disallowed"], [[65616, 65629], "valid"], [[65630, 65663], "disallowed"], [[65664, 65786], "valid"], [[65787, 65791], "disallowed"], [[65792, 65794], "valid", [], "NV8"], [[65795, 65798], "disallowed"], [[65799, 65843], "valid", [], "NV8"], [[65844, 65846], "disallowed"], [[65847, 65855], "valid", [], "NV8"], [[65856, 65930], "valid", [], "NV8"], [[65931, 65932], "valid", [], "NV8"], [[65933, 65935], "disallowed"], [[65936, 65947], "valid", [], "NV8"], [[65948, 65951], "disallowed"], [[65952, 65952], "valid", [], "NV8"], [[65953, 65999], "disallowed"], [[66e3, 66044], "valid", [], "NV8"], [[66045, 66045], "valid"], [[66046, 66175], "disallowed"], [[66176, 66204], "valid"], [[66205, 66207], "disallowed"], [[66208, 66256], "valid"], [[66257, 66271], "disallowed"], [[66272, 66272], "valid"], [[66273, 66299], "valid", [], "NV8"], [[66300, 66303], "disallowed"], [[66304, 66334], "valid"], [[66335, 66335], "valid"], [[66336, 66339], "valid", [], "NV8"], [[66340, 66351], "disallowed"], [[66352, 66368], "valid"], [[66369, 66369], "valid", [], "NV8"], [[66370, 66377], "valid"], [[66378, 66378], "valid", [], "NV8"], [[66379, 66383], "disallowed"], [[66384, 66426], "valid"], [[66427, 66431], "disallowed"], [[66432, 66461], "valid"], [[66462, 66462], "disallowed"], [[66463, 66463], "valid", [], "NV8"], [[66464, 66499], "valid"], [[66500, 66503], "disallowed"], [[66504, 66511], "valid"], [[66512, 66517], "valid", [], "NV8"], [[66518, 66559], "disallowed"], [[66560, 66560], "mapped", [66600]], [[66561, 66561], "mapped", [66601]], [[66562, 66562], "mapped", [66602]], [[66563, 66563], "mapped", [66603]], [[66564, 66564], "mapped", [66604]], [[66565, 66565], "mapped", [66605]], [[66566, 66566], "mapped", [66606]], [[66567, 66567], "mapped", [66607]], [[66568, 66568], "mapped", [66608]], [[66569, 66569], "mapped", [66609]], [[66570, 66570], "mapped", [66610]], [[66571, 66571], "mapped", [66611]], [[66572, 66572], "mapped", [66612]], [[66573, 66573], "mapped", [66613]], [[66574, 66574], "mapped", [66614]], [[66575, 66575], "mapped", [66615]], [[66576, 66576], "mapped", [66616]], [[66577, 66577], "mapped", [66617]], [[66578, 66578], "mapped", [66618]], [[66579, 66579], "mapped", [66619]], [[66580, 66580], "mapped", [66620]], [[66581, 66581], "mapped", [66621]], [[66582, 66582], "mapped", [66622]], [[66583, 66583], "mapped", [66623]], [[66584, 66584], "mapped", [66624]], [[66585, 66585], "mapped", [66625]], [[66586, 66586], "mapped", [66626]], [[66587, 66587], "mapped", [66627]], [[66588, 66588], "mapped", [66628]], [[66589, 66589], "mapped", [66629]], [[66590, 66590], "mapped", [66630]], [[66591, 66591], "mapped", [66631]], [[66592, 66592], "mapped", [66632]], [[66593, 66593], "mapped", [66633]], [[66594, 66594], "mapped", [66634]], [[66595, 66595], "mapped", [66635]], [[66596, 66596], "mapped", [66636]], [[66597, 66597], "mapped", [66637]], [[66598, 66598], "mapped", [66638]], [[66599, 66599], "mapped", [66639]], [[66600, 66637], "valid"], [[66638, 66717], "valid"], [[66718, 66719], "disallowed"], [[66720, 66729], "valid"], [[66730, 66815], "disallowed"], [[66816, 66855], "valid"], [[66856, 66863], "disallowed"], [[66864, 66915], "valid"], [[66916, 66926], "disallowed"], [[66927, 66927], "valid", [], "NV8"], [[66928, 67071], "disallowed"], [[67072, 67382], "valid"], [[67383, 67391], "disallowed"], [[67392, 67413], "valid"], [[67414, 67423], "disallowed"], [[67424, 67431], "valid"], [[67432, 67583], "disallowed"], [[67584, 67589], "valid"], [[67590, 67591], "disallowed"], [[67592, 67592], "valid"], [[67593, 67593], "disallowed"], [[67594, 67637], "valid"], [[67638, 67638], "disallowed"], [[67639, 67640], "valid"], [[67641, 67643], "disallowed"], [[67644, 67644], "valid"], [[67645, 67646], "disallowed"], [[67647, 67647], "valid"], [[67648, 67669], "valid"], [[67670, 67670], "disallowed"], [[67671, 67679], "valid", [], "NV8"], [[67680, 67702], "valid"], [[67703, 67711], "valid", [], "NV8"], [[67712, 67742], "valid"], [[67743, 67750], "disallowed"], [[67751, 67759], "valid", [], "NV8"], [[67760, 67807], "disallowed"], [[67808, 67826], "valid"], [[67827, 67827], "disallowed"], [[67828, 67829], "valid"], [[67830, 67834], "disallowed"], [[67835, 67839], "valid", [], "NV8"], [[67840, 67861], "valid"], [[67862, 67865], "valid", [], "NV8"], [[67866, 67867], "valid", [], "NV8"], [[67868, 67870], "disallowed"], [[67871, 67871], "valid", [], "NV8"], [[67872, 67897], "valid"], [[67898, 67902], "disallowed"], [[67903, 67903], "valid", [], "NV8"], [[67904, 67967], "disallowed"], [[67968, 68023], "valid"], [[68024, 68027], "disallowed"], [[68028, 68029], "valid", [], "NV8"], [[68030, 68031], "valid"], [[68032, 68047], "valid", [], "NV8"], [[68048, 68049], "disallowed"], [[68050, 68095], "valid", [], "NV8"], [[68096, 68099], "valid"], [[68100, 68100], "disallowed"], [[68101, 68102], "valid"], [[68103, 68107], "disallowed"], [[68108, 68115], "valid"], [[68116, 68116], "disallowed"], [[68117, 68119], "valid"], [[68120, 68120], "disallowed"], [[68121, 68147], "valid"], [[68148, 68151], "disallowed"], [[68152, 68154], "valid"], [[68155, 68158], "disallowed"], [[68159, 68159], "valid"], [[68160, 68167], "valid", [], "NV8"], [[68168, 68175], "disallowed"], [[68176, 68184], "valid", [], "NV8"], [[68185, 68191], "disallowed"], [[68192, 68220], "valid"], [[68221, 68223], "valid", [], "NV8"], [[68224, 68252], "valid"], [[68253, 68255], "valid", [], "NV8"], [[68256, 68287], "disallowed"], [[68288, 68295], "valid"], [[68296, 68296], "valid", [], "NV8"], [[68297, 68326], "valid"], [[68327, 68330], "disallowed"], [[68331, 68342], "valid", [], "NV8"], [[68343, 68351], "disallowed"], [[68352, 68405], "valid"], [[68406, 68408], "disallowed"], [[68409, 68415], "valid", [], "NV8"], [[68416, 68437], "valid"], [[68438, 68439], "disallowed"], [[68440, 68447], "valid", [], "NV8"], [[68448, 68466], "valid"], [[68467, 68471], "disallowed"], [[68472, 68479], "valid", [], "NV8"], [[68480, 68497], "valid"], [[68498, 68504], "disallowed"], [[68505, 68508], "valid", [], "NV8"], [[68509, 68520], "disallowed"], [[68521, 68527], "valid", [], "NV8"], [[68528, 68607], "disallowed"], [[68608, 68680], "valid"], [[68681, 68735], "disallowed"], [[68736, 68736], "mapped", [68800]], [[68737, 68737], "mapped", [68801]], [[68738, 68738], "mapped", [68802]], [[68739, 68739], "mapped", [68803]], [[68740, 68740], "mapped", [68804]], [[68741, 68741], "mapped", [68805]], [[68742, 68742], "mapped", [68806]], [[68743, 68743], "mapped", [68807]], [[68744, 68744], "mapped", [68808]], [[68745, 68745], "mapped", [68809]], [[68746, 68746], "mapped", [68810]], [[68747, 68747], "mapped", [68811]], [[68748, 68748], "mapped", [68812]], [[68749, 68749], "mapped", [68813]], [[68750, 68750], "mapped", [68814]], [[68751, 68751], "mapped", [68815]], [[68752, 68752], "mapped", [68816]], [[68753, 68753], "mapped", [68817]], [[68754, 68754], "mapped", [68818]], [[68755, 68755], "mapped", [68819]], [[68756, 68756], "mapped", [68820]], [[68757, 68757], "mapped", [68821]], [[68758, 68758], "mapped", [68822]], [[68759, 68759], "mapped", [68823]], [[68760, 68760], "mapped", [68824]], [[68761, 68761], "mapped", [68825]], [[68762, 68762], "mapped", [68826]], [[68763, 68763], "mapped", [68827]], [[68764, 68764], "mapped", [68828]], [[68765, 68765], "mapped", [68829]], [[68766, 68766], "mapped", [68830]], [[68767, 68767], "mapped", [68831]], [[68768, 68768], "mapped", [68832]], [[68769, 68769], "mapped", [68833]], [[68770, 68770], "mapped", [68834]], [[68771, 68771], "mapped", [68835]], [[68772, 68772], "mapped", [68836]], [[68773, 68773], "mapped", [68837]], [[68774, 68774], "mapped", [68838]], [[68775, 68775], "mapped", [68839]], [[68776, 68776], "mapped", [68840]], [[68777, 68777], "mapped", [68841]], [[68778, 68778], "mapped", [68842]], [[68779, 68779], "mapped", [68843]], [[68780, 68780], "mapped", [68844]], [[68781, 68781], "mapped", [68845]], [[68782, 68782], "mapped", [68846]], [[68783, 68783], "mapped", [68847]], [[68784, 68784], "mapped", [68848]], [[68785, 68785], "mapped", [68849]], [[68786, 68786], "mapped", [68850]], [[68787, 68799], "disallowed"], [[68800, 68850], "valid"], [[68851, 68857], "disallowed"], [[68858, 68863], "valid", [], "NV8"], [[68864, 69215], "disallowed"], [[69216, 69246], "valid", [], "NV8"], [[69247, 69631], "disallowed"], [[69632, 69702], "valid"], [[69703, 69709], "valid", [], "NV8"], [[69710, 69713], "disallowed"], [[69714, 69733], "valid", [], "NV8"], [[69734, 69743], "valid"], [[69744, 69758], "disallowed"], [[69759, 69759], "valid"], [[69760, 69818], "valid"], [[69819, 69820], "valid", [], "NV8"], [[69821, 69821], "disallowed"], [[69822, 69825], "valid", [], "NV8"], [[69826, 69839], "disallowed"], [[69840, 69864], "valid"], [[69865, 69871], "disallowed"], [[69872, 69881], "valid"], [[69882, 69887], "disallowed"], [[69888, 69940], "valid"], [[69941, 69941], "disallowed"], [[69942, 69951], "valid"], [[69952, 69955], "valid", [], "NV8"], [[69956, 69967], "disallowed"], [[69968, 70003], "valid"], [[70004, 70005], "valid", [], "NV8"], [[70006, 70006], "valid"], [[70007, 70015], "disallowed"], [[70016, 70084], "valid"], [[70085, 70088], "valid", [], "NV8"], [[70089, 70089], "valid", [], "NV8"], [[70090, 70092], "valid"], [[70093, 70093], "valid", [], "NV8"], [[70094, 70095], "disallowed"], [[70096, 70105], "valid"], [[70106, 70106], "valid"], [[70107, 70107], "valid", [], "NV8"], [[70108, 70108], "valid"], [[70109, 70111], "valid", [], "NV8"], [[70112, 70112], "disallowed"], [[70113, 70132], "valid", [], "NV8"], [[70133, 70143], "disallowed"], [[70144, 70161], "valid"], [[70162, 70162], "disallowed"], [[70163, 70199], "valid"], [[70200, 70205], "valid", [], "NV8"], [[70206, 70271], "disallowed"], [[70272, 70278], "valid"], [[70279, 70279], "disallowed"], [[70280, 70280], "valid"], [[70281, 70281], "disallowed"], [[70282, 70285], "valid"], [[70286, 70286], "disallowed"], [[70287, 70301], "valid"], [[70302, 70302], "disallowed"], [[70303, 70312], "valid"], [[70313, 70313], "valid", [], "NV8"], [[70314, 70319], "disallowed"], [[70320, 70378], "valid"], [[70379, 70383], "disallowed"], [[70384, 70393], "valid"], [[70394, 70399], "disallowed"], [[70400, 70400], "valid"], [[70401, 70403], "valid"], [[70404, 70404], "disallowed"], [[70405, 70412], "valid"], [[70413, 70414], "disallowed"], [[70415, 70416], "valid"], [[70417, 70418], "disallowed"], [[70419, 70440], "valid"], [[70441, 70441], "disallowed"], [[70442, 70448], "valid"], [[70449, 70449], "disallowed"], [[70450, 70451], "valid"], [[70452, 70452], "disallowed"], [[70453, 70457], "valid"], [[70458, 70459], "disallowed"], [[70460, 70468], "valid"], [[70469, 70470], "disallowed"], [[70471, 70472], "valid"], [[70473, 70474], "disallowed"], [[70475, 70477], "valid"], [[70478, 70479], "disallowed"], [[70480, 70480], "valid"], [[70481, 70486], "disallowed"], [[70487, 70487], "valid"], [[70488, 70492], "disallowed"], [[70493, 70499], "valid"], [[70500, 70501], "disallowed"], [[70502, 70508], "valid"], [[70509, 70511], "disallowed"], [[70512, 70516], "valid"], [[70517, 70783], "disallowed"], [[70784, 70853], "valid"], [[70854, 70854], "valid", [], "NV8"], [[70855, 70855], "valid"], [[70856, 70863], "disallowed"], [[70864, 70873], "valid"], [[70874, 71039], "disallowed"], [[71040, 71093], "valid"], [[71094, 71095], "disallowed"], [[71096, 71104], "valid"], [[71105, 71113], "valid", [], "NV8"], [[71114, 71127], "valid", [], "NV8"], [[71128, 71133], "valid"], [[71134, 71167], "disallowed"], [[71168, 71232], "valid"], [[71233, 71235], "valid", [], "NV8"], [[71236, 71236], "valid"], [[71237, 71247], "disallowed"], [[71248, 71257], "valid"], [[71258, 71295], "disallowed"], [[71296, 71351], "valid"], [[71352, 71359], "disallowed"], [[71360, 71369], "valid"], [[71370, 71423], "disallowed"], [[71424, 71449], "valid"], [[71450, 71452], "disallowed"], [[71453, 71467], "valid"], [[71468, 71471], "disallowed"], [[71472, 71481], "valid"], [[71482, 71487], "valid", [], "NV8"], [[71488, 71839], "disallowed"], [[71840, 71840], "mapped", [71872]], [[71841, 71841], "mapped", [71873]], [[71842, 71842], "mapped", [71874]], [[71843, 71843], "mapped", [71875]], [[71844, 71844], "mapped", [71876]], [[71845, 71845], "mapped", [71877]], [[71846, 71846], "mapped", [71878]], [[71847, 71847], "mapped", [71879]], [[71848, 71848], "mapped", [71880]], [[71849, 71849], "mapped", [71881]], [[71850, 71850], "mapped", [71882]], [[71851, 71851], "mapped", [71883]], [[71852, 71852], "mapped", [71884]], [[71853, 71853], "mapped", [71885]], [[71854, 71854], "mapped", [71886]], [[71855, 71855], "mapped", [71887]], [[71856, 71856], "mapped", [71888]], [[71857, 71857], "mapped", [71889]], [[71858, 71858], "mapped", [71890]], [[71859, 71859], "mapped", [71891]], [[71860, 71860], "mapped", [71892]], [[71861, 71861], "mapped", [71893]], [[71862, 71862], "mapped", [71894]], [[71863, 71863], "mapped", [71895]], [[71864, 71864], "mapped", [71896]], [[71865, 71865], "mapped", [71897]], [[71866, 71866], "mapped", [71898]], [[71867, 71867], "mapped", [71899]], [[71868, 71868], "mapped", [71900]], [[71869, 71869], "mapped", [71901]], [[71870, 71870], "mapped", [71902]], [[71871, 71871], "mapped", [71903]], [[71872, 71913], "valid"], [[71914, 71922], "valid", [], "NV8"], [[71923, 71934], "disallowed"], [[71935, 71935], "valid"], [[71936, 72383], "disallowed"], [[72384, 72440], "valid"], [[72441, 73727], "disallowed"], [[73728, 74606], "valid"], [[74607, 74648], "valid"], [[74649, 74649], "valid"], [[74650, 74751], "disallowed"], [[74752, 74850], "valid", [], "NV8"], [[74851, 74862], "valid", [], "NV8"], [[74863, 74863], "disallowed"], [[74864, 74867], "valid", [], "NV8"], [[74868, 74868], "valid", [], "NV8"], [[74869, 74879], "disallowed"], [[74880, 75075], "valid"], [[75076, 77823], "disallowed"], [[77824, 78894], "valid"], [[78895, 82943], "disallowed"], [[82944, 83526], "valid"], [[83527, 92159], "disallowed"], [[92160, 92728], "valid"], [[92729, 92735], "disallowed"], [[92736, 92766], "valid"], [[92767, 92767], "disallowed"], [[92768, 92777], "valid"], [[92778, 92781], "disallowed"], [[92782, 92783], "valid", [], "NV8"], [[92784, 92879], "disallowed"], [[92880, 92909], "valid"], [[92910, 92911], "disallowed"], [[92912, 92916], "valid"], [[92917, 92917], "valid", [], "NV8"], [[92918, 92927], "disallowed"], [[92928, 92982], "valid"], [[92983, 92991], "valid", [], "NV8"], [[92992, 92995], "valid"], [[92996, 92997], "valid", [], "NV8"], [[92998, 93007], "disallowed"], [[93008, 93017], "valid"], [[93018, 93018], "disallowed"], [[93019, 93025], "valid", [], "NV8"], [[93026, 93026], "disallowed"], [[93027, 93047], "valid"], [[93048, 93052], "disallowed"], [[93053, 93071], "valid"], [[93072, 93951], "disallowed"], [[93952, 94020], "valid"], [[94021, 94031], "disallowed"], [[94032, 94078], "valid"], [[94079, 94094], "disallowed"], [[94095, 94111], "valid"], [[94112, 110591], "disallowed"], [[110592, 110593], "valid"], [[110594, 113663], "disallowed"], [[113664, 113770], "valid"], [[113771, 113775], "disallowed"], [[113776, 113788], "valid"], [[113789, 113791], "disallowed"], [[113792, 113800], "valid"], [[113801, 113807], "disallowed"], [[113808, 113817], "valid"], [[113818, 113819], "disallowed"], [[113820, 113820], "valid", [], "NV8"], [[113821, 113822], "valid"], [[113823, 113823], "valid", [], "NV8"], [[113824, 113827], "ignored"], [[113828, 118783], "disallowed"], [[118784, 119029], "valid", [], "NV8"], [[119030, 119039], "disallowed"], [[119040, 119078], "valid", [], "NV8"], [[119079, 119080], "disallowed"], [[119081, 119081], "valid", [], "NV8"], [[119082, 119133], "valid", [], "NV8"], [[119134, 119134], "mapped", [119127, 119141]], [[119135, 119135], "mapped", [119128, 119141]], [[119136, 119136], "mapped", [119128, 119141, 119150]], [[119137, 119137], "mapped", [119128, 119141, 119151]], [[119138, 119138], "mapped", [119128, 119141, 119152]], [[119139, 119139], "mapped", [119128, 119141, 119153]], [[119140, 119140], "mapped", [119128, 119141, 119154]], [[119141, 119154], "valid", [], "NV8"], [[119155, 119162], "disallowed"], [[119163, 119226], "valid", [], "NV8"], [[119227, 119227], "mapped", [119225, 119141]], [[119228, 119228], "mapped", [119226, 119141]], [[119229, 119229], "mapped", [119225, 119141, 119150]], [[119230, 119230], "mapped", [119226, 119141, 119150]], [[119231, 119231], "mapped", [119225, 119141, 119151]], [[119232, 119232], "mapped", [119226, 119141, 119151]], [[119233, 119261], "valid", [], "NV8"], [[119262, 119272], "valid", [], "NV8"], [[119273, 119295], "disallowed"], [[119296, 119365], "valid", [], "NV8"], [[119366, 119551], "disallowed"], [[119552, 119638], "valid", [], "NV8"], [[119639, 119647], "disallowed"], [[119648, 119665], "valid", [], "NV8"], [[119666, 119807], "disallowed"], [[119808, 119808], "mapped", [97]], [[119809, 119809], "mapped", [98]], [[119810, 119810], "mapped", [99]], [[119811, 119811], "mapped", [100]], [[119812, 119812], "mapped", [101]], [[119813, 119813], "mapped", [102]], [[119814, 119814], "mapped", [103]], [[119815, 119815], "mapped", [104]], [[119816, 119816], "mapped", [105]], [[119817, 119817], "mapped", [106]], [[119818, 119818], "mapped", [107]], [[119819, 119819], "mapped", [108]], [[119820, 119820], "mapped", [109]], [[119821, 119821], "mapped", [110]], [[119822, 119822], "mapped", [111]], [[119823, 119823], "mapped", [112]], [[119824, 119824], "mapped", [113]], [[119825, 119825], "mapped", [114]], [[119826, 119826], "mapped", [115]], [[119827, 119827], "mapped", [116]], [[119828, 119828], "mapped", [117]], [[119829, 119829], "mapped", [118]], [[119830, 119830], "mapped", [119]], [[119831, 119831], "mapped", [120]], [[119832, 119832], "mapped", [121]], [[119833, 119833], "mapped", [122]], [[119834, 119834], "mapped", [97]], [[119835, 119835], "mapped", [98]], [[119836, 119836], "mapped", [99]], [[119837, 119837], "mapped", [100]], [[119838, 119838], "mapped", [101]], [[119839, 119839], "mapped", [102]], [[119840, 119840], "mapped", [103]], [[119841, 119841], "mapped", [104]], [[119842, 119842], "mapped", [105]], [[119843, 119843], "mapped", [106]], [[119844, 119844], "mapped", [107]], [[119845, 119845], "mapped", [108]], [[119846, 119846], "mapped", [109]], [[119847, 119847], "mapped", [110]], [[119848, 119848], "mapped", [111]], [[119849, 119849], "mapped", [112]], [[119850, 119850], "mapped", [113]], [[119851, 119851], "mapped", [114]], [[119852, 119852], "mapped", [115]], [[119853, 119853], "mapped", [116]], [[119854, 119854], "mapped", [117]], [[119855, 119855], "mapped", [118]], [[119856, 119856], "mapped", [119]], [[119857, 119857], "mapped", [120]], [[119858, 119858], "mapped", [121]], [[119859, 119859], "mapped", [122]], [[119860, 119860], "mapped", [97]], [[119861, 119861], "mapped", [98]], [[119862, 119862], "mapped", [99]], [[119863, 119863], "mapped", [100]], [[119864, 119864], "mapped", [101]], [[119865, 119865], "mapped", [102]], [[119866, 119866], "mapped", [103]], [[119867, 119867], "mapped", [104]], [[119868, 119868], "mapped", [105]], [[119869, 119869], "mapped", [106]], [[119870, 119870], "mapped", [107]], [[119871, 119871], "mapped", [108]], [[119872, 119872], "mapped", [109]], [[119873, 119873], "mapped", [110]], [[119874, 119874], "mapped", [111]], [[119875, 119875], "mapped", [112]], [[119876, 119876], "mapped", [113]], [[119877, 119877], "mapped", [114]], [[119878, 119878], "mapped", [115]], [[119879, 119879], "mapped", [116]], [[119880, 119880], "mapped", [117]], [[119881, 119881], "mapped", [118]], [[119882, 119882], "mapped", [119]], [[119883, 119883], "mapped", [120]], [[119884, 119884], "mapped", [121]], [[119885, 119885], "mapped", [122]], [[119886, 119886], "mapped", [97]], [[119887, 119887], "mapped", [98]], [[119888, 119888], "mapped", [99]], [[119889, 119889], "mapped", [100]], [[119890, 119890], "mapped", [101]], [[119891, 119891], "mapped", [102]], [[119892, 119892], "mapped", [103]], [[119893, 119893], "disallowed"], [[119894, 119894], "mapped", [105]], [[119895, 119895], "mapped", [106]], [[119896, 119896], "mapped", [107]], [[119897, 119897], "mapped", [108]], [[119898, 119898], "mapped", [109]], [[119899, 119899], "mapped", [110]], [[119900, 119900], "mapped", [111]], [[119901, 119901], "mapped", [112]], [[119902, 119902], "mapped", [113]], [[119903, 119903], "mapped", [114]], [[119904, 119904], "mapped", [115]], [[119905, 119905], "mapped", [116]], [[119906, 119906], "mapped", [117]], [[119907, 119907], "mapped", [118]], [[119908, 119908], "mapped", [119]], [[119909, 119909], "mapped", [120]], [[119910, 119910], "mapped", [121]], [[119911, 119911], "mapped", [122]], [[119912, 119912], "mapped", [97]], [[119913, 119913], "mapped", [98]], [[119914, 119914], "mapped", [99]], [[119915, 119915], "mapped", [100]], [[119916, 119916], "mapped", [101]], [[119917, 119917], "mapped", [102]], [[119918, 119918], "mapped", [103]], [[119919, 119919], "mapped", [104]], [[119920, 119920], "mapped", [105]], [[119921, 119921], "mapped", [106]], [[119922, 119922], "mapped", [107]], [[119923, 119923], "mapped", [108]], [[119924, 119924], "mapped", [109]], [[119925, 119925], "mapped", [110]], [[119926, 119926], "mapped", [111]], [[119927, 119927], "mapped", [112]], [[119928, 119928], "mapped", [113]], [[119929, 119929], "mapped", [114]], [[119930, 119930], "mapped", [115]], [[119931, 119931], "mapped", [116]], [[119932, 119932], "mapped", [117]], [[119933, 119933], "mapped", [118]], [[119934, 119934], "mapped", [119]], [[119935, 119935], "mapped", [120]], [[119936, 119936], "mapped", [121]], [[119937, 119937], "mapped", [122]], [[119938, 119938], "mapped", [97]], [[119939, 119939], "mapped", [98]], [[119940, 119940], "mapped", [99]], [[119941, 119941], "mapped", [100]], [[119942, 119942], "mapped", [101]], [[119943, 119943], "mapped", [102]], [[119944, 119944], "mapped", [103]], [[119945, 119945], "mapped", [104]], [[119946, 119946], "mapped", [105]], [[119947, 119947], "mapped", [106]], [[119948, 119948], "mapped", [107]], [[119949, 119949], "mapped", [108]], [[119950, 119950], "mapped", [109]], [[119951, 119951], "mapped", [110]], [[119952, 119952], "mapped", [111]], [[119953, 119953], "mapped", [112]], [[119954, 119954], "mapped", [113]], [[119955, 119955], "mapped", [114]], [[119956, 119956], "mapped", [115]], [[119957, 119957], "mapped", [116]], [[119958, 119958], "mapped", [117]], [[119959, 119959], "mapped", [118]], [[119960, 119960], "mapped", [119]], [[119961, 119961], "mapped", [120]], [[119962, 119962], "mapped", [121]], [[119963, 119963], "mapped", [122]], [[119964, 119964], "mapped", [97]], [[119965, 119965], "disallowed"], [[119966, 119966], "mapped", [99]], [[119967, 119967], "mapped", [100]], [[119968, 119969], "disallowed"], [[119970, 119970], "mapped", [103]], [[119971, 119972], "disallowed"], [[119973, 119973], "mapped", [106]], [[119974, 119974], "mapped", [107]], [[119975, 119976], "disallowed"], [[119977, 119977], "mapped", [110]], [[119978, 119978], "mapped", [111]], [[119979, 119979], "mapped", [112]], [[119980, 119980], "mapped", [113]], [[119981, 119981], "disallowed"], [[119982, 119982], "mapped", [115]], [[119983, 119983], "mapped", [116]], [[119984, 119984], "mapped", [117]], [[119985, 119985], "mapped", [118]], [[119986, 119986], "mapped", [119]], [[119987, 119987], "mapped", [120]], [[119988, 119988], "mapped", [121]], [[119989, 119989], "mapped", [122]], [[119990, 119990], "mapped", [97]], [[119991, 119991], "mapped", [98]], [[119992, 119992], "mapped", [99]], [[119993, 119993], "mapped", [100]], [[119994, 119994], "disallowed"], [[119995, 119995], "mapped", [102]], [[119996, 119996], "disallowed"], [[119997, 119997], "mapped", [104]], [[119998, 119998], "mapped", [105]], [[119999, 119999], "mapped", [106]], [[12e4, 12e4], "mapped", [107]], [[120001, 120001], "mapped", [108]], [[120002, 120002], "mapped", [109]], [[120003, 120003], "mapped", [110]], [[120004, 120004], "disallowed"], [[120005, 120005], "mapped", [112]], [[120006, 120006], "mapped", [113]], [[120007, 120007], "mapped", [114]], [[120008, 120008], "mapped", [115]], [[120009, 120009], "mapped", [116]], [[120010, 120010], "mapped", [117]], [[120011, 120011], "mapped", [118]], [[120012, 120012], "mapped", [119]], [[120013, 120013], "mapped", [120]], [[120014, 120014], "mapped", [121]], [[120015, 120015], "mapped", [122]], [[120016, 120016], "mapped", [97]], [[120017, 120017], "mapped", [98]], [[120018, 120018], "mapped", [99]], [[120019, 120019], "mapped", [100]], [[120020, 120020], "mapped", [101]], [[120021, 120021], "mapped", [102]], [[120022, 120022], "mapped", [103]], [[120023, 120023], "mapped", [104]], [[120024, 120024], "mapped", [105]], [[120025, 120025], "mapped", [106]], [[120026, 120026], "mapped", [107]], [[120027, 120027], "mapped", [108]], [[120028, 120028], "mapped", [109]], [[120029, 120029], "mapped", [110]], [[120030, 120030], "mapped", [111]], [[120031, 120031], "mapped", [112]], [[120032, 120032], "mapped", [113]], [[120033, 120033], "mapped", [114]], [[120034, 120034], "mapped", [115]], [[120035, 120035], "mapped", [116]], [[120036, 120036], "mapped", [117]], [[120037, 120037], "mapped", [118]], [[120038, 120038], "mapped", [119]], [[120039, 120039], "mapped", [120]], [[120040, 120040], "mapped", [121]], [[120041, 120041], "mapped", [122]], [[120042, 120042], "mapped", [97]], [[120043, 120043], "mapped", [98]], [[120044, 120044], "mapped", [99]], [[120045, 120045], "mapped", [100]], [[120046, 120046], "mapped", [101]], [[120047, 120047], "mapped", [102]], [[120048, 120048], "mapped", [103]], [[120049, 120049], "mapped", [104]], [[120050, 120050], "mapped", [105]], [[120051, 120051], "mapped", [106]], [[120052, 120052], "mapped", [107]], [[120053, 120053], "mapped", [108]], [[120054, 120054], "mapped", [109]], [[120055, 120055], "mapped", [110]], [[120056, 120056], "mapped", [111]], [[120057, 120057], "mapped", [112]], [[120058, 120058], "mapped", [113]], [[120059, 120059], "mapped", [114]], [[120060, 120060], "mapped", [115]], [[120061, 120061], "mapped", [116]], [[120062, 120062], "mapped", [117]], [[120063, 120063], "mapped", [118]], [[120064, 120064], "mapped", [119]], [[120065, 120065], "mapped", [120]], [[120066, 120066], "mapped", [121]], [[120067, 120067], "mapped", [122]], [[120068, 120068], "mapped", [97]], [[120069, 120069], "mapped", [98]], [[120070, 120070], "disallowed"], [[120071, 120071], "mapped", [100]], [[120072, 120072], "mapped", [101]], [[120073, 120073], "mapped", [102]], [[120074, 120074], "mapped", [103]], [[120075, 120076], "disallowed"], [[120077, 120077], "mapped", [106]], [[120078, 120078], "mapped", [107]], [[120079, 120079], "mapped", [108]], [[120080, 120080], "mapped", [109]], [[120081, 120081], "mapped", [110]], [[120082, 120082], "mapped", [111]], [[120083, 120083], "mapped", [112]], [[120084, 120084], "mapped", [113]], [[120085, 120085], "disallowed"], [[120086, 120086], "mapped", [115]], [[120087, 120087], "mapped", [116]], [[120088, 120088], "mapped", [117]], [[120089, 120089], "mapped", [118]], [[120090, 120090], "mapped", [119]], [[120091, 120091], "mapped", [120]], [[120092, 120092], "mapped", [121]], [[120093, 120093], "disallowed"], [[120094, 120094], "mapped", [97]], [[120095, 120095], "mapped", [98]], [[120096, 120096], "mapped", [99]], [[120097, 120097], "mapped", [100]], [[120098, 120098], "mapped", [101]], [[120099, 120099], "mapped", [102]], [[120100, 120100], "mapped", [103]], [[120101, 120101], "mapped", [104]], [[120102, 120102], "mapped", [105]], [[120103, 120103], "mapped", [106]], [[120104, 120104], "mapped", [107]], [[120105, 120105], "mapped", [108]], [[120106, 120106], "mapped", [109]], [[120107, 120107], "mapped", [110]], [[120108, 120108], "mapped", [111]], [[120109, 120109], "mapped", [112]], [[120110, 120110], "mapped", [113]], [[120111, 120111], "mapped", [114]], [[120112, 120112], "mapped", [115]], [[120113, 120113], "mapped", [116]], [[120114, 120114], "mapped", [117]], [[120115, 120115], "mapped", [118]], [[120116, 120116], "mapped", [119]], [[120117, 120117], "mapped", [120]], [[120118, 120118], "mapped", [121]], [[120119, 120119], "mapped", [122]], [[120120, 120120], "mapped", [97]], [[120121, 120121], "mapped", [98]], [[120122, 120122], "disallowed"], [[120123, 120123], "mapped", [100]], [[120124, 120124], "mapped", [101]], [[120125, 120125], "mapped", [102]], [[120126, 120126], "mapped", [103]], [[120127, 120127], "disallowed"], [[120128, 120128], "mapped", [105]], [[120129, 120129], "mapped", [106]], [[120130, 120130], "mapped", [107]], [[120131, 120131], "mapped", [108]], [[120132, 120132], "mapped", [109]], [[120133, 120133], "disallowed"], [[120134, 120134], "mapped", [111]], [[120135, 120137], "disallowed"], [[120138, 120138], "mapped", [115]], [[120139, 120139], "mapped", [116]], [[120140, 120140], "mapped", [117]], [[120141, 120141], "mapped", [118]], [[120142, 120142], "mapped", [119]], [[120143, 120143], "mapped", [120]], [[120144, 120144], "mapped", [121]], [[120145, 120145], "disallowed"], [[120146, 120146], "mapped", [97]], [[120147, 120147], "mapped", [98]], [[120148, 120148], "mapped", [99]], [[120149, 120149], "mapped", [100]], [[120150, 120150], "mapped", [101]], [[120151, 120151], "mapped", [102]], [[120152, 120152], "mapped", [103]], [[120153, 120153], "mapped", [104]], [[120154, 120154], "mapped", [105]], [[120155, 120155], "mapped", [106]], [[120156, 120156], "mapped", [107]], [[120157, 120157], "mapped", [108]], [[120158, 120158], "mapped", [109]], [[120159, 120159], "mapped", [110]], [[120160, 120160], "mapped", [111]], [[120161, 120161], "mapped", [112]], [[120162, 120162], "mapped", [113]], [[120163, 120163], "mapped", [114]], [[120164, 120164], "mapped", [115]], [[120165, 120165], "mapped", [116]], [[120166, 120166], "mapped", [117]], [[120167, 120167], "mapped", [118]], [[120168, 120168], "mapped", [119]], [[120169, 120169], "mapped", [120]], [[120170, 120170], "mapped", [121]], [[120171, 120171], "mapped", [122]], [[120172, 120172], "mapped", [97]], [[120173, 120173], "mapped", [98]], [[120174, 120174], "mapped", [99]], [[120175, 120175], "mapped", [100]], [[120176, 120176], "mapped", [101]], [[120177, 120177], "mapped", [102]], [[120178, 120178], "mapped", [103]], [[120179, 120179], "mapped", [104]], [[120180, 120180], "mapped", [105]], [[120181, 120181], "mapped", [106]], [[120182, 120182], "mapped", [107]], [[120183, 120183], "mapped", [108]], [[120184, 120184], "mapped", [109]], [[120185, 120185], "mapped", [110]], [[120186, 120186], "mapped", [111]], [[120187, 120187], "mapped", [112]], [[120188, 120188], "mapped", [113]], [[120189, 120189], "mapped", [114]], [[120190, 120190], "mapped", [115]], [[120191, 120191], "mapped", [116]], [[120192, 120192], "mapped", [117]], [[120193, 120193], "mapped", [118]], [[120194, 120194], "mapped", [119]], [[120195, 120195], "mapped", [120]], [[120196, 120196], "mapped", [121]], [[120197, 120197], "mapped", [122]], [[120198, 120198], "mapped", [97]], [[120199, 120199], "mapped", [98]], [[120200, 120200], "mapped", [99]], [[120201, 120201], "mapped", [100]], [[120202, 120202], "mapped", [101]], [[120203, 120203], "mapped", [102]], [[120204, 120204], "mapped", [103]], [[120205, 120205], "mapped", [104]], [[120206, 120206], "mapped", [105]], [[120207, 120207], "mapped", [106]], [[120208, 120208], "mapped", [107]], [[120209, 120209], "mapped", [108]], [[120210, 120210], "mapped", [109]], [[120211, 120211], "mapped", [110]], [[120212, 120212], "mapped", [111]], [[120213, 120213], "mapped", [112]], [[120214, 120214], "mapped", [113]], [[120215, 120215], "mapped", [114]], [[120216, 120216], "mapped", [115]], [[120217, 120217], "mapped", [116]], [[120218, 120218], "mapped", [117]], [[120219, 120219], "mapped", [118]], [[120220, 120220], "mapped", [119]], [[120221, 120221], "mapped", [120]], [[120222, 120222], "mapped", [121]], [[120223, 120223], "mapped", [122]], [[120224, 120224], "mapped", [97]], [[120225, 120225], "mapped", [98]], [[120226, 120226], "mapped", [99]], [[120227, 120227], "mapped", [100]], [[120228, 120228], "mapped", [101]], [[120229, 120229], "mapped", [102]], [[120230, 120230], "mapped", [103]], [[120231, 120231], "mapped", [104]], [[120232, 120232], "mapped", [105]], [[120233, 120233], "mapped", [106]], [[120234, 120234], "mapped", [107]], [[120235, 120235], "mapped", [108]], [[120236, 120236], "mapped", [109]], [[120237, 120237], "mapped", [110]], [[120238, 120238], "mapped", [111]], [[120239, 120239], "mapped", [112]], [[120240, 120240], "mapped", [113]], [[120241, 120241], "mapped", [114]], [[120242, 120242], "mapped", [115]], [[120243, 120243], "mapped", [116]], [[120244, 120244], "mapped", [117]], [[120245, 120245], "mapped", [118]], [[120246, 120246], "mapped", [119]], [[120247, 120247], "mapped", [120]], [[120248, 120248], "mapped", [121]], [[120249, 120249], "mapped", [122]], [[120250, 120250], "mapped", [97]], [[120251, 120251], "mapped", [98]], [[120252, 120252], "mapped", [99]], [[120253, 120253], "mapped", [100]], [[120254, 120254], "mapped", [101]], [[120255, 120255], "mapped", [102]], [[120256, 120256], "mapped", [103]], [[120257, 120257], "mapped", [104]], [[120258, 120258], "mapped", [105]], [[120259, 120259], "mapped", [106]], [[120260, 120260], "mapped", [107]], [[120261, 120261], "mapped", [108]], [[120262, 120262], "mapped", [109]], [[120263, 120263], "mapped", [110]], [[120264, 120264], "mapped", [111]], [[120265, 120265], "mapped", [112]], [[120266, 120266], "mapped", [113]], [[120267, 120267], "mapped", [114]], [[120268, 120268], "mapped", [115]], [[120269, 120269], "mapped", [116]], [[120270, 120270], "mapped", [117]], [[120271, 120271], "mapped", [118]], [[120272, 120272], "mapped", [119]], [[120273, 120273], "mapped", [120]], [[120274, 120274], "mapped", [121]], [[120275, 120275], "mapped", [122]], [[120276, 120276], "mapped", [97]], [[120277, 120277], "mapped", [98]], [[120278, 120278], "mapped", [99]], [[120279, 120279], "mapped", [100]], [[120280, 120280], "mapped", [101]], [[120281, 120281], "mapped", [102]], [[120282, 120282], "mapped", [103]], [[120283, 120283], "mapped", [104]], [[120284, 120284], "mapped", [105]], [[120285, 120285], "mapped", [106]], [[120286, 120286], "mapped", [107]], [[120287, 120287], "mapped", [108]], [[120288, 120288], "mapped", [109]], [[120289, 120289], "mapped", [110]], [[120290, 120290], "mapped", [111]], [[120291, 120291], "mapped", [112]], [[120292, 120292], "mapped", [113]], [[120293, 120293], "mapped", [114]], [[120294, 120294], "mapped", [115]], [[120295, 120295], "mapped", [116]], [[120296, 120296], "mapped", [117]], [[120297, 120297], "mapped", [118]], [[120298, 120298], "mapped", [119]], [[120299, 120299], "mapped", [120]], [[120300, 120300], "mapped", [121]], [[120301, 120301], "mapped", [122]], [[120302, 120302], "mapped", [97]], [[120303, 120303], "mapped", [98]], [[120304, 120304], "mapped", [99]], [[120305, 120305], "mapped", [100]], [[120306, 120306], "mapped", [101]], [[120307, 120307], "mapped", [102]], [[120308, 120308], "mapped", [103]], [[120309, 120309], "mapped", [104]], [[120310, 120310], "mapped", [105]], [[120311, 120311], "mapped", [106]], [[120312, 120312], "mapped", [107]], [[120313, 120313], "mapped", [108]], [[120314, 120314], "mapped", [109]], [[120315, 120315], "mapped", [110]], [[120316, 120316], "mapped", [111]], [[120317, 120317], "mapped", [112]], [[120318, 120318], "mapped", [113]], [[120319, 120319], "mapped", [114]], [[120320, 120320], "mapped", [115]], [[120321, 120321], "mapped", [116]], [[120322, 120322], "mapped", [117]], [[120323, 120323], "mapped", [118]], [[120324, 120324], "mapped", [119]], [[120325, 120325], "mapped", [120]], [[120326, 120326], "mapped", [121]], [[120327, 120327], "mapped", [122]], [[120328, 120328], "mapped", [97]], [[120329, 120329], "mapped", [98]], [[120330, 120330], "mapped", [99]], [[120331, 120331], "mapped", [100]], [[120332, 120332], "mapped", [101]], [[120333, 120333], "mapped", [102]], [[120334, 120334], "mapped", [103]], [[120335, 120335], "mapped", [104]], [[120336, 120336], "mapped", [105]], [[120337, 120337], "mapped", [106]], [[120338, 120338], "mapped", [107]], [[120339, 120339], "mapped", [108]], [[120340, 120340], "mapped", [109]], [[120341, 120341], "mapped", [110]], [[120342, 120342], "mapped", [111]], [[120343, 120343], "mapped", [112]], [[120344, 120344], "mapped", [113]], [[120345, 120345], "mapped", [114]], [[120346, 120346], "mapped", [115]], [[120347, 120347], "mapped", [116]], [[120348, 120348], "mapped", [117]], [[120349, 120349], "mapped", [118]], [[120350, 120350], "mapped", [119]], [[120351, 120351], "mapped", [120]], [[120352, 120352], "mapped", [121]], [[120353, 120353], "mapped", [122]], [[120354, 120354], "mapped", [97]], [[120355, 120355], "mapped", [98]], [[120356, 120356], "mapped", [99]], [[120357, 120357], "mapped", [100]], [[120358, 120358], "mapped", [101]], [[120359, 120359], "mapped", [102]], [[120360, 120360], "mapped", [103]], [[120361, 120361], "mapped", [104]], [[120362, 120362], "mapped", [105]], [[120363, 120363], "mapped", [106]], [[120364, 120364], "mapped", [107]], [[120365, 120365], "mapped", [108]], [[120366, 120366], "mapped", [109]], [[120367, 120367], "mapped", [110]], [[120368, 120368], "mapped", [111]], [[120369, 120369], "mapped", [112]], [[120370, 120370], "mapped", [113]], [[120371, 120371], "mapped", [114]], [[120372, 120372], "mapped", [115]], [[120373, 120373], "mapped", [116]], [[120374, 120374], "mapped", [117]], [[120375, 120375], "mapped", [118]], [[120376, 120376], "mapped", [119]], [[120377, 120377], "mapped", [120]], [[120378, 120378], "mapped", [121]], [[120379, 120379], "mapped", [122]], [[120380, 120380], "mapped", [97]], [[120381, 120381], "mapped", [98]], [[120382, 120382], "mapped", [99]], [[120383, 120383], "mapped", [100]], [[120384, 120384], "mapped", [101]], [[120385, 120385], "mapped", [102]], [[120386, 120386], "mapped", [103]], [[120387, 120387], "mapped", [104]], [[120388, 120388], "mapped", [105]], [[120389, 120389], "mapped", [106]], [[120390, 120390], "mapped", [107]], [[120391, 120391], "mapped", [108]], [[120392, 120392], "mapped", [109]], [[120393, 120393], "mapped", [110]], [[120394, 120394], "mapped", [111]], [[120395, 120395], "mapped", [112]], [[120396, 120396], "mapped", [113]], [[120397, 120397], "mapped", [114]], [[120398, 120398], "mapped", [115]], [[120399, 120399], "mapped", [116]], [[120400, 120400], "mapped", [117]], [[120401, 120401], "mapped", [118]], [[120402, 120402], "mapped", [119]], [[120403, 120403], "mapped", [120]], [[120404, 120404], "mapped", [121]], [[120405, 120405], "mapped", [122]], [[120406, 120406], "mapped", [97]], [[120407, 120407], "mapped", [98]], [[120408, 120408], "mapped", [99]], [[120409, 120409], "mapped", [100]], [[120410, 120410], "mapped", [101]], [[120411, 120411], "mapped", [102]], [[120412, 120412], "mapped", [103]], [[120413, 120413], "mapped", [104]], [[120414, 120414], "mapped", [105]], [[120415, 120415], "mapped", [106]], [[120416, 120416], "mapped", [107]], [[120417, 120417], "mapped", [108]], [[120418, 120418], "mapped", [109]], [[120419, 120419], "mapped", [110]], [[120420, 120420], "mapped", [111]], [[120421, 120421], "mapped", [112]], [[120422, 120422], "mapped", [113]], [[120423, 120423], "mapped", [114]], [[120424, 120424], "mapped", [115]], [[120425, 120425], "mapped", [116]], [[120426, 120426], "mapped", [117]], [[120427, 120427], "mapped", [118]], [[120428, 120428], "mapped", [119]], [[120429, 120429], "mapped", [120]], [[120430, 120430], "mapped", [121]], [[120431, 120431], "mapped", [122]], [[120432, 120432], "mapped", [97]], [[120433, 120433], "mapped", [98]], [[120434, 120434], "mapped", [99]], [[120435, 120435], "mapped", [100]], [[120436, 120436], "mapped", [101]], [[120437, 120437], "mapped", [102]], [[120438, 120438], "mapped", [103]], [[120439, 120439], "mapped", [104]], [[120440, 120440], "mapped", [105]], [[120441, 120441], "mapped", [106]], [[120442, 120442], "mapped", [107]], [[120443, 120443], "mapped", [108]], [[120444, 120444], "mapped", [109]], [[120445, 120445], "mapped", [110]], [[120446, 120446], "mapped", [111]], [[120447, 120447], "mapped", [112]], [[120448, 120448], "mapped", [113]], [[120449, 120449], "mapped", [114]], [[120450, 120450], "mapped", [115]], [[120451, 120451], "mapped", [116]], [[120452, 120452], "mapped", [117]], [[120453, 120453], "mapped", [118]], [[120454, 120454], "mapped", [119]], [[120455, 120455], "mapped", [120]], [[120456, 120456], "mapped", [121]], [[120457, 120457], "mapped", [122]], [[120458, 120458], "mapped", [97]], [[120459, 120459], "mapped", [98]], [[120460, 120460], "mapped", [99]], [[120461, 120461], "mapped", [100]], [[120462, 120462], "mapped", [101]], [[120463, 120463], "mapped", [102]], [[120464, 120464], "mapped", [103]], [[120465, 120465], "mapped", [104]], [[120466, 120466], "mapped", [105]], [[120467, 120467], "mapped", [106]], [[120468, 120468], "mapped", [107]], [[120469, 120469], "mapped", [108]], [[120470, 120470], "mapped", [109]], [[120471, 120471], "mapped", [110]], [[120472, 120472], "mapped", [111]], [[120473, 120473], "mapped", [112]], [[120474, 120474], "mapped", [113]], [[120475, 120475], "mapped", [114]], [[120476, 120476], "mapped", [115]], [[120477, 120477], "mapped", [116]], [[120478, 120478], "mapped", [117]], [[120479, 120479], "mapped", [118]], [[120480, 120480], "mapped", [119]], [[120481, 120481], "mapped", [120]], [[120482, 120482], "mapped", [121]], [[120483, 120483], "mapped", [122]], [[120484, 120484], "mapped", [305]], [[120485, 120485], "mapped", [567]], [[120486, 120487], "disallowed"], [[120488, 120488], "mapped", [945]], [[120489, 120489], "mapped", [946]], [[120490, 120490], "mapped", [947]], [[120491, 120491], "mapped", [948]], [[120492, 120492], "mapped", [949]], [[120493, 120493], "mapped", [950]], [[120494, 120494], "mapped", [951]], [[120495, 120495], "mapped", [952]], [[120496, 120496], "mapped", [953]], [[120497, 120497], "mapped", [954]], [[120498, 120498], "mapped", [955]], [[120499, 120499], "mapped", [956]], [[120500, 120500], "mapped", [957]], [[120501, 120501], "mapped", [958]], [[120502, 120502], "mapped", [959]], [[120503, 120503], "mapped", [960]], [[120504, 120504], "mapped", [961]], [[120505, 120505], "mapped", [952]], [[120506, 120506], "mapped", [963]], [[120507, 120507], "mapped", [964]], [[120508, 120508], "mapped", [965]], [[120509, 120509], "mapped", [966]], [[120510, 120510], "mapped", [967]], [[120511, 120511], "mapped", [968]], [[120512, 120512], "mapped", [969]], [[120513, 120513], "mapped", [8711]], [[120514, 120514], "mapped", [945]], [[120515, 120515], "mapped", [946]], [[120516, 120516], "mapped", [947]], [[120517, 120517], "mapped", [948]], [[120518, 120518], "mapped", [949]], [[120519, 120519], "mapped", [950]], [[120520, 120520], "mapped", [951]], [[120521, 120521], "mapped", [952]], [[120522, 120522], "mapped", [953]], [[120523, 120523], "mapped", [954]], [[120524, 120524], "mapped", [955]], [[120525, 120525], "mapped", [956]], [[120526, 120526], "mapped", [957]], [[120527, 120527], "mapped", [958]], [[120528, 120528], "mapped", [959]], [[120529, 120529], "mapped", [960]], [[120530, 120530], "mapped", [961]], [[120531, 120532], "mapped", [963]], [[120533, 120533], "mapped", [964]], [[120534, 120534], "mapped", [965]], [[120535, 120535], "mapped", [966]], [[120536, 120536], "mapped", [967]], [[120537, 120537], "mapped", [968]], [[120538, 120538], "mapped", [969]], [[120539, 120539], "mapped", [8706]], [[120540, 120540], "mapped", [949]], [[120541, 120541], "mapped", [952]], [[120542, 120542], "mapped", [954]], [[120543, 120543], "mapped", [966]], [[120544, 120544], "mapped", [961]], [[120545, 120545], "mapped", [960]], [[120546, 120546], "mapped", [945]], [[120547, 120547], "mapped", [946]], [[120548, 120548], "mapped", [947]], [[120549, 120549], "mapped", [948]], [[120550, 120550], "mapped", [949]], [[120551, 120551], "mapped", [950]], [[120552, 120552], "mapped", [951]], [[120553, 120553], "mapped", [952]], [[120554, 120554], "mapped", [953]], [[120555, 120555], "mapped", [954]], [[120556, 120556], "mapped", [955]], [[120557, 120557], "mapped", [956]], [[120558, 120558], "mapped", [957]], [[120559, 120559], "mapped", [958]], [[120560, 120560], "mapped", [959]], [[120561, 120561], "mapped", [960]], [[120562, 120562], "mapped", [961]], [[120563, 120563], "mapped", [952]], [[120564, 120564], "mapped", [963]], [[120565, 120565], "mapped", [964]], [[120566, 120566], "mapped", [965]], [[120567, 120567], "mapped", [966]], [[120568, 120568], "mapped", [967]], [[120569, 120569], "mapped", [968]], [[120570, 120570], "mapped", [969]], [[120571, 120571], "mapped", [8711]], [[120572, 120572], "mapped", [945]], [[120573, 120573], "mapped", [946]], [[120574, 120574], "mapped", [947]], [[120575, 120575], "mapped", [948]], [[120576, 120576], "mapped", [949]], [[120577, 120577], "mapped", [950]], [[120578, 120578], "mapped", [951]], [[120579, 120579], "mapped", [952]], [[120580, 120580], "mapped", [953]], [[120581, 120581], "mapped", [954]], [[120582, 120582], "mapped", [955]], [[120583, 120583], "mapped", [956]], [[120584, 120584], "mapped", [957]], [[120585, 120585], "mapped", [958]], [[120586, 120586], "mapped", [959]], [[120587, 120587], "mapped", [960]], [[120588, 120588], "mapped", [961]], [[120589, 120590], "mapped", [963]], [[120591, 120591], "mapped", [964]], [[120592, 120592], "mapped", [965]], [[120593, 120593], "mapped", [966]], [[120594, 120594], "mapped", [967]], [[120595, 120595], "mapped", [968]], [[120596, 120596], "mapped", [969]], [[120597, 120597], "mapped", [8706]], [[120598, 120598], "mapped", [949]], [[120599, 120599], "mapped", [952]], [[120600, 120600], "mapped", [954]], [[120601, 120601], "mapped", [966]], [[120602, 120602], "mapped", [961]], [[120603, 120603], "mapped", [960]], [[120604, 120604], "mapped", [945]], [[120605, 120605], "mapped", [946]], [[120606, 120606], "mapped", [947]], [[120607, 120607], "mapped", [948]], [[120608, 120608], "mapped", [949]], [[120609, 120609], "mapped", [950]], [[120610, 120610], "mapped", [951]], [[120611, 120611], "mapped", [952]], [[120612, 120612], "mapped", [953]], [[120613, 120613], "mapped", [954]], [[120614, 120614], "mapped", [955]], [[120615, 120615], "mapped", [956]], [[120616, 120616], "mapped", [957]], [[120617, 120617], "mapped", [958]], [[120618, 120618], "mapped", [959]], [[120619, 120619], "mapped", [960]], [[120620, 120620], "mapped", [961]], [[120621, 120621], "mapped", [952]], [[120622, 120622], "mapped", [963]], [[120623, 120623], "mapped", [964]], [[120624, 120624], "mapped", [965]], [[120625, 120625], "mapped", [966]], [[120626, 120626], "mapped", [967]], [[120627, 120627], "mapped", [968]], [[120628, 120628], "mapped", [969]], [[120629, 120629], "mapped", [8711]], [[120630, 120630], "mapped", [945]], [[120631, 120631], "mapped", [946]], [[120632, 120632], "mapped", [947]], [[120633, 120633], "mapped", [948]], [[120634, 120634], "mapped", [949]], [[120635, 120635], "mapped", [950]], [[120636, 120636], "mapped", [951]], [[120637, 120637], "mapped", [952]], [[120638, 120638], "mapped", [953]], [[120639, 120639], "mapped", [954]], [[120640, 120640], "mapped", [955]], [[120641, 120641], "mapped", [956]], [[120642, 120642], "mapped", [957]], [[120643, 120643], "mapped", [958]], [[120644, 120644], "mapped", [959]], [[120645, 120645], "mapped", [960]], [[120646, 120646], "mapped", [961]], [[120647, 120648], "mapped", [963]], [[120649, 120649], "mapped", [964]], [[120650, 120650], "mapped", [965]], [[120651, 120651], "mapped", [966]], [[120652, 120652], "mapped", [967]], [[120653, 120653], "mapped", [968]], [[120654, 120654], "mapped", [969]], [[120655, 120655], "mapped", [8706]], [[120656, 120656], "mapped", [949]], [[120657, 120657], "mapped", [952]], [[120658, 120658], "mapped", [954]], [[120659, 120659], "mapped", [966]], [[120660, 120660], "mapped", [961]], [[120661, 120661], "mapped", [960]], [[120662, 120662], "mapped", [945]], [[120663, 120663], "mapped", [946]], [[120664, 120664], "mapped", [947]], [[120665, 120665], "mapped", [948]], [[120666, 120666], "mapped", [949]], [[120667, 120667], "mapped", [950]], [[120668, 120668], "mapped", [951]], [[120669, 120669], "mapped", [952]], [[120670, 120670], "mapped", [953]], [[120671, 120671], "mapped", [954]], [[120672, 120672], "mapped", [955]], [[120673, 120673], "mapped", [956]], [[120674, 120674], "mapped", [957]], [[120675, 120675], "mapped", [958]], [[120676, 120676], "mapped", [959]], [[120677, 120677], "mapped", [960]], [[120678, 120678], "mapped", [961]], [[120679, 120679], "mapped", [952]], [[120680, 120680], "mapped", [963]], [[120681, 120681], "mapped", [964]], [[120682, 120682], "mapped", [965]], [[120683, 120683], "mapped", [966]], [[120684, 120684], "mapped", [967]], [[120685, 120685], "mapped", [968]], [[120686, 120686], "mapped", [969]], [[120687, 120687], "mapped", [8711]], [[120688, 120688], "mapped", [945]], [[120689, 120689], "mapped", [946]], [[120690, 120690], "mapped", [947]], [[120691, 120691], "mapped", [948]], [[120692, 120692], "mapped", [949]], [[120693, 120693], "mapped", [950]], [[120694, 120694], "mapped", [951]], [[120695, 120695], "mapped", [952]], [[120696, 120696], "mapped", [953]], [[120697, 120697], "mapped", [954]], [[120698, 120698], "mapped", [955]], [[120699, 120699], "mapped", [956]], [[120700, 120700], "mapped", [957]], [[120701, 120701], "mapped", [958]], [[120702, 120702], "mapped", [959]], [[120703, 120703], "mapped", [960]], [[120704, 120704], "mapped", [961]], [[120705, 120706], "mapped", [963]], [[120707, 120707], "mapped", [964]], [[120708, 120708], "mapped", [965]], [[120709, 120709], "mapped", [966]], [[120710, 120710], "mapped", [967]], [[120711, 120711], "mapped", [968]], [[120712, 120712], "mapped", [969]], [[120713, 120713], "mapped", [8706]], [[120714, 120714], "mapped", [949]], [[120715, 120715], "mapped", [952]], [[120716, 120716], "mapped", [954]], [[120717, 120717], "mapped", [966]], [[120718, 120718], "mapped", [961]], [[120719, 120719], "mapped", [960]], [[120720, 120720], "mapped", [945]], [[120721, 120721], "mapped", [946]], [[120722, 120722], "mapped", [947]], [[120723, 120723], "mapped", [948]], [[120724, 120724], "mapped", [949]], [[120725, 120725], "mapped", [950]], [[120726, 120726], "mapped", [951]], [[120727, 120727], "mapped", [952]], [[120728, 120728], "mapped", [953]], [[120729, 120729], "mapped", [954]], [[120730, 120730], "mapped", [955]], [[120731, 120731], "mapped", [956]], [[120732, 120732], "mapped", [957]], [[120733, 120733], "mapped", [958]], [[120734, 120734], "mapped", [959]], [[120735, 120735], "mapped", [960]], [[120736, 120736], "mapped", [961]], [[120737, 120737], "mapped", [952]], [[120738, 120738], "mapped", [963]], [[120739, 120739], "mapped", [964]], [[120740, 120740], "mapped", [965]], [[120741, 120741], "mapped", [966]], [[120742, 120742], "mapped", [967]], [[120743, 120743], "mapped", [968]], [[120744, 120744], "mapped", [969]], [[120745, 120745], "mapped", [8711]], [[120746, 120746], "mapped", [945]], [[120747, 120747], "mapped", [946]], [[120748, 120748], "mapped", [947]], [[120749, 120749], "mapped", [948]], [[120750, 120750], "mapped", [949]], [[120751, 120751], "mapped", [950]], [[120752, 120752], "mapped", [951]], [[120753, 120753], "mapped", [952]], [[120754, 120754], "mapped", [953]], [[120755, 120755], "mapped", [954]], [[120756, 120756], "mapped", [955]], [[120757, 120757], "mapped", [956]], [[120758, 120758], "mapped", [957]], [[120759, 120759], "mapped", [958]], [[120760, 120760], "mapped", [959]], [[120761, 120761], "mapped", [960]], [[120762, 120762], "mapped", [961]], [[120763, 120764], "mapped", [963]], [[120765, 120765], "mapped", [964]], [[120766, 120766], "mapped", [965]], [[120767, 120767], "mapped", [966]], [[120768, 120768], "mapped", [967]], [[120769, 120769], "mapped", [968]], [[120770, 120770], "mapped", [969]], [[120771, 120771], "mapped", [8706]], [[120772, 120772], "mapped", [949]], [[120773, 120773], "mapped", [952]], [[120774, 120774], "mapped", [954]], [[120775, 120775], "mapped", [966]], [[120776, 120776], "mapped", [961]], [[120777, 120777], "mapped", [960]], [[120778, 120779], "mapped", [989]], [[120780, 120781], "disallowed"], [[120782, 120782], "mapped", [48]], [[120783, 120783], "mapped", [49]], [[120784, 120784], "mapped", [50]], [[120785, 120785], "mapped", [51]], [[120786, 120786], "mapped", [52]], [[120787, 120787], "mapped", [53]], [[120788, 120788], "mapped", [54]], [[120789, 120789], "mapped", [55]], [[120790, 120790], "mapped", [56]], [[120791, 120791], "mapped", [57]], [[120792, 120792], "mapped", [48]], [[120793, 120793], "mapped", [49]], [[120794, 120794], "mapped", [50]], [[120795, 120795], "mapped", [51]], [[120796, 120796], "mapped", [52]], [[120797, 120797], "mapped", [53]], [[120798, 120798], "mapped", [54]], [[120799, 120799], "mapped", [55]], [[120800, 120800], "mapped", [56]], [[120801, 120801], "mapped", [57]], [[120802, 120802], "mapped", [48]], [[120803, 120803], "mapped", [49]], [[120804, 120804], "mapped", [50]], [[120805, 120805], "mapped", [51]], [[120806, 120806], "mapped", [52]], [[120807, 120807], "mapped", [53]], [[120808, 120808], "mapped", [54]], [[120809, 120809], "mapped", [55]], [[120810, 120810], "mapped", [56]], [[120811, 120811], "mapped", [57]], [[120812, 120812], "mapped", [48]], [[120813, 120813], "mapped", [49]], [[120814, 120814], "mapped", [50]], [[120815, 120815], "mapped", [51]], [[120816, 120816], "mapped", [52]], [[120817, 120817], "mapped", [53]], [[120818, 120818], "mapped", [54]], [[120819, 120819], "mapped", [55]], [[120820, 120820], "mapped", [56]], [[120821, 120821], "mapped", [57]], [[120822, 120822], "mapped", [48]], [[120823, 120823], "mapped", [49]], [[120824, 120824], "mapped", [50]], [[120825, 120825], "mapped", [51]], [[120826, 120826], "mapped", [52]], [[120827, 120827], "mapped", [53]], [[120828, 120828], "mapped", [54]], [[120829, 120829], "mapped", [55]], [[120830, 120830], "mapped", [56]], [[120831, 120831], "mapped", [57]], [[120832, 121343], "valid", [], "NV8"], [[121344, 121398], "valid"], [[121399, 121402], "valid", [], "NV8"], [[121403, 121452], "valid"], [[121453, 121460], "valid", [], "NV8"], [[121461, 121461], "valid"], [[121462, 121475], "valid", [], "NV8"], [[121476, 121476], "valid"], [[121477, 121483], "valid", [], "NV8"], [[121484, 121498], "disallowed"], [[121499, 121503], "valid"], [[121504, 121504], "disallowed"], [[121505, 121519], "valid"], [[121520, 124927], "disallowed"], [[124928, 125124], "valid"], [[125125, 125126], "disallowed"], [[125127, 125135], "valid", [], "NV8"], [[125136, 125142], "valid"], [[125143, 126463], "disallowed"], [[126464, 126464], "mapped", [1575]], [[126465, 126465], "mapped", [1576]], [[126466, 126466], "mapped", [1580]], [[126467, 126467], "mapped", [1583]], [[126468, 126468], "disallowed"], [[126469, 126469], "mapped", [1608]], [[126470, 126470], "mapped", [1586]], [[126471, 126471], "mapped", [1581]], [[126472, 126472], "mapped", [1591]], [[126473, 126473], "mapped", [1610]], [[126474, 126474], "mapped", [1603]], [[126475, 126475], "mapped", [1604]], [[126476, 126476], "mapped", [1605]], [[126477, 126477], "mapped", [1606]], [[126478, 126478], "mapped", [1587]], [[126479, 126479], "mapped", [1593]], [[126480, 126480], "mapped", [1601]], [[126481, 126481], "mapped", [1589]], [[126482, 126482], "mapped", [1602]], [[126483, 126483], "mapped", [1585]], [[126484, 126484], "mapped", [1588]], [[126485, 126485], "mapped", [1578]], [[126486, 126486], "mapped", [1579]], [[126487, 126487], "mapped", [1582]], [[126488, 126488], "mapped", [1584]], [[126489, 126489], "mapped", [1590]], [[126490, 126490], "mapped", [1592]], [[126491, 126491], "mapped", [1594]], [[126492, 126492], "mapped", [1646]], [[126493, 126493], "mapped", [1722]], [[126494, 126494], "mapped", [1697]], [[126495, 126495], "mapped", [1647]], [[126496, 126496], "disallowed"], [[126497, 126497], "mapped", [1576]], [[126498, 126498], "mapped", [1580]], [[126499, 126499], "disallowed"], [[126500, 126500], "mapped", [1607]], [[126501, 126502], "disallowed"], [[126503, 126503], "mapped", [1581]], [[126504, 126504], "disallowed"], [[126505, 126505], "mapped", [1610]], [[126506, 126506], "mapped", [1603]], [[126507, 126507], "mapped", [1604]], [[126508, 126508], "mapped", [1605]], [[126509, 126509], "mapped", [1606]], [[126510, 126510], "mapped", [1587]], [[126511, 126511], "mapped", [1593]], [[126512, 126512], "mapped", [1601]], [[126513, 126513], "mapped", [1589]], [[126514, 126514], "mapped", [1602]], [[126515, 126515], "disallowed"], [[126516, 126516], "mapped", [1588]], [[126517, 126517], "mapped", [1578]], [[126518, 126518], "mapped", [1579]], [[126519, 126519], "mapped", [1582]], [[126520, 126520], "disallowed"], [[126521, 126521], "mapped", [1590]], [[126522, 126522], "disallowed"], [[126523, 126523], "mapped", [1594]], [[126524, 126529], "disallowed"], [[126530, 126530], "mapped", [1580]], [[126531, 126534], "disallowed"], [[126535, 126535], "mapped", [1581]], [[126536, 126536], "disallowed"], [[126537, 126537], "mapped", [1610]], [[126538, 126538], "disallowed"], [[126539, 126539], "mapped", [1604]], [[126540, 126540], "disallowed"], [[126541, 126541], "mapped", [1606]], [[126542, 126542], "mapped", [1587]], [[126543, 126543], "mapped", [1593]], [[126544, 126544], "disallowed"], [[126545, 126545], "mapped", [1589]], [[126546, 126546], "mapped", [1602]], [[126547, 126547], "disallowed"], [[126548, 126548], "mapped", [1588]], [[126549, 126550], "disallowed"], [[126551, 126551], "mapped", [1582]], [[126552, 126552], "disallowed"], [[126553, 126553], "mapped", [1590]], [[126554, 126554], "disallowed"], [[126555, 126555], "mapped", [1594]], [[126556, 126556], "disallowed"], [[126557, 126557], "mapped", [1722]], [[126558, 126558], "disallowed"], [[126559, 126559], "mapped", [1647]], [[126560, 126560], "disallowed"], [[126561, 126561], "mapped", [1576]], [[126562, 126562], "mapped", [1580]], [[126563, 126563], "disallowed"], [[126564, 126564], "mapped", [1607]], [[126565, 126566], "disallowed"], [[126567, 126567], "mapped", [1581]], [[126568, 126568], "mapped", [1591]], [[126569, 126569], "mapped", [1610]], [[126570, 126570], "mapped", [1603]], [[126571, 126571], "disallowed"], [[126572, 126572], "mapped", [1605]], [[126573, 126573], "mapped", [1606]], [[126574, 126574], "mapped", [1587]], [[126575, 126575], "mapped", [1593]], [[126576, 126576], "mapped", [1601]], [[126577, 126577], "mapped", [1589]], [[126578, 126578], "mapped", [1602]], [[126579, 126579], "disallowed"], [[126580, 126580], "mapped", [1588]], [[126581, 126581], "mapped", [1578]], [[126582, 126582], "mapped", [1579]], [[126583, 126583], "mapped", [1582]], [[126584, 126584], "disallowed"], [[126585, 126585], "mapped", [1590]], [[126586, 126586], "mapped", [1592]], [[126587, 126587], "mapped", [1594]], [[126588, 126588], "mapped", [1646]], [[126589, 126589], "disallowed"], [[126590, 126590], "mapped", [1697]], [[126591, 126591], "disallowed"], [[126592, 126592], "mapped", [1575]], [[126593, 126593], "mapped", [1576]], [[126594, 126594], "mapped", [1580]], [[126595, 126595], "mapped", [1583]], [[126596, 126596], "mapped", [1607]], [[126597, 126597], "mapped", [1608]], [[126598, 126598], "mapped", [1586]], [[126599, 126599], "mapped", [1581]], [[126600, 126600], "mapped", [1591]], [[126601, 126601], "mapped", [1610]], [[126602, 126602], "disallowed"], [[126603, 126603], "mapped", [1604]], [[126604, 126604], "mapped", [1605]], [[126605, 126605], "mapped", [1606]], [[126606, 126606], "mapped", [1587]], [[126607, 126607], "mapped", [1593]], [[126608, 126608], "mapped", [1601]], [[126609, 126609], "mapped", [1589]], [[126610, 126610], "mapped", [1602]], [[126611, 126611], "mapped", [1585]], [[126612, 126612], "mapped", [1588]], [[126613, 126613], "mapped", [1578]], [[126614, 126614], "mapped", [1579]], [[126615, 126615], "mapped", [1582]], [[126616, 126616], "mapped", [1584]], [[126617, 126617], "mapped", [1590]], [[126618, 126618], "mapped", [1592]], [[126619, 126619], "mapped", [1594]], [[126620, 126624], "disallowed"], [[126625, 126625], "mapped", [1576]], [[126626, 126626], "mapped", [1580]], [[126627, 126627], "mapped", [1583]], [[126628, 126628], "disallowed"], [[126629, 126629], "mapped", [1608]], [[126630, 126630], "mapped", [1586]], [[126631, 126631], "mapped", [1581]], [[126632, 126632], "mapped", [1591]], [[126633, 126633], "mapped", [1610]], [[126634, 126634], "disallowed"], [[126635, 126635], "mapped", [1604]], [[126636, 126636], "mapped", [1605]], [[126637, 126637], "mapped", [1606]], [[126638, 126638], "mapped", [1587]], [[126639, 126639], "mapped", [1593]], [[126640, 126640], "mapped", [1601]], [[126641, 126641], "mapped", [1589]], [[126642, 126642], "mapped", [1602]], [[126643, 126643], "mapped", [1585]], [[126644, 126644], "mapped", [1588]], [[126645, 126645], "mapped", [1578]], [[126646, 126646], "mapped", [1579]], [[126647, 126647], "mapped", [1582]], [[126648, 126648], "mapped", [1584]], [[126649, 126649], "mapped", [1590]], [[126650, 126650], "mapped", [1592]], [[126651, 126651], "mapped", [1594]], [[126652, 126703], "disallowed"], [[126704, 126705], "valid", [], "NV8"], [[126706, 126975], "disallowed"], [[126976, 127019], "valid", [], "NV8"], [[127020, 127023], "disallowed"], [[127024, 127123], "valid", [], "NV8"], [[127124, 127135], "disallowed"], [[127136, 127150], "valid", [], "NV8"], [[127151, 127152], "disallowed"], [[127153, 127166], "valid", [], "NV8"], [[127167, 127167], "valid", [], "NV8"], [[127168, 127168], "disallowed"], [[127169, 127183], "valid", [], "NV8"], [[127184, 127184], "disallowed"], [[127185, 127199], "valid", [], "NV8"], [[127200, 127221], "valid", [], "NV8"], [[127222, 127231], "disallowed"], [[127232, 127232], "disallowed"], [[127233, 127233], "disallowed_STD3_mapped", [48, 44]], [[127234, 127234], "disallowed_STD3_mapped", [49, 44]], [[127235, 127235], "disallowed_STD3_mapped", [50, 44]], [[127236, 127236], "disallowed_STD3_mapped", [51, 44]], [[127237, 127237], "disallowed_STD3_mapped", [52, 44]], [[127238, 127238], "disallowed_STD3_mapped", [53, 44]], [[127239, 127239], "disallowed_STD3_mapped", [54, 44]], [[127240, 127240], "disallowed_STD3_mapped", [55, 44]], [[127241, 127241], "disallowed_STD3_mapped", [56, 44]], [[127242, 127242], "disallowed_STD3_mapped", [57, 44]], [[127243, 127244], "valid", [], "NV8"], [[127245, 127247], "disallowed"], [[127248, 127248], "disallowed_STD3_mapped", [40, 97, 41]], [[127249, 127249], "disallowed_STD3_mapped", [40, 98, 41]], [[127250, 127250], "disallowed_STD3_mapped", [40, 99, 41]], [[127251, 127251], "disallowed_STD3_mapped", [40, 100, 41]], [[127252, 127252], "disallowed_STD3_mapped", [40, 101, 41]], [[127253, 127253], "disallowed_STD3_mapped", [40, 102, 41]], [[127254, 127254], "disallowed_STD3_mapped", [40, 103, 41]], [[127255, 127255], "disallowed_STD3_mapped", [40, 104, 41]], [[127256, 127256], "disallowed_STD3_mapped", [40, 105, 41]], [[127257, 127257], "disallowed_STD3_mapped", [40, 106, 41]], [[127258, 127258], "disallowed_STD3_mapped", [40, 107, 41]], [[127259, 127259], "disallowed_STD3_mapped", [40, 108, 41]], [[127260, 127260], "disallowed_STD3_mapped", [40, 109, 41]], [[127261, 127261], "disallowed_STD3_mapped", [40, 110, 41]], [[127262, 127262], "disallowed_STD3_mapped", [40, 111, 41]], [[127263, 127263], "disallowed_STD3_mapped", [40, 112, 41]], [[127264, 127264], "disallowed_STD3_mapped", [40, 113, 41]], [[127265, 127265], "disallowed_STD3_mapped", [40, 114, 41]], [[127266, 127266], "disallowed_STD3_mapped", [40, 115, 41]], [[127267, 127267], "disallowed_STD3_mapped", [40, 116, 41]], [[127268, 127268], "disallowed_STD3_mapped", [40, 117, 41]], [[127269, 127269], "disallowed_STD3_mapped", [40, 118, 41]], [[127270, 127270], "disallowed_STD3_mapped", [40, 119, 41]], [[127271, 127271], "disallowed_STD3_mapped", [40, 120, 41]], [[127272, 127272], "disallowed_STD3_mapped", [40, 121, 41]], [[127273, 127273], "disallowed_STD3_mapped", [40, 122, 41]], [[127274, 127274], "mapped", [12308, 115, 12309]], [[127275, 127275], "mapped", [99]], [[127276, 127276], "mapped", [114]], [[127277, 127277], "mapped", [99, 100]], [[127278, 127278], "mapped", [119, 122]], [[127279, 127279], "disallowed"], [[127280, 127280], "mapped", [97]], [[127281, 127281], "mapped", [98]], [[127282, 127282], "mapped", [99]], [[127283, 127283], "mapped", [100]], [[127284, 127284], "mapped", [101]], [[127285, 127285], "mapped", [102]], [[127286, 127286], "mapped", [103]], [[127287, 127287], "mapped", [104]], [[127288, 127288], "mapped", [105]], [[127289, 127289], "mapped", [106]], [[127290, 127290], "mapped", [107]], [[127291, 127291], "mapped", [108]], [[127292, 127292], "mapped", [109]], [[127293, 127293], "mapped", [110]], [[127294, 127294], "mapped", [111]], [[127295, 127295], "mapped", [112]], [[127296, 127296], "mapped", [113]], [[127297, 127297], "mapped", [114]], [[127298, 127298], "mapped", [115]], [[127299, 127299], "mapped", [116]], [[127300, 127300], "mapped", [117]], [[127301, 127301], "mapped", [118]], [[127302, 127302], "mapped", [119]], [[127303, 127303], "mapped", [120]], [[127304, 127304], "mapped", [121]], [[127305, 127305], "mapped", [122]], [[127306, 127306], "mapped", [104, 118]], [[127307, 127307], "mapped", [109, 118]], [[127308, 127308], "mapped", [115, 100]], [[127309, 127309], "mapped", [115, 115]], [[127310, 127310], "mapped", [112, 112, 118]], [[127311, 127311], "mapped", [119, 99]], [[127312, 127318], "valid", [], "NV8"], [[127319, 127319], "valid", [], "NV8"], [[127320, 127326], "valid", [], "NV8"], [[127327, 127327], "valid", [], "NV8"], [[127328, 127337], "valid", [], "NV8"], [[127338, 127338], "mapped", [109, 99]], [[127339, 127339], "mapped", [109, 100]], [[127340, 127343], "disallowed"], [[127344, 127352], "valid", [], "NV8"], [[127353, 127353], "valid", [], "NV8"], [[127354, 127354], "valid", [], "NV8"], [[127355, 127356], "valid", [], "NV8"], [[127357, 127358], "valid", [], "NV8"], [[127359, 127359], "valid", [], "NV8"], [[127360, 127369], "valid", [], "NV8"], [[127370, 127373], "valid", [], "NV8"], [[127374, 127375], "valid", [], "NV8"], [[127376, 127376], "mapped", [100, 106]], [[127377, 127386], "valid", [], "NV8"], [[127387, 127461], "disallowed"], [[127462, 127487], "valid", [], "NV8"], [[127488, 127488], "mapped", [12411, 12363]], [[127489, 127489], "mapped", [12467, 12467]], [[127490, 127490], "mapped", [12469]], [[127491, 127503], "disallowed"], [[127504, 127504], "mapped", [25163]], [[127505, 127505], "mapped", [23383]], [[127506, 127506], "mapped", [21452]], [[127507, 127507], "mapped", [12487]], [[127508, 127508], "mapped", [20108]], [[127509, 127509], "mapped", [22810]], [[127510, 127510], "mapped", [35299]], [[127511, 127511], "mapped", [22825]], [[127512, 127512], "mapped", [20132]], [[127513, 127513], "mapped", [26144]], [[127514, 127514], "mapped", [28961]], [[127515, 127515], "mapped", [26009]], [[127516, 127516], "mapped", [21069]], [[127517, 127517], "mapped", [24460]], [[127518, 127518], "mapped", [20877]], [[127519, 127519], "mapped", [26032]], [[127520, 127520], "mapped", [21021]], [[127521, 127521], "mapped", [32066]], [[127522, 127522], "mapped", [29983]], [[127523, 127523], "mapped", [36009]], [[127524, 127524], "mapped", [22768]], [[127525, 127525], "mapped", [21561]], [[127526, 127526], "mapped", [28436]], [[127527, 127527], "mapped", [25237]], [[127528, 127528], "mapped", [25429]], [[127529, 127529], "mapped", [19968]], [[127530, 127530], "mapped", [19977]], [[127531, 127531], "mapped", [36938]], [[127532, 127532], "mapped", [24038]], [[127533, 127533], "mapped", [20013]], [[127534, 127534], "mapped", [21491]], [[127535, 127535], "mapped", [25351]], [[127536, 127536], "mapped", [36208]], [[127537, 127537], "mapped", [25171]], [[127538, 127538], "mapped", [31105]], [[127539, 127539], "mapped", [31354]], [[127540, 127540], "mapped", [21512]], [[127541, 127541], "mapped", [28288]], [[127542, 127542], "mapped", [26377]], [[127543, 127543], "mapped", [26376]], [[127544, 127544], "mapped", [30003]], [[127545, 127545], "mapped", [21106]], [[127546, 127546], "mapped", [21942]], [[127547, 127551], "disallowed"], [[127552, 127552], "mapped", [12308, 26412, 12309]], [[127553, 127553], "mapped", [12308, 19977, 12309]], [[127554, 127554], "mapped", [12308, 20108, 12309]], [[127555, 127555], "mapped", [12308, 23433, 12309]], [[127556, 127556], "mapped", [12308, 28857, 12309]], [[127557, 127557], "mapped", [12308, 25171, 12309]], [[127558, 127558], "mapped", [12308, 30423, 12309]], [[127559, 127559], "mapped", [12308, 21213, 12309]], [[127560, 127560], "mapped", [12308, 25943, 12309]], [[127561, 127567], "disallowed"], [[127568, 127568], "mapped", [24471]], [[127569, 127569], "mapped", [21487]], [[127570, 127743], "disallowed"], [[127744, 127776], "valid", [], "NV8"], [[127777, 127788], "valid", [], "NV8"], [[127789, 127791], "valid", [], "NV8"], [[127792, 127797], "valid", [], "NV8"], [[127798, 127798], "valid", [], "NV8"], [[127799, 127868], "valid", [], "NV8"], [[127869, 127869], "valid", [], "NV8"], [[127870, 127871], "valid", [], "NV8"], [[127872, 127891], "valid", [], "NV8"], [[127892, 127903], "valid", [], "NV8"], [[127904, 127940], "valid", [], "NV8"], [[127941, 127941], "valid", [], "NV8"], [[127942, 127946], "valid", [], "NV8"], [[127947, 127950], "valid", [], "NV8"], [[127951, 127955], "valid", [], "NV8"], [[127956, 127967], "valid", [], "NV8"], [[127968, 127984], "valid", [], "NV8"], [[127985, 127991], "valid", [], "NV8"], [[127992, 127999], "valid", [], "NV8"], [[128e3, 128062], "valid", [], "NV8"], [[128063, 128063], "valid", [], "NV8"], [[128064, 128064], "valid", [], "NV8"], [[128065, 128065], "valid", [], "NV8"], [[128066, 128247], "valid", [], "NV8"], [[128248, 128248], "valid", [], "NV8"], [[128249, 128252], "valid", [], "NV8"], [[128253, 128254], "valid", [], "NV8"], [[128255, 128255], "valid", [], "NV8"], [[128256, 128317], "valid", [], "NV8"], [[128318, 128319], "valid", [], "NV8"], [[128320, 128323], "valid", [], "NV8"], [[128324, 128330], "valid", [], "NV8"], [[128331, 128335], "valid", [], "NV8"], [[128336, 128359], "valid", [], "NV8"], [[128360, 128377], "valid", [], "NV8"], [[128378, 128378], "disallowed"], [[128379, 128419], "valid", [], "NV8"], [[128420, 128420], "disallowed"], [[128421, 128506], "valid", [], "NV8"], [[128507, 128511], "valid", [], "NV8"], [[128512, 128512], "valid", [], "NV8"], [[128513, 128528], "valid", [], "NV8"], [[128529, 128529], "valid", [], "NV8"], [[128530, 128532], "valid", [], "NV8"], [[128533, 128533], "valid", [], "NV8"], [[128534, 128534], "valid", [], "NV8"], [[128535, 128535], "valid", [], "NV8"], [[128536, 128536], "valid", [], "NV8"], [[128537, 128537], "valid", [], "NV8"], [[128538, 128538], "valid", [], "NV8"], [[128539, 128539], "valid", [], "NV8"], [[128540, 128542], "valid", [], "NV8"], [[128543, 128543], "valid", [], "NV8"], [[128544, 128549], "valid", [], "NV8"], [[128550, 128551], "valid", [], "NV8"], [[128552, 128555], "valid", [], "NV8"], [[128556, 128556], "valid", [], "NV8"], [[128557, 128557], "valid", [], "NV8"], [[128558, 128559], "valid", [], "NV8"], [[128560, 128563], "valid", [], "NV8"], [[128564, 128564], "valid", [], "NV8"], [[128565, 128576], "valid", [], "NV8"], [[128577, 128578], "valid", [], "NV8"], [[128579, 128580], "valid", [], "NV8"], [[128581, 128591], "valid", [], "NV8"], [[128592, 128639], "valid", [], "NV8"], [[128640, 128709], "valid", [], "NV8"], [[128710, 128719], "valid", [], "NV8"], [[128720, 128720], "valid", [], "NV8"], [[128721, 128735], "disallowed"], [[128736, 128748], "valid", [], "NV8"], [[128749, 128751], "disallowed"], [[128752, 128755], "valid", [], "NV8"], [[128756, 128767], "disallowed"], [[128768, 128883], "valid", [], "NV8"], [[128884, 128895], "disallowed"], [[128896, 128980], "valid", [], "NV8"], [[128981, 129023], "disallowed"], [[129024, 129035], "valid", [], "NV8"], [[129036, 129039], "disallowed"], [[129040, 129095], "valid", [], "NV8"], [[129096, 129103], "disallowed"], [[129104, 129113], "valid", [], "NV8"], [[129114, 129119], "disallowed"], [[129120, 129159], "valid", [], "NV8"], [[129160, 129167], "disallowed"], [[129168, 129197], "valid", [], "NV8"], [[129198, 129295], "disallowed"], [[129296, 129304], "valid", [], "NV8"], [[129305, 129407], "disallowed"], [[129408, 129412], "valid", [], "NV8"], [[129413, 129471], "disallowed"], [[129472, 129472], "valid", [], "NV8"], [[129473, 131069], "disallowed"], [[131070, 131071], "disallowed"], [[131072, 173782], "valid"], [[173783, 173823], "disallowed"], [[173824, 177972], "valid"], [[177973, 177983], "disallowed"], [[177984, 178205], "valid"], [[178206, 178207], "disallowed"], [[178208, 183969], "valid"], [[183970, 194559], "disallowed"], [[194560, 194560], "mapped", [20029]], [[194561, 194561], "mapped", [20024]], [[194562, 194562], "mapped", [20033]], [[194563, 194563], "mapped", [131362]], [[194564, 194564], "mapped", [20320]], [[194565, 194565], "mapped", [20398]], [[194566, 194566], "mapped", [20411]], [[194567, 194567], "mapped", [20482]], [[194568, 194568], "mapped", [20602]], [[194569, 194569], "mapped", [20633]], [[194570, 194570], "mapped", [20711]], [[194571, 194571], "mapped", [20687]], [[194572, 194572], "mapped", [13470]], [[194573, 194573], "mapped", [132666]], [[194574, 194574], "mapped", [20813]], [[194575, 194575], "mapped", [20820]], [[194576, 194576], "mapped", [20836]], [[194577, 194577], "mapped", [20855]], [[194578, 194578], "mapped", [132380]], [[194579, 194579], "mapped", [13497]], [[194580, 194580], "mapped", [20839]], [[194581, 194581], "mapped", [20877]], [[194582, 194582], "mapped", [132427]], [[194583, 194583], "mapped", [20887]], [[194584, 194584], "mapped", [20900]], [[194585, 194585], "mapped", [20172]], [[194586, 194586], "mapped", [20908]], [[194587, 194587], "mapped", [20917]], [[194588, 194588], "mapped", [168415]], [[194589, 194589], "mapped", [20981]], [[194590, 194590], "mapped", [20995]], [[194591, 194591], "mapped", [13535]], [[194592, 194592], "mapped", [21051]], [[194593, 194593], "mapped", [21062]], [[194594, 194594], "mapped", [21106]], [[194595, 194595], "mapped", [21111]], [[194596, 194596], "mapped", [13589]], [[194597, 194597], "mapped", [21191]], [[194598, 194598], "mapped", [21193]], [[194599, 194599], "mapped", [21220]], [[194600, 194600], "mapped", [21242]], [[194601, 194601], "mapped", [21253]], [[194602, 194602], "mapped", [21254]], [[194603, 194603], "mapped", [21271]], [[194604, 194604], "mapped", [21321]], [[194605, 194605], "mapped", [21329]], [[194606, 194606], "mapped", [21338]], [[194607, 194607], "mapped", [21363]], [[194608, 194608], "mapped", [21373]], [[194609, 194611], "mapped", [21375]], [[194612, 194612], "mapped", [133676]], [[194613, 194613], "mapped", [28784]], [[194614, 194614], "mapped", [21450]], [[194615, 194615], "mapped", [21471]], [[194616, 194616], "mapped", [133987]], [[194617, 194617], "mapped", [21483]], [[194618, 194618], "mapped", [21489]], [[194619, 194619], "mapped", [21510]], [[194620, 194620], "mapped", [21662]], [[194621, 194621], "mapped", [21560]], [[194622, 194622], "mapped", [21576]], [[194623, 194623], "mapped", [21608]], [[194624, 194624], "mapped", [21666]], [[194625, 194625], "mapped", [21750]], [[194626, 194626], "mapped", [21776]], [[194627, 194627], "mapped", [21843]], [[194628, 194628], "mapped", [21859]], [[194629, 194630], "mapped", [21892]], [[194631, 194631], "mapped", [21913]], [[194632, 194632], "mapped", [21931]], [[194633, 194633], "mapped", [21939]], [[194634, 194634], "mapped", [21954]], [[194635, 194635], "mapped", [22294]], [[194636, 194636], "mapped", [22022]], [[194637, 194637], "mapped", [22295]], [[194638, 194638], "mapped", [22097]], [[194639, 194639], "mapped", [22132]], [[194640, 194640], "mapped", [20999]], [[194641, 194641], "mapped", [22766]], [[194642, 194642], "mapped", [22478]], [[194643, 194643], "mapped", [22516]], [[194644, 194644], "mapped", [22541]], [[194645, 194645], "mapped", [22411]], [[194646, 194646], "mapped", [22578]], [[194647, 194647], "mapped", [22577]], [[194648, 194648], "mapped", [22700]], [[194649, 194649], "mapped", [136420]], [[194650, 194650], "mapped", [22770]], [[194651, 194651], "mapped", [22775]], [[194652, 194652], "mapped", [22790]], [[194653, 194653], "mapped", [22810]], [[194654, 194654], "mapped", [22818]], [[194655, 194655], "mapped", [22882]], [[194656, 194656], "mapped", [136872]], [[194657, 194657], "mapped", [136938]], [[194658, 194658], "mapped", [23020]], [[194659, 194659], "mapped", [23067]], [[194660, 194660], "mapped", [23079]], [[194661, 194661], "mapped", [23e3]], [[194662, 194662], "mapped", [23142]], [[194663, 194663], "mapped", [14062]], [[194664, 194664], "disallowed"], [[194665, 194665], "mapped", [23304]], [[194666, 194667], "mapped", [23358]], [[194668, 194668], "mapped", [137672]], [[194669, 194669], "mapped", [23491]], [[194670, 194670], "mapped", [23512]], [[194671, 194671], "mapped", [23527]], [[194672, 194672], "mapped", [23539]], [[194673, 194673], "mapped", [138008]], [[194674, 194674], "mapped", [23551]], [[194675, 194675], "mapped", [23558]], [[194676, 194676], "disallowed"], [[194677, 194677], "mapped", [23586]], [[194678, 194678], "mapped", [14209]], [[194679, 194679], "mapped", [23648]], [[194680, 194680], "mapped", [23662]], [[194681, 194681], "mapped", [23744]], [[194682, 194682], "mapped", [23693]], [[194683, 194683], "mapped", [138724]], [[194684, 194684], "mapped", [23875]], [[194685, 194685], "mapped", [138726]], [[194686, 194686], "mapped", [23918]], [[194687, 194687], "mapped", [23915]], [[194688, 194688], "mapped", [23932]], [[194689, 194689], "mapped", [24033]], [[194690, 194690], "mapped", [24034]], [[194691, 194691], "mapped", [14383]], [[194692, 194692], "mapped", [24061]], [[194693, 194693], "mapped", [24104]], [[194694, 194694], "mapped", [24125]], [[194695, 194695], "mapped", [24169]], [[194696, 194696], "mapped", [14434]], [[194697, 194697], "mapped", [139651]], [[194698, 194698], "mapped", [14460]], [[194699, 194699], "mapped", [24240]], [[194700, 194700], "mapped", [24243]], [[194701, 194701], "mapped", [24246]], [[194702, 194702], "mapped", [24266]], [[194703, 194703], "mapped", [172946]], [[194704, 194704], "mapped", [24318]], [[194705, 194706], "mapped", [140081]], [[194707, 194707], "mapped", [33281]], [[194708, 194709], "mapped", [24354]], [[194710, 194710], "mapped", [14535]], [[194711, 194711], "mapped", [144056]], [[194712, 194712], "mapped", [156122]], [[194713, 194713], "mapped", [24418]], [[194714, 194714], "mapped", [24427]], [[194715, 194715], "mapped", [14563]], [[194716, 194716], "mapped", [24474]], [[194717, 194717], "mapped", [24525]], [[194718, 194718], "mapped", [24535]], [[194719, 194719], "mapped", [24569]], [[194720, 194720], "mapped", [24705]], [[194721, 194721], "mapped", [14650]], [[194722, 194722], "mapped", [14620]], [[194723, 194723], "mapped", [24724]], [[194724, 194724], "mapped", [141012]], [[194725, 194725], "mapped", [24775]], [[194726, 194726], "mapped", [24904]], [[194727, 194727], "mapped", [24908]], [[194728, 194728], "mapped", [24910]], [[194729, 194729], "mapped", [24908]], [[194730, 194730], "mapped", [24954]], [[194731, 194731], "mapped", [24974]], [[194732, 194732], "mapped", [25010]], [[194733, 194733], "mapped", [24996]], [[194734, 194734], "mapped", [25007]], [[194735, 194735], "mapped", [25054]], [[194736, 194736], "mapped", [25074]], [[194737, 194737], "mapped", [25078]], [[194738, 194738], "mapped", [25104]], [[194739, 194739], "mapped", [25115]], [[194740, 194740], "mapped", [25181]], [[194741, 194741], "mapped", [25265]], [[194742, 194742], "mapped", [25300]], [[194743, 194743], "mapped", [25424]], [[194744, 194744], "mapped", [142092]], [[194745, 194745], "mapped", [25405]], [[194746, 194746], "mapped", [25340]], [[194747, 194747], "mapped", [25448]], [[194748, 194748], "mapped", [25475]], [[194749, 194749], "mapped", [25572]], [[194750, 194750], "mapped", [142321]], [[194751, 194751], "mapped", [25634]], [[194752, 194752], "mapped", [25541]], [[194753, 194753], "mapped", [25513]], [[194754, 194754], "mapped", [14894]], [[194755, 194755], "mapped", [25705]], [[194756, 194756], "mapped", [25726]], [[194757, 194757], "mapped", [25757]], [[194758, 194758], "mapped", [25719]], [[194759, 194759], "mapped", [14956]], [[194760, 194760], "mapped", [25935]], [[194761, 194761], "mapped", [25964]], [[194762, 194762], "mapped", [143370]], [[194763, 194763], "mapped", [26083]], [[194764, 194764], "mapped", [26360]], [[194765, 194765], "mapped", [26185]], [[194766, 194766], "mapped", [15129]], [[194767, 194767], "mapped", [26257]], [[194768, 194768], "mapped", [15112]], [[194769, 194769], "mapped", [15076]], [[194770, 194770], "mapped", [20882]], [[194771, 194771], "mapped", [20885]], [[194772, 194772], "mapped", [26368]], [[194773, 194773], "mapped", [26268]], [[194774, 194774], "mapped", [32941]], [[194775, 194775], "mapped", [17369]], [[194776, 194776], "mapped", [26391]], [[194777, 194777], "mapped", [26395]], [[194778, 194778], "mapped", [26401]], [[194779, 194779], "mapped", [26462]], [[194780, 194780], "mapped", [26451]], [[194781, 194781], "mapped", [144323]], [[194782, 194782], "mapped", [15177]], [[194783, 194783], "mapped", [26618]], [[194784, 194784], "mapped", [26501]], [[194785, 194785], "mapped", [26706]], [[194786, 194786], "mapped", [26757]], [[194787, 194787], "mapped", [144493]], [[194788, 194788], "mapped", [26766]], [[194789, 194789], "mapped", [26655]], [[194790, 194790], "mapped", [26900]], [[194791, 194791], "mapped", [15261]], [[194792, 194792], "mapped", [26946]], [[194793, 194793], "mapped", [27043]], [[194794, 194794], "mapped", [27114]], [[194795, 194795], "mapped", [27304]], [[194796, 194796], "mapped", [145059]], [[194797, 194797], "mapped", [27355]], [[194798, 194798], "mapped", [15384]], [[194799, 194799], "mapped", [27425]], [[194800, 194800], "mapped", [145575]], [[194801, 194801], "mapped", [27476]], [[194802, 194802], "mapped", [15438]], [[194803, 194803], "mapped", [27506]], [[194804, 194804], "mapped", [27551]], [[194805, 194805], "mapped", [27578]], [[194806, 194806], "mapped", [27579]], [[194807, 194807], "mapped", [146061]], [[194808, 194808], "mapped", [138507]], [[194809, 194809], "mapped", [146170]], [[194810, 194810], "mapped", [27726]], [[194811, 194811], "mapped", [146620]], [[194812, 194812], "mapped", [27839]], [[194813, 194813], "mapped", [27853]], [[194814, 194814], "mapped", [27751]], [[194815, 194815], "mapped", [27926]], [[194816, 194816], "mapped", [27966]], [[194817, 194817], "mapped", [28023]], [[194818, 194818], "mapped", [27969]], [[194819, 194819], "mapped", [28009]], [[194820, 194820], "mapped", [28024]], [[194821, 194821], "mapped", [28037]], [[194822, 194822], "mapped", [146718]], [[194823, 194823], "mapped", [27956]], [[194824, 194824], "mapped", [28207]], [[194825, 194825], "mapped", [28270]], [[194826, 194826], "mapped", [15667]], [[194827, 194827], "mapped", [28363]], [[194828, 194828], "mapped", [28359]], [[194829, 194829], "mapped", [147153]], [[194830, 194830], "mapped", [28153]], [[194831, 194831], "mapped", [28526]], [[194832, 194832], "mapped", [147294]], [[194833, 194833], "mapped", [147342]], [[194834, 194834], "mapped", [28614]], [[194835, 194835], "mapped", [28729]], [[194836, 194836], "mapped", [28702]], [[194837, 194837], "mapped", [28699]], [[194838, 194838], "mapped", [15766]], [[194839, 194839], "mapped", [28746]], [[194840, 194840], "mapped", [28797]], [[194841, 194841], "mapped", [28791]], [[194842, 194842], "mapped", [28845]], [[194843, 194843], "mapped", [132389]], [[194844, 194844], "mapped", [28997]], [[194845, 194845], "mapped", [148067]], [[194846, 194846], "mapped", [29084]], [[194847, 194847], "disallowed"], [[194848, 194848], "mapped", [29224]], [[194849, 194849], "mapped", [29237]], [[194850, 194850], "mapped", [29264]], [[194851, 194851], "mapped", [149e3]], [[194852, 194852], "mapped", [29312]], [[194853, 194853], "mapped", [29333]], [[194854, 194854], "mapped", [149301]], [[194855, 194855], "mapped", [149524]], [[194856, 194856], "mapped", [29562]], [[194857, 194857], "mapped", [29579]], [[194858, 194858], "mapped", [16044]], [[194859, 194859], "mapped", [29605]], [[194860, 194861], "mapped", [16056]], [[194862, 194862], "mapped", [29767]], [[194863, 194863], "mapped", [29788]], [[194864, 194864], "mapped", [29809]], [[194865, 194865], "mapped", [29829]], [[194866, 194866], "mapped", [29898]], [[194867, 194867], "mapped", [16155]], [[194868, 194868], "mapped", [29988]], [[194869, 194869], "mapped", [150582]], [[194870, 194870], "mapped", [30014]], [[194871, 194871], "mapped", [150674]], [[194872, 194872], "mapped", [30064]], [[194873, 194873], "mapped", [139679]], [[194874, 194874], "mapped", [30224]], [[194875, 194875], "mapped", [151457]], [[194876, 194876], "mapped", [151480]], [[194877, 194877], "mapped", [151620]], [[194878, 194878], "mapped", [16380]], [[194879, 194879], "mapped", [16392]], [[194880, 194880], "mapped", [30452]], [[194881, 194881], "mapped", [151795]], [[194882, 194882], "mapped", [151794]], [[194883, 194883], "mapped", [151833]], [[194884, 194884], "mapped", [151859]], [[194885, 194885], "mapped", [30494]], [[194886, 194887], "mapped", [30495]], [[194888, 194888], "mapped", [30538]], [[194889, 194889], "mapped", [16441]], [[194890, 194890], "mapped", [30603]], [[194891, 194891], "mapped", [16454]], [[194892, 194892], "mapped", [16534]], [[194893, 194893], "mapped", [152605]], [[194894, 194894], "mapped", [30798]], [[194895, 194895], "mapped", [30860]], [[194896, 194896], "mapped", [30924]], [[194897, 194897], "mapped", [16611]], [[194898, 194898], "mapped", [153126]], [[194899, 194899], "mapped", [31062]], [[194900, 194900], "mapped", [153242]], [[194901, 194901], "mapped", [153285]], [[194902, 194902], "mapped", [31119]], [[194903, 194903], "mapped", [31211]], [[194904, 194904], "mapped", [16687]], [[194905, 194905], "mapped", [31296]], [[194906, 194906], "mapped", [31306]], [[194907, 194907], "mapped", [31311]], [[194908, 194908], "mapped", [153980]], [[194909, 194910], "mapped", [154279]], [[194911, 194911], "disallowed"], [[194912, 194912], "mapped", [16898]], [[194913, 194913], "mapped", [154539]], [[194914, 194914], "mapped", [31686]], [[194915, 194915], "mapped", [31689]], [[194916, 194916], "mapped", [16935]], [[194917, 194917], "mapped", [154752]], [[194918, 194918], "mapped", [31954]], [[194919, 194919], "mapped", [17056]], [[194920, 194920], "mapped", [31976]], [[194921, 194921], "mapped", [31971]], [[194922, 194922], "mapped", [32e3]], [[194923, 194923], "mapped", [155526]], [[194924, 194924], "mapped", [32099]], [[194925, 194925], "mapped", [17153]], [[194926, 194926], "mapped", [32199]], [[194927, 194927], "mapped", [32258]], [[194928, 194928], "mapped", [32325]], [[194929, 194929], "mapped", [17204]], [[194930, 194930], "mapped", [156200]], [[194931, 194931], "mapped", [156231]], [[194932, 194932], "mapped", [17241]], [[194933, 194933], "mapped", [156377]], [[194934, 194934], "mapped", [32634]], [[194935, 194935], "mapped", [156478]], [[194936, 194936], "mapped", [32661]], [[194937, 194937], "mapped", [32762]], [[194938, 194938], "mapped", [32773]], [[194939, 194939], "mapped", [156890]], [[194940, 194940], "mapped", [156963]], [[194941, 194941], "mapped", [32864]], [[194942, 194942], "mapped", [157096]], [[194943, 194943], "mapped", [32880]], [[194944, 194944], "mapped", [144223]], [[194945, 194945], "mapped", [17365]], [[194946, 194946], "mapped", [32946]], [[194947, 194947], "mapped", [33027]], [[194948, 194948], "mapped", [17419]], [[194949, 194949], "mapped", [33086]], [[194950, 194950], "mapped", [23221]], [[194951, 194951], "mapped", [157607]], [[194952, 194952], "mapped", [157621]], [[194953, 194953], "mapped", [144275]], [[194954, 194954], "mapped", [144284]], [[194955, 194955], "mapped", [33281]], [[194956, 194956], "mapped", [33284]], [[194957, 194957], "mapped", [36766]], [[194958, 194958], "mapped", [17515]], [[194959, 194959], "mapped", [33425]], [[194960, 194960], "mapped", [33419]], [[194961, 194961], "mapped", [33437]], [[194962, 194962], "mapped", [21171]], [[194963, 194963], "mapped", [33457]], [[194964, 194964], "mapped", [33459]], [[194965, 194965], "mapped", [33469]], [[194966, 194966], "mapped", [33510]], [[194967, 194967], "mapped", [158524]], [[194968, 194968], "mapped", [33509]], [[194969, 194969], "mapped", [33565]], [[194970, 194970], "mapped", [33635]], [[194971, 194971], "mapped", [33709]], [[194972, 194972], "mapped", [33571]], [[194973, 194973], "mapped", [33725]], [[194974, 194974], "mapped", [33767]], [[194975, 194975], "mapped", [33879]], [[194976, 194976], "mapped", [33619]], [[194977, 194977], "mapped", [33738]], [[194978, 194978], "mapped", [33740]], [[194979, 194979], "mapped", [33756]], [[194980, 194980], "mapped", [158774]], [[194981, 194981], "mapped", [159083]], [[194982, 194982], "mapped", [158933]], [[194983, 194983], "mapped", [17707]], [[194984, 194984], "mapped", [34033]], [[194985, 194985], "mapped", [34035]], [[194986, 194986], "mapped", [34070]], [[194987, 194987], "mapped", [160714]], [[194988, 194988], "mapped", [34148]], [[194989, 194989], "mapped", [159532]], [[194990, 194990], "mapped", [17757]], [[194991, 194991], "mapped", [17761]], [[194992, 194992], "mapped", [159665]], [[194993, 194993], "mapped", [159954]], [[194994, 194994], "mapped", [17771]], [[194995, 194995], "mapped", [34384]], [[194996, 194996], "mapped", [34396]], [[194997, 194997], "mapped", [34407]], [[194998, 194998], "mapped", [34409]], [[194999, 194999], "mapped", [34473]], [[195e3, 195e3], "mapped", [34440]], [[195001, 195001], "mapped", [34574]], [[195002, 195002], "mapped", [34530]], [[195003, 195003], "mapped", [34681]], [[195004, 195004], "mapped", [34600]], [[195005, 195005], "mapped", [34667]], [[195006, 195006], "mapped", [34694]], [[195007, 195007], "disallowed"], [[195008, 195008], "mapped", [34785]], [[195009, 195009], "mapped", [34817]], [[195010, 195010], "mapped", [17913]], [[195011, 195011], "mapped", [34912]], [[195012, 195012], "mapped", [34915]], [[195013, 195013], "mapped", [161383]], [[195014, 195014], "mapped", [35031]], [[195015, 195015], "mapped", [35038]], [[195016, 195016], "mapped", [17973]], [[195017, 195017], "mapped", [35066]], [[195018, 195018], "mapped", [13499]], [[195019, 195019], "mapped", [161966]], [[195020, 195020], "mapped", [162150]], [[195021, 195021], "mapped", [18110]], [[195022, 195022], "mapped", [18119]], [[195023, 195023], "mapped", [35488]], [[195024, 195024], "mapped", [35565]], [[195025, 195025], "mapped", [35722]], [[195026, 195026], "mapped", [35925]], [[195027, 195027], "mapped", [162984]], [[195028, 195028], "mapped", [36011]], [[195029, 195029], "mapped", [36033]], [[195030, 195030], "mapped", [36123]], [[195031, 195031], "mapped", [36215]], [[195032, 195032], "mapped", [163631]], [[195033, 195033], "mapped", [133124]], [[195034, 195034], "mapped", [36299]], [[195035, 195035], "mapped", [36284]], [[195036, 195036], "mapped", [36336]], [[195037, 195037], "mapped", [133342]], [[195038, 195038], "mapped", [36564]], [[195039, 195039], "mapped", [36664]], [[195040, 195040], "mapped", [165330]], [[195041, 195041], "mapped", [165357]], [[195042, 195042], "mapped", [37012]], [[195043, 195043], "mapped", [37105]], [[195044, 195044], "mapped", [37137]], [[195045, 195045], "mapped", [165678]], [[195046, 195046], "mapped", [37147]], [[195047, 195047], "mapped", [37432]], [[195048, 195048], "mapped", [37591]], [[195049, 195049], "mapped", [37592]], [[195050, 195050], "mapped", [37500]], [[195051, 195051], "mapped", [37881]], [[195052, 195052], "mapped", [37909]], [[195053, 195053], "mapped", [166906]], [[195054, 195054], "mapped", [38283]], [[195055, 195055], "mapped", [18837]], [[195056, 195056], "mapped", [38327]], [[195057, 195057], "mapped", [167287]], [[195058, 195058], "mapped", [18918]], [[195059, 195059], "mapped", [38595]], [[195060, 195060], "mapped", [23986]], [[195061, 195061], "mapped", [38691]], [[195062, 195062], "mapped", [168261]], [[195063, 195063], "mapped", [168474]], [[195064, 195064], "mapped", [19054]], [[195065, 195065], "mapped", [19062]], [[195066, 195066], "mapped", [38880]], [[195067, 195067], "mapped", [168970]], [[195068, 195068], "mapped", [19122]], [[195069, 195069], "mapped", [169110]], [[195070, 195071], "mapped", [38923]], [[195072, 195072], "mapped", [38953]], [[195073, 195073], "mapped", [169398]], [[195074, 195074], "mapped", [39138]], [[195075, 195075], "mapped", [19251]], [[195076, 195076], "mapped", [39209]], [[195077, 195077], "mapped", [39335]], [[195078, 195078], "mapped", [39362]], [[195079, 195079], "mapped", [39422]], [[195080, 195080], "mapped", [19406]], [[195081, 195081], "mapped", [170800]], [[195082, 195082], "mapped", [39698]], [[195083, 195083], "mapped", [4e4]], [[195084, 195084], "mapped", [40189]], [[195085, 195085], "mapped", [19662]], [[195086, 195086], "mapped", [19693]], [[195087, 195087], "mapped", [40295]], [[195088, 195088], "mapped", [172238]], [[195089, 195089], "mapped", [19704]], [[195090, 195090], "mapped", [172293]], [[195091, 195091], "mapped", [172558]], [[195092, 195092], "mapped", [172689]], [[195093, 195093], "mapped", [40635]], [[195094, 195094], "mapped", [19798]], [[195095, 195095], "mapped", [40697]], [[195096, 195096], "mapped", [40702]], [[195097, 195097], "mapped", [40709]], [[195098, 195098], "mapped", [40719]], [[195099, 195099], "mapped", [40726]], [[195100, 195100], "mapped", [40763]], [[195101, 195101], "mapped", [173568]], [[195102, 196605], "disallowed"], [[196606, 196607], "disallowed"], [[196608, 262141], "disallowed"], [[262142, 262143], "disallowed"], [[262144, 327677], "disallowed"], [[327678, 327679], "disallowed"], [[327680, 393213], "disallowed"], [[393214, 393215], "disallowed"], [[393216, 458749], "disallowed"], [[458750, 458751], "disallowed"], [[458752, 524285], "disallowed"], [[524286, 524287], "disallowed"], [[524288, 589821], "disallowed"], [[589822, 589823], "disallowed"], [[589824, 655357], "disallowed"], [[655358, 655359], "disallowed"], [[655360, 720893], "disallowed"], [[720894, 720895], "disallowed"], [[720896, 786429], "disallowed"], [[786430, 786431], "disallowed"], [[786432, 851965], "disallowed"], [[851966, 851967], "disallowed"], [[851968, 917501], "disallowed"], [[917502, 917503], "disallowed"], [[917504, 917504], "disallowed"], [[917505, 917505], "disallowed"], [[917506, 917535], "disallowed"], [[917536, 917631], "disallowed"], [[917632, 917759], "disallowed"], [[917760, 917999], "ignored"], [[918e3, 983037], "disallowed"], [[983038, 983039], "disallowed"], [[983040, 1048573], "disallowed"], [[1048574, 1048575], "disallowed"], [[1048576, 1114109], "disallowed"], [[1114110, 1114111], "disallowed"]];
var Ow = { TRANSITIONAL: 0, NONTRANSITIONAL: 1 };
function Uw(e2) {
  return e2.split("\0").map(function(e3) {
    return e3.normalize("NFC");
  }).join("\0");
}
function xw(e2) {
  for (var i2 = 0, n2 = jw.length - 1; i2 <= n2; ) {
    var a2 = Math.floor((i2 + n2) / 2), t2 = jw[a2];
    if (t2[0][0] <= e2 && t2[0][1] >= e2)
      return t2;
    t2[0][0] > e2 ? n2 = a2 - 1 : i2 = a2 + 1;
  }
  return null;
}
var Bw = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
function Rw(e2) {
  return e2.replace(Bw, "_").length;
}
var Ew = /[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u192B\u1930-\u193B\u19B0-\u19C0\u19C8\u19C9\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2D]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDE2C-\uDE37\uDEDF-\uDEEA\uDF01-\uDF03\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDE30-\uDE40\uDEAB-\uDEB7]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD83A[\uDCD0-\uDCD6]|\uDB40[\uDD00-\uDDEF]/;
function Lw(e2, i2) {
  "xn--" === e2.substr(0, 4) && (e2 = Pw.toUnicode(e2));
  var n2 = false;
  (Uw(e2) !== e2 || "-" === e2[3] && "-" === e2[4] || "-" === e2[0] || "-" === e2[e2.length - 1] || -1 !== e2.indexOf(".") || 0 === e2.search(Ew)) && (n2 = true);
  for (var a2 = Rw(e2), t2 = 0; t2 < a2; ++t2) {
    var d2 = xw(e2.codePointAt(t2));
    if (zw === Ow.TRANSITIONAL && "valid" !== d2[1] || zw === Ow.NONTRANSITIONAL && "valid" !== d2[1] && "deviation" !== d2[1]) {
      n2 = true;
      break;
    }
  }
  return { label: e2, error: n2 };
}
function zw(e2, i2, n2) {
  var a2 = function(e3, i3, n3) {
    for (var a3 = false, t3 = "", d3 = Rw(e3), l3 = 0; l3 < d3; ++l3) {
      var r2 = e3.codePointAt(l3), m2 = xw(r2);
      switch (m2[1]) {
        case "disallowed":
          a3 = true, t3 += String.fromCodePoint(r2);
          break;
        case "ignored":
          break;
        case "mapped":
          t3 += String.fromCodePoint.apply(String, m2[2]);
          break;
        case "deviation":
          t3 += n3 === Ow.TRANSITIONAL ? String.fromCodePoint.apply(String, m2[2]) : String.fromCodePoint(r2);
          break;
        case "valid":
          t3 += String.fromCodePoint(r2);
          break;
        case "disallowed_STD3_mapped":
          i3 ? (a3 = true, t3 += String.fromCodePoint(r2)) : t3 += String.fromCodePoint.apply(String, m2[2]);
          break;
        case "disallowed_STD3_valid":
          i3 && (a3 = true), t3 += String.fromCodePoint(r2);
      }
    }
    return { string: t3, error: a3 };
  }(e2, i2, n2);
  a2.string = Uw(a2.string);
  for (var t2 = a2.string.split("."), d2 = 0; d2 < t2.length; ++d2)
    try {
      var l2 = Lw(t2[d2]);
      t2[d2] = l2.label, a2.error = a2.error || l2.error;
    } catch (e3) {
      a2.error = true;
    }
  return { string: t2.join("."), error: a2.error };
}
var Mw = { toASCII: function(e2, i2, n2, a2) {
  var t2 = zw(e2, i2, n2), d2 = t2.string.split(".");
  if (d2 = d2.map(function(e3) {
    try {
      return Pw.toASCII(e3);
    } catch (i3) {
      return t2.error = true, e3;
    }
  }), a2) {
    var l2 = d2.slice(0, d2.length - 1).join(".").length;
    (l2.length > 253 || 0 === l2.length) && (t2.error = true);
    for (var r2 = 0; r2 < d2.length; ++r2)
      if (d2.length > 63 || 0 === d2.length) {
        t2.error = true;
        break;
      }
  }
  return t2.error ? null : d2.join(".");
}, toUnicode: function(e2, i2) {
  var n2 = zw(e2, i2, Ow.NONTRANSITIONAL);
  return { domain: n2.string, error: n2.error };
}, PROCESSING_OPTIONS: Ow };
var Hw = uw(function(e2) {
  const i2 = { ftp: 21, file: null, gopher: 70, http: 80, https: 443, ws: 80, wss: 443 }, n2 = Symbol("failure");
  function a2(e3) {
    return Pw.ucs2.decode(e3).length;
  }
  function t2(e3, i3) {
    const n3 = e3[i3];
    return isNaN(n3) ? void 0 : String.fromCodePoint(n3);
  }
  function d2(e3) {
    return e3 >= 48 && e3 <= 57;
  }
  function l2(e3) {
    return e3 >= 65 && e3 <= 90 || e3 >= 97 && e3 <= 122;
  }
  function r2(e3) {
    return d2(e3) || e3 >= 65 && e3 <= 70 || e3 >= 97 && e3 <= 102;
  }
  function m2(e3) {
    return "." === e3 || "%2e" === e3.toLowerCase();
  }
  function o2(e3) {
    return 2 === e3.length && l2(e3.codePointAt(0)) && (":" === e3[1] || "|" === e3[1]);
  }
  function s2(e3) {
    return void 0 !== i2[e3];
  }
  function u2(e3) {
    return s2(e3.scheme);
  }
  function k2(e3) {
    let i3 = e3.toString(16).toUpperCase();
    return 1 === i3.length && (i3 = "0" + i3), "%" + i3;
  }
  function v2(e3) {
    return e3 <= 31 || e3 > 126;
  }
  const p2 = /* @__PURE__ */ new Set([32, 34, 35, 60, 62, 63, 96, 123, 125]);
  function c2(e3) {
    return v2(e3) || p2.has(e3);
  }
  const N2 = /* @__PURE__ */ new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);
  function h2(e3) {
    return c2(e3) || N2.has(e3);
  }
  function f2(e3, i3) {
    const n3 = String.fromCodePoint(e3);
    return i3(e3) ? function(e4) {
      const i4 = new Buffer(e4);
      let n4 = "";
      for (let e5 = 0; e5 < i4.length; ++e5)
        n4 += k2(i4[e5]);
      return n4;
    }(n3) : n3;
  }
  function b2(e3) {
    let i3 = 10;
    if (e3.length >= 2 && "0" === e3.charAt(0) && "x" === e3.charAt(1).toLowerCase() ? (e3 = e3.substring(2), i3 = 16) : e3.length >= 2 && "0" === e3.charAt(0) && (e3 = e3.substring(1), i3 = 8), "" === e3)
      return 0;
    return (10 === i3 ? /[^0-9]/ : 16 === i3 ? /[^0-9A-Fa-f]/ : /[^0-7]/).test(e3) ? n2 : parseInt(e3, i3);
  }
  function S2(e3, i3) {
    if ("[" === e3[0])
      return "]" !== e3[e3.length - 1] ? n2 : function(e4) {
        const i4 = [0, 0, 0, 0, 0, 0, 0, 0];
        let a4 = 0, l4 = null, m4 = 0;
        if (58 === (e4 = Pw.ucs2.decode(e4))[m4]) {
          if (58 !== e4[m4 + 1])
            return n2;
          m4 += 2, ++a4, l4 = a4;
        }
        for (; m4 < e4.length; ) {
          if (8 === a4)
            return n2;
          if (58 === e4[m4]) {
            if (null !== l4)
              return n2;
            ++m4, ++a4, l4 = a4;
            continue;
          }
          let o3 = 0, s3 = 0;
          for (; s3 < 4 && r2(e4[m4]); )
            o3 = 16 * o3 + parseInt(t2(e4, m4), 16), ++m4, ++s3;
          if (46 === e4[m4]) {
            if (0 === s3)
              return n2;
            if (m4 -= s3, a4 > 6)
              return n2;
            let l5 = 0;
            for (; void 0 !== e4[m4]; ) {
              let r3 = null;
              if (l5 > 0) {
                if (!(46 === e4[m4] && l5 < 4))
                  return n2;
                ++m4;
              }
              if (!d2(e4[m4]))
                return n2;
              for (; d2(e4[m4]); ) {
                const i5 = parseInt(t2(e4, m4));
                if (null === r3)
                  r3 = i5;
                else {
                  if (0 === r3)
                    return n2;
                  r3 = 10 * r3 + i5;
                }
                if (r3 > 255)
                  return n2;
                ++m4;
              }
              i4[a4] = 256 * i4[a4] + r3, ++l5, 2 !== l5 && 4 !== l5 || ++a4;
            }
            if (4 !== l5)
              return n2;
            break;
          }
          if (58 === e4[m4]) {
            if (++m4, void 0 === e4[m4])
              return n2;
          } else if (void 0 !== e4[m4])
            return n2;
          i4[a4] = o3, ++a4;
        }
        if (null !== l4) {
          let e5 = a4 - l4;
          for (a4 = 7; 0 !== a4 && e5 > 0; ) {
            const n3 = i4[l4 + e5 - 1];
            i4[l4 + e5 - 1] = i4[a4], i4[a4] = n3, --a4, --e5;
          }
        } else if (null === l4 && 8 !== a4)
          return n2;
        return i4;
      }(e3.substring(1, e3.length - 1));
    if (!i3)
      return function(e4) {
        if (i4 = e4, -1 !== i4.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|\?|@|\[|\\|\]/))
          return n2;
        var i4;
        let a4 = "";
        const t3 = Pw.ucs2.decode(e4);
        for (let e5 = 0; e5 < t3.length; ++e5)
          a4 += f2(t3[e5], v2);
        return a4;
      }(e3);
    const a3 = function(e4) {
      const i4 = new Buffer(e4), n3 = [];
      for (let e5 = 0; e5 < i4.length; ++e5)
        37 !== i4[e5] ? n3.push(i4[e5]) : 37 === i4[e5] && r2(i4[e5 + 1]) && r2(i4[e5 + 2]) ? (n3.push(parseInt(i4.slice(e5 + 1, e5 + 3).toString(), 16)), e5 += 2) : n3.push(i4[e5]);
      return new Buffer(n3).toString();
    }(e3), l3 = Mw.toASCII(a3, false, Mw.PROCESSING_OPTIONS.NONTRANSITIONAL, false);
    if (null === l3)
      return n2;
    if (-1 !== l3.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|%|\/|:|\?|@|\[|\\|\]/))
      return n2;
    const m3 = function(e4) {
      const i4 = e4.split(".");
      if ("" === i4[i4.length - 1] && i4.length > 1 && i4.pop(), i4.length > 4)
        return e4;
      const a4 = [];
      for (const t4 of i4) {
        if ("" === t4)
          return e4;
        const i5 = b2(t4);
        if (i5 === n2)
          return e4;
        a4.push(i5);
      }
      for (let e5 = 0; e5 < a4.length - 1; ++e5)
        if (a4[e5] > 255)
          return n2;
      if (a4[a4.length - 1] >= Math.pow(256, 5 - a4.length))
        return n2;
      let t3 = a4.pop(), d3 = 0;
      for (const e5 of a4)
        t3 += e5 * Math.pow(256, 3 - d3), ++d3;
      return t3;
    }(l3);
    return "number" == typeof m3 || m3 === n2 ? m3 : l3;
  }
  function y2(e3) {
    return "number" == typeof e3 ? function(e4) {
      let i3 = "", n3 = e4;
      for (let e5 = 1; e5 <= 4; ++e5)
        i3 = String(n3 % 256) + i3, 4 !== e5 && (i3 = "." + i3), n3 = Math.floor(n3 / 256);
      return i3;
    }(e3) : e3 instanceof Array ? "[" + function(e4) {
      let i3 = "";
      const n3 = function(e5) {
        let i4 = null, n4 = 1, a4 = null, t3 = 0;
        for (let d3 = 0; d3 < e5.length; ++d3)
          0 !== e5[d3] ? (t3 > n4 && (i4 = a4, n4 = t3), a4 = null, t3 = 0) : (null === a4 && (a4 = d3), ++t3);
        return t3 > n4 && (i4 = a4, n4 = t3), { idx: i4, len: n4 };
      }(e4).idx;
      let a3 = false;
      for (let t3 = 0; t3 <= 7; ++t3)
        a3 && 0 === e4[t3] || (a3 && (a3 = false), n3 !== t3 ? (i3 += e4[t3].toString(16), 7 !== t3 && (i3 += ":")) : (i3 += 0 === t3 ? "::" : ":", a3 = true));
      return i3;
    }(e3) + "]" : e3;
  }
  function g2(e3) {
    const i3 = e3.path;
    var n3;
    0 !== i3.length && ("file" === e3.scheme && 1 === i3.length && (n3 = i3[0], /^[A-Za-z]:$/.test(n3)) || i3.pop());
  }
  function D2(e3) {
    return "" !== e3.username || "" !== e3.password;
  }
  function V2(e3, i3, a3, t3, d3) {
    if (this.pointer = 0, this.input = e3, this.base = i3 || null, this.encodingOverride = a3 || "utf-8", this.stateOverride = d3, this.url = t3, this.failure = false, this.parseError = false, !this.url) {
      this.url = { scheme: "", username: "", password: "", host: null, port: null, path: [], query: null, fragment: null, cannotBeABaseURL: false };
      const e4 = function(e5) {
        return e5.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/g, "");
      }(this.input);
      e4 !== this.input && (this.parseError = true), this.input = e4;
    }
    const l3 = function(e4) {
      return e4.replace(/\u0009|\u000A|\u000D/g, "");
    }(this.input);
    for (l3 !== this.input && (this.parseError = true), this.input = l3, this.state = d3 || "scheme start", this.buffer = "", this.atFlag = false, this.arrFlag = false, this.passwordTokenSeenFlag = false, this.input = Pw.ucs2.decode(this.input); this.pointer <= this.input.length; ++this.pointer) {
      const e4 = this.input[this.pointer], i4 = isNaN(e4) ? void 0 : String.fromCodePoint(e4), a4 = this["parse " + this.state](e4, i4);
      if (!a4)
        break;
      if (a4 === n2) {
        this.failure = true;
        break;
      }
    }
  }
  V2.prototype["parse scheme start"] = function(e3, i3) {
    if (l2(e3))
      this.buffer += i3.toLowerCase(), this.state = "scheme";
    else {
      if (this.stateOverride)
        return this.parseError = true, n2;
      this.state = "no scheme", --this.pointer;
    }
    return true;
  }, V2.prototype["parse scheme"] = function(e3, i3) {
    if (function(e4) {
      return l2(e4) || d2(e4);
    }(e3) || 43 === e3 || 45 === e3 || 46 === e3)
      this.buffer += i3.toLowerCase();
    else if (58 === e3) {
      if (this.stateOverride) {
        if (u2(this.url) && !s2(this.buffer))
          return false;
        if (!u2(this.url) && s2(this.buffer))
          return false;
        if ((D2(this.url) || null !== this.url.port) && "file" === this.buffer)
          return false;
        if ("file" === this.url.scheme && ("" === this.url.host || null === this.url.host))
          return false;
      }
      if (this.url.scheme = this.buffer, this.buffer = "", this.stateOverride)
        return false;
      "file" === this.url.scheme ? (47 === this.input[this.pointer + 1] && 47 === this.input[this.pointer + 2] || (this.parseError = true), this.state = "file") : u2(this.url) && null !== this.base && this.base.scheme === this.url.scheme ? this.state = "special relative or authority" : u2(this.url) ? this.state = "special authority slashes" : 47 === this.input[this.pointer + 1] ? (this.state = "path or authority", ++this.pointer) : (this.url.cannotBeABaseURL = true, this.url.path.push(""), this.state = "cannot-be-a-base-URL path");
    } else {
      if (this.stateOverride)
        return this.parseError = true, n2;
      this.buffer = "", this.state = "no scheme", this.pointer = -1;
    }
    return true;
  }, V2.prototype["parse no scheme"] = function(e3) {
    return null === this.base || this.base.cannotBeABaseURL && 35 !== e3 ? n2 : (this.base.cannotBeABaseURL && 35 === e3 ? (this.url.scheme = this.base.scheme, this.url.path = this.base.path.slice(), this.url.query = this.base.query, this.url.fragment = "", this.url.cannotBeABaseURL = true, this.state = "fragment") : "file" === this.base.scheme ? (this.state = "file", --this.pointer) : (this.state = "relative", --this.pointer), true);
  }, V2.prototype["parse special relative or authority"] = function(e3) {
    return 47 === e3 && 47 === this.input[this.pointer + 1] ? (this.state = "special authority ignore slashes", ++this.pointer) : (this.parseError = true, this.state = "relative", --this.pointer), true;
  }, V2.prototype["parse path or authority"] = function(e3) {
    return 47 === e3 ? this.state = "authority" : (this.state = "path", --this.pointer), true;
  }, V2.prototype["parse relative"] = function(e3) {
    return this.url.scheme = this.base.scheme, isNaN(e3) ? (this.url.username = this.base.username, this.url.password = this.base.password, this.url.host = this.base.host, this.url.port = this.base.port, this.url.path = this.base.path.slice(), this.url.query = this.base.query) : 47 === e3 ? this.state = "relative slash" : 63 === e3 ? (this.url.username = this.base.username, this.url.password = this.base.password, this.url.host = this.base.host, this.url.port = this.base.port, this.url.path = this.base.path.slice(), this.url.query = "", this.state = "query") : 35 === e3 ? (this.url.username = this.base.username, this.url.password = this.base.password, this.url.host = this.base.host, this.url.port = this.base.port, this.url.path = this.base.path.slice(), this.url.query = this.base.query, this.url.fragment = "", this.state = "fragment") : u2(this.url) && 92 === e3 ? (this.parseError = true, this.state = "relative slash") : (this.url.username = this.base.username, this.url.password = this.base.password, this.url.host = this.base.host, this.url.port = this.base.port, this.url.path = this.base.path.slice(0, this.base.path.length - 1), this.state = "path", --this.pointer), true;
  }, V2.prototype["parse relative slash"] = function(e3) {
    return !u2(this.url) || 47 !== e3 && 92 !== e3 ? 47 === e3 ? this.state = "authority" : (this.url.username = this.base.username, this.url.password = this.base.password, this.url.host = this.base.host, this.url.port = this.base.port, this.state = "path", --this.pointer) : (92 === e3 && (this.parseError = true), this.state = "special authority ignore slashes"), true;
  }, V2.prototype["parse special authority slashes"] = function(e3) {
    return 47 === e3 && 47 === this.input[this.pointer + 1] ? (this.state = "special authority ignore slashes", ++this.pointer) : (this.parseError = true, this.state = "special authority ignore slashes", --this.pointer), true;
  }, V2.prototype["parse special authority ignore slashes"] = function(e3) {
    return 47 !== e3 && 92 !== e3 ? (this.state = "authority", --this.pointer) : this.parseError = true, true;
  }, V2.prototype["parse authority"] = function(e3, i3) {
    if (64 === e3) {
      this.parseError = true, this.atFlag && (this.buffer = "%40" + this.buffer), this.atFlag = true;
      const e4 = a2(this.buffer);
      for (let i4 = 0; i4 < e4; ++i4) {
        const e5 = this.buffer.codePointAt(i4);
        if (58 === e5 && !this.passwordTokenSeenFlag) {
          this.passwordTokenSeenFlag = true;
          continue;
        }
        const n3 = f2(e5, h2);
        this.passwordTokenSeenFlag ? this.url.password += n3 : this.url.username += n3;
      }
      this.buffer = "";
    } else if (isNaN(e3) || 47 === e3 || 63 === e3 || 35 === e3 || u2(this.url) && 92 === e3) {
      if (this.atFlag && "" === this.buffer)
        return this.parseError = true, n2;
      this.pointer -= a2(this.buffer) + 1, this.buffer = "", this.state = "host";
    } else
      this.buffer += i3;
    return true;
  }, V2.prototype["parse hostname"] = V2.prototype["parse host"] = function(e3, i3) {
    if (this.stateOverride && "file" === this.url.scheme)
      --this.pointer, this.state = "file host";
    else if (58 !== e3 || this.arrFlag)
      if (isNaN(e3) || 47 === e3 || 63 === e3 || 35 === e3 || u2(this.url) && 92 === e3) {
        if (--this.pointer, u2(this.url) && "" === this.buffer)
          return this.parseError = true, n2;
        if (this.stateOverride && "" === this.buffer && (D2(this.url) || null !== this.url.port))
          return this.parseError = true, false;
        const e4 = S2(this.buffer, u2(this.url));
        if (e4 === n2)
          return n2;
        if (this.url.host = e4, this.buffer = "", this.state = "path start", this.stateOverride)
          return false;
      } else
        91 === e3 ? this.arrFlag = true : 93 === e3 && (this.arrFlag = false), this.buffer += i3;
    else {
      if ("" === this.buffer)
        return this.parseError = true, n2;
      const e4 = S2(this.buffer, u2(this.url));
      if (e4 === n2)
        return n2;
      if (this.url.host = e4, this.buffer = "", this.state = "port", "hostname" === this.stateOverride)
        return false;
    }
    return true;
  }, V2.prototype["parse port"] = function(e3, a3) {
    if (d2(e3))
      this.buffer += a3;
    else {
      if (!(isNaN(e3) || 47 === e3 || 63 === e3 || 35 === e3 || u2(this.url) && 92 === e3 || this.stateOverride))
        return this.parseError = true, n2;
      if ("" !== this.buffer) {
        const e4 = parseInt(this.buffer);
        if (e4 > Math.pow(2, 16) - 1)
          return this.parseError = true, n2;
        this.url.port = e4 === (t3 = this.url.scheme, i2[t3]) ? null : e4, this.buffer = "";
      }
      if (this.stateOverride)
        return false;
      this.state = "path start", --this.pointer;
    }
    var t3;
    return true;
  };
  const _2 = /* @__PURE__ */ new Set([47, 92, 63, 35]);
  V2.prototype["parse file"] = function(e3) {
    var i3, n3;
    return this.url.scheme = "file", 47 === e3 || 92 === e3 ? (92 === e3 && (this.parseError = true), this.state = "file slash") : null !== this.base && "file" === this.base.scheme ? isNaN(e3) ? (this.url.host = this.base.host, this.url.path = this.base.path.slice(), this.url.query = this.base.query) : 63 === e3 ? (this.url.host = this.base.host, this.url.path = this.base.path.slice(), this.url.query = "", this.state = "query") : 35 === e3 ? (this.url.host = this.base.host, this.url.path = this.base.path.slice(), this.url.query = this.base.query, this.url.fragment = "", this.state = "fragment") : (this.input.length - this.pointer - 1 == 0 || (i3 = e3, n3 = this.input[this.pointer + 1], !l2(i3) || 58 !== n3 && 124 !== n3) || this.input.length - this.pointer - 1 >= 2 && !_2.has(this.input[this.pointer + 2]) ? (this.url.host = this.base.host, this.url.path = this.base.path.slice(), g2(this.url)) : this.parseError = true, this.state = "path", --this.pointer) : (this.state = "path", --this.pointer), true;
  }, V2.prototype["parse file slash"] = function(e3) {
    var i3;
    return 47 === e3 || 92 === e3 ? (92 === e3 && (this.parseError = true), this.state = "file host") : (null !== this.base && "file" === this.base.scheme && (2 === (i3 = this.base.path[0]).length && l2(i3.codePointAt(0)) && ":" === i3[1] ? this.url.path.push(this.base.path[0]) : this.url.host = this.base.host), this.state = "path", --this.pointer), true;
  }, V2.prototype["parse file host"] = function(e3, i3) {
    if (isNaN(e3) || 47 === e3 || 92 === e3 || 63 === e3 || 35 === e3)
      if (--this.pointer, !this.stateOverride && o2(this.buffer))
        this.parseError = true, this.state = "path";
      else if ("" === this.buffer) {
        if (this.url.host = "", this.stateOverride)
          return false;
        this.state = "path start";
      } else {
        let e4 = S2(this.buffer, u2(this.url));
        if (e4 === n2)
          return n2;
        if ("localhost" === e4 && (e4 = ""), this.url.host = e4, this.stateOverride)
          return false;
        this.buffer = "", this.state = "path start";
      }
    else
      this.buffer += i3;
    return true;
  }, V2.prototype["parse path start"] = function(e3) {
    return u2(this.url) ? (92 === e3 && (this.parseError = true), this.state = "path", 47 !== e3 && 92 !== e3 && --this.pointer) : this.stateOverride || 63 !== e3 ? this.stateOverride || 35 !== e3 ? void 0 !== e3 && (this.state = "path", 47 !== e3 && --this.pointer) : (this.url.fragment = "", this.state = "fragment") : (this.url.query = "", this.state = "query"), true;
  }, V2.prototype["parse path"] = function(e3) {
    if (isNaN(e3) || 47 === e3 || u2(this.url) && 92 === e3 || !this.stateOverride && (63 === e3 || 35 === e3)) {
      if (u2(this.url) && 92 === e3 && (this.parseError = true), ".." === (i3 = (i3 = this.buffer).toLowerCase()) || "%2e." === i3 || ".%2e" === i3 || "%2e%2e" === i3 ? (g2(this.url), 47 === e3 || u2(this.url) && 92 === e3 || this.url.path.push("")) : !m2(this.buffer) || 47 === e3 || u2(this.url) && 92 === e3 ? m2(this.buffer) || ("file" === this.url.scheme && 0 === this.url.path.length && o2(this.buffer) && ("" !== this.url.host && null !== this.url.host && (this.parseError = true, this.url.host = ""), this.buffer = this.buffer[0] + ":"), this.url.path.push(this.buffer)) : this.url.path.push(""), this.buffer = "", "file" === this.url.scheme && (void 0 === e3 || 63 === e3 || 35 === e3))
        for (; this.url.path.length > 1 && "" === this.url.path[0]; )
          this.parseError = true, this.url.path.shift();
      63 === e3 && (this.url.query = "", this.state = "query"), 35 === e3 && (this.url.fragment = "", this.state = "fragment");
    } else
      37 !== e3 || r2(this.input[this.pointer + 1]) && r2(this.input[this.pointer + 2]) || (this.parseError = true), this.buffer += f2(e3, c2);
    var i3;
    return true;
  }, V2.prototype["parse cannot-be-a-base-URL path"] = function(e3) {
    return 63 === e3 ? (this.url.query = "", this.state = "query") : 35 === e3 ? (this.url.fragment = "", this.state = "fragment") : (isNaN(e3) || 37 === e3 || (this.parseError = true), 37 !== e3 || r2(this.input[this.pointer + 1]) && r2(this.input[this.pointer + 2]) || (this.parseError = true), isNaN(e3) || (this.url.path[0] = this.url.path[0] + f2(e3, v2))), true;
  }, V2.prototype["parse query"] = function(e3, i3) {
    if (isNaN(e3) || !this.stateOverride && 35 === e3) {
      u2(this.url) && "ws" !== this.url.scheme && "wss" !== this.url.scheme || (this.encodingOverride = "utf-8");
      const i4 = new Buffer(this.buffer);
      for (let e4 = 0; e4 < i4.length; ++e4)
        i4[e4] < 33 || i4[e4] > 126 || 34 === i4[e4] || 35 === i4[e4] || 60 === i4[e4] || 62 === i4[e4] ? this.url.query += k2(i4[e4]) : this.url.query += String.fromCodePoint(i4[e4]);
      this.buffer = "", 35 === e3 && (this.url.fragment = "", this.state = "fragment");
    } else
      37 !== e3 || r2(this.input[this.pointer + 1]) && r2(this.input[this.pointer + 2]) || (this.parseError = true), this.buffer += i3;
    return true;
  }, V2.prototype["parse fragment"] = function(e3) {
    return isNaN(e3) || (0 === e3 ? this.parseError = true : (37 !== e3 || r2(this.input[this.pointer + 1]) && r2(this.input[this.pointer + 2]) || (this.parseError = true), this.url.fragment += f2(e3, v2))), true;
  }, e2.exports.serializeURL = function(e3, i3) {
    let n3 = e3.scheme + ":";
    if (null !== e3.host ? (n3 += "//", "" === e3.username && "" === e3.password || (n3 += e3.username, "" !== e3.password && (n3 += ":" + e3.password), n3 += "@"), n3 += y2(e3.host), null !== e3.port && (n3 += ":" + e3.port)) : null === e3.host && "file" === e3.scheme && (n3 += "//"), e3.cannotBeABaseURL)
      n3 += e3.path[0];
    else
      for (const i4 of e3.path)
        n3 += "/" + i4;
    return null !== e3.query && (n3 += "?" + e3.query), i3 || null === e3.fragment || (n3 += "#" + e3.fragment), n3;
  }, e2.exports.serializeURLOrigin = function(i3) {
    switch (i3.scheme) {
      case "blob":
        try {
          return e2.exports.serializeURLOrigin(e2.exports.parseURL(i3.path[0]));
        } catch (e3) {
          return "null";
        }
      case "ftp":
      case "gopher":
      case "http":
      case "https":
      case "ws":
      case "wss":
        return function(e3) {
          let i4 = e3.scheme + "://";
          return i4 += y2(e3.host), null !== e3.port && (i4 += ":" + e3.port), i4;
        }({ scheme: i3.scheme, host: i3.host, port: i3.port });
      case "file":
        return "file://";
      default:
        return "null";
    }
  }, e2.exports.basicURLParse = function(e3, i3) {
    void 0 === i3 && (i3 = {});
    const n3 = new V2(e3, i3.baseURL, i3.encodingOverride, i3.url, i3.stateOverride);
    return n3.failure ? "failure" : n3.url;
  }, e2.exports.setTheUsername = function(e3, i3) {
    e3.username = "";
    const n3 = Pw.ucs2.decode(i3);
    for (let i4 = 0; i4 < n3.length; ++i4)
      e3.username += f2(n3[i4], h2);
  }, e2.exports.setThePassword = function(e3, i3) {
    e3.password = "";
    const n3 = Pw.ucs2.decode(i3);
    for (let i4 = 0; i4 < n3.length; ++i4)
      e3.password += f2(n3[i4], h2);
  }, e2.exports.serializeHost = y2, e2.exports.cannotHaveAUsernamePasswordPort = function(e3) {
    return null === e3.host || "" === e3.host || e3.cannotBeABaseURL || "file" === e3.scheme;
  }, e2.exports.serializeInteger = function(e3) {
    return String(e3);
  }, e2.exports.parseURL = function(i3, n3) {
    return void 0 === n3 && (n3 = {}), e2.exports.basicURLParse(i3, { baseURL: n3.baseURL, encodingOverride: n3.encodingOverride });
  };
});
var Ww = class {
  constructor(e2) {
    const i2 = e2[0], n2 = e2[1];
    let a2 = null;
    if (void 0 !== n2 && (a2 = Hw.basicURLParse(n2), "failure" === a2))
      throw new TypeError("Invalid base URL");
    const t2 = Hw.basicURLParse(i2, { baseURL: a2 });
    if ("failure" === t2)
      throw new TypeError("Invalid URL");
    this._url = t2;
  }
  get href() {
    return Hw.serializeURL(this._url);
  }
  set href(e2) {
    const i2 = Hw.basicURLParse(e2);
    if ("failure" === i2)
      throw new TypeError("Invalid URL");
    this._url = i2;
  }
  get origin() {
    return Hw.serializeURLOrigin(this._url);
  }
  get protocol() {
    return this._url.scheme + ":";
  }
  set protocol(e2) {
    Hw.basicURLParse(e2 + ":", { url: this._url, stateOverride: "scheme start" });
  }
  get username() {
    return this._url.username;
  }
  set username(e2) {
    Hw.cannotHaveAUsernamePasswordPort(this._url) || Hw.setTheUsername(this._url, e2);
  }
  get password() {
    return this._url.password;
  }
  set password(e2) {
    Hw.cannotHaveAUsernamePasswordPort(this._url) || Hw.setThePassword(this._url, e2);
  }
  get host() {
    const e2 = this._url;
    return null === e2.host ? "" : null === e2.port ? Hw.serializeHost(e2.host) : Hw.serializeHost(e2.host) + ":" + Hw.serializeInteger(e2.port);
  }
  set host(e2) {
    this._url.cannotBeABaseURL || Hw.basicURLParse(e2, { url: this._url, stateOverride: "host" });
  }
  get hostname() {
    return null === this._url.host ? "" : Hw.serializeHost(this._url.host);
  }
  set hostname(e2) {
    this._url.cannotBeABaseURL || Hw.basicURLParse(e2, { url: this._url, stateOverride: "hostname" });
  }
  get port() {
    return null === this._url.port ? "" : Hw.serializeInteger(this._url.port);
  }
  set port(e2) {
    Hw.cannotHaveAUsernamePasswordPort(this._url) || ("" === e2 ? this._url.port = null : Hw.basicURLParse(e2, { url: this._url, stateOverride: "port" }));
  }
  get pathname() {
    return this._url.cannotBeABaseURL ? this._url.path[0] : 0 === this._url.path.length ? "" : "/" + this._url.path.join("/");
  }
  set pathname(e2) {
    this._url.cannotBeABaseURL || (this._url.path = [], Hw.basicURLParse(e2, { url: this._url, stateOverride: "path start" }));
  }
  get search() {
    return null === this._url.query || "" === this._url.query ? "" : "?" + this._url.query;
  }
  set search(e2) {
    const i2 = this._url;
    if ("" === e2)
      return void (i2.query = null);
    const n2 = "?" === e2[0] ? e2.substring(1) : e2;
    i2.query = "", Hw.basicURLParse(n2, { url: i2, stateOverride: "query" });
  }
  get hash() {
    return null === this._url.fragment || "" === this._url.fragment ? "" : "#" + this._url.fragment;
  }
  set hash(e2) {
    if ("" === e2)
      return void (this._url.fragment = null);
    const i2 = "#" === e2[0] ? e2.substring(1) : e2;
    this._url.fragment = "", Hw.basicURLParse(i2, { url: this._url, stateOverride: "fragment" });
  }
  toJSON() {
    return this.href;
  }
};
var Gw = uw(function(e2) {
  const i2 = hw.implSymbol;
  function n2(a2) {
    if (!this || this[i2] || !(this instanceof n2))
      throw new TypeError("Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function.");
    if (arguments.length < 1)
      throw new TypeError("Failed to construct 'URL': 1 argument required, but only " + arguments.length + " present.");
    const t2 = [];
    for (let e3 = 0; e3 < arguments.length && e3 < 2; ++e3)
      t2[e3] = arguments[e3];
    t2[0] = pw.USVString(t2[0]), void 0 !== t2[1] && (t2[1] = pw.USVString(t2[1])), e2.exports.setup(this, t2);
  }
  n2.prototype.toJSON = function() {
    if (!this || !e2.exports.is(this))
      throw new TypeError("Illegal invocation");
    const n3 = [];
    for (let e3 = 0; e3 < arguments.length && e3 < 0; ++e3)
      n3[e3] = arguments[e3];
    return this[i2].toJSON.apply(this[i2], n3);
  }, Object.defineProperty(n2.prototype, "href", { get() {
    return this[i2].href;
  }, set(e3) {
    e3 = pw.USVString(e3), this[i2].href = e3;
  }, enumerable: true, configurable: true }), n2.prototype.toString = function() {
    if (!this || !e2.exports.is(this))
      throw new TypeError("Illegal invocation");
    return this.href;
  }, Object.defineProperty(n2.prototype, "origin", { get() {
    return this[i2].origin;
  }, enumerable: true, configurable: true }), Object.defineProperty(n2.prototype, "protocol", { get() {
    return this[i2].protocol;
  }, set(e3) {
    e3 = pw.USVString(e3), this[i2].protocol = e3;
  }, enumerable: true, configurable: true }), Object.defineProperty(n2.prototype, "username", { get() {
    return this[i2].username;
  }, set(e3) {
    e3 = pw.USVString(e3), this[i2].username = e3;
  }, enumerable: true, configurable: true }), Object.defineProperty(n2.prototype, "password", { get() {
    return this[i2].password;
  }, set(e3) {
    e3 = pw.USVString(e3), this[i2].password = e3;
  }, enumerable: true, configurable: true }), Object.defineProperty(n2.prototype, "host", { get() {
    return this[i2].host;
  }, set(e3) {
    e3 = pw.USVString(e3), this[i2].host = e3;
  }, enumerable: true, configurable: true }), Object.defineProperty(n2.prototype, "hostname", { get() {
    return this[i2].hostname;
  }, set(e3) {
    e3 = pw.USVString(e3), this[i2].hostname = e3;
  }, enumerable: true, configurable: true }), Object.defineProperty(n2.prototype, "port", { get() {
    return this[i2].port;
  }, set(e3) {
    e3 = pw.USVString(e3), this[i2].port = e3;
  }, enumerable: true, configurable: true }), Object.defineProperty(n2.prototype, "pathname", { get() {
    return this[i2].pathname;
  }, set(e3) {
    e3 = pw.USVString(e3), this[i2].pathname = e3;
  }, enumerable: true, configurable: true }), Object.defineProperty(n2.prototype, "search", { get() {
    return this[i2].search;
  }, set(e3) {
    e3 = pw.USVString(e3), this[i2].search = e3;
  }, enumerable: true, configurable: true }), Object.defineProperty(n2.prototype, "hash", { get() {
    return this[i2].hash;
  }, set(e3) {
    e3 = pw.USVString(e3), this[i2].hash = e3;
  }, enumerable: true, configurable: true }), e2.exports = { is: (e3) => !!e3 && e3[i2] instanceof Ww, create(e3, i3) {
    let a2 = Object.create(n2.prototype);
    return this.setup(a2, e3, i3), a2;
  }, setup(e3, n3, a2) {
    a2 || (a2 = {}), a2.wrapper = e3, e3[i2] = new Ww(n3, a2), e3[i2][hw.wrapperSymbol] = e3;
  }, interface: n2, expose: { Window: { URL: n2 }, Worker: { URL: n2 } } };
});
var Kw = { URL: Gw.interface, serializeURL: Hw.serializeURL, serializeURLOrigin: Hw.serializeURLOrigin, basicURLParse: Hw.basicURLParse, setTheUsername: Hw.setTheUsername, setThePassword: Hw.setThePassword, serializeHost: Hw.serializeHost, serializeInteger: Hw.serializeInteger, parseURL: Hw.parseURL };
var Jw = import_stream.default.Readable;
var $w = Symbol("buffer");
var Zw = Symbol("type");
var Yw = class {
  constructor() {
    this[Zw] = "";
    const e2 = arguments[0], i2 = arguments[1], n2 = [];
    let a2 = 0;
    if (e2) {
      const i3 = e2, t3 = Number(i3.length);
      for (let e3 = 0; e3 < t3; e3++) {
        const t4 = i3[e3];
        let d2;
        d2 = t4 instanceof Buffer ? t4 : ArrayBuffer.isView(t4) ? Buffer.from(t4.buffer, t4.byteOffset, t4.byteLength) : t4 instanceof ArrayBuffer ? Buffer.from(t4) : t4 instanceof Yw ? t4[$w] : Buffer.from("string" == typeof t4 ? t4 : String(t4)), a2 += d2.length, n2.push(d2);
      }
    }
    this[$w] = Buffer.concat(n2);
    let t2 = i2 && void 0 !== i2.type && String(i2.type).toLowerCase();
    t2 && !/[^\u0020-\u007E]/.test(t2) && (this[Zw] = t2);
  }
  get size() {
    return this[$w].length;
  }
  get type() {
    return this[Zw];
  }
  text() {
    return Promise.resolve(this[$w].toString());
  }
  arrayBuffer() {
    const e2 = this[$w], i2 = e2.buffer.slice(e2.byteOffset, e2.byteOffset + e2.byteLength);
    return Promise.resolve(i2);
  }
  stream() {
    const e2 = new Jw();
    return e2._read = function() {
    }, e2.push(this[$w]), e2.push(null), e2;
  }
  toString() {
    return "[object Blob]";
  }
  slice() {
    const e2 = this.size, i2 = arguments[0], n2 = arguments[1];
    let a2, t2;
    a2 = void 0 === i2 ? 0 : i2 < 0 ? Math.max(e2 + i2, 0) : Math.min(i2, e2), t2 = void 0 === n2 ? e2 : n2 < 0 ? Math.max(e2 + n2, 0) : Math.min(n2, e2);
    const d2 = Math.max(t2 - a2, 0), l2 = this[$w].slice(a2, a2 + d2), r2 = new Yw([], { type: arguments[2] });
    return r2[$w] = l2, r2;
  }
};
function Qw(e2, i2, n2) {
  Error.call(this, e2), this.message = e2, this.type = i2, n2 && (this.code = this.errno = n2.code), Error.captureStackTrace(this, this.constructor);
}
var Xw;
Object.defineProperties(Yw.prototype, { size: { enumerable: true }, type: { enumerable: true }, slice: { enumerable: true } }), Object.defineProperty(Yw.prototype, Symbol.toStringTag, { value: "Blob", writable: false, enumerable: false, configurable: true }), Qw.prototype = Object.create(Error.prototype), Qw.prototype.constructor = Qw, Qw.prototype.name = "FetchError";
try {
  Xw = require("encoding").convert;
} catch (e2) {
}
var eI = Symbol("Body internals");
var iI = import_stream.default.PassThrough;
function nI(i2) {
  var n2 = this, a2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, t2 = a2.size;
  let d2 = void 0 === t2 ? 0 : t2;
  var l2 = a2.timeout;
  let r2 = void 0 === l2 ? 0 : l2;
  null == i2 ? i2 = null : tI(i2) ? i2 = Buffer.from(i2.toString()) : dI(i2) || Buffer.isBuffer(i2) || ("[object ArrayBuffer]" === Object.prototype.toString.call(i2) ? i2 = Buffer.from(i2) : ArrayBuffer.isView(i2) ? i2 = Buffer.from(i2.buffer, i2.byteOffset, i2.byteLength) : i2 instanceof import_stream.default || (i2 = Buffer.from(String(i2)))), this[eI] = { body: i2, disturbed: false, error: null }, this.size = d2, this.timeout = r2, i2 instanceof import_stream.default && i2.on("error", function(e2) {
    const i3 = "AbortError" === e2.name ? e2 : new Qw(`Invalid response body while trying to fetch ${n2.url}: ${e2.message}`, "system", e2);
    n2[eI].error = i3;
  });
}
function aI() {
  var i2 = this;
  if (this[eI].disturbed)
    return nI.Promise.reject(new TypeError(`body used already for: ${this.url}`));
  if (this[eI].disturbed = true, this[eI].error)
    return nI.Promise.reject(this[eI].error);
  let n2 = this.body;
  if (null === n2)
    return nI.Promise.resolve(Buffer.alloc(0));
  if (dI(n2) && (n2 = n2.stream()), Buffer.isBuffer(n2))
    return nI.Promise.resolve(n2);
  if (!(n2 instanceof import_stream.default))
    return nI.Promise.resolve(Buffer.alloc(0));
  let a2 = [], t2 = 0, d2 = false;
  return new nI.Promise(function(e2, l2) {
    let r2;
    i2.timeout && (r2 = setTimeout(function() {
      d2 = true, l2(new Qw(`Response timeout while trying to fetch ${i2.url} (over ${i2.timeout}ms)`, "body-timeout"));
    }, i2.timeout)), n2.on("error", function(e3) {
      "AbortError" === e3.name ? (d2 = true, l2(e3)) : l2(new Qw(`Invalid response body while trying to fetch ${i2.url}: ${e3.message}`, "system", e3));
    }), n2.on("data", function(e3) {
      if (!d2 && null !== e3) {
        if (i2.size && t2 + e3.length > i2.size)
          return d2 = true, void l2(new Qw(`content size at ${i2.url} over limit: ${i2.size}`, "max-size"));
        t2 += e3.length, a2.push(e3);
      }
    }), n2.on("end", function() {
      if (!d2) {
        clearTimeout(r2);
        try {
          e2(Buffer.concat(a2, t2));
        } catch (e3) {
          l2(new Qw(`Could not create Buffer from response body for ${i2.url}: ${e3.message}`, "system", e3));
        }
      }
    });
  });
}
function tI(e2) {
  return "object" == typeof e2 && "function" == typeof e2.append && "function" == typeof e2.delete && "function" == typeof e2.get && "function" == typeof e2.getAll && "function" == typeof e2.has && "function" == typeof e2.set && ("URLSearchParams" === e2.constructor.name || "[object URLSearchParams]" === Object.prototype.toString.call(e2) || "function" == typeof e2.sort);
}
function dI(e2) {
  return "object" == typeof e2 && "function" == typeof e2.arrayBuffer && "string" == typeof e2.type && "function" == typeof e2.stream && "function" == typeof e2.constructor && "string" == typeof e2.constructor.name && /^(Blob|File)$/.test(e2.constructor.name) && /^(Blob|File)$/.test(e2[Symbol.toStringTag]);
}
function lI(i2) {
  let n2, a2, t2 = i2.body;
  if (i2.bodyUsed)
    throw new Error("cannot clone body after it is used");
  return t2 instanceof import_stream.default && "function" != typeof t2.getBoundary && (n2 = new iI(), a2 = new iI(), t2.pipe(n2), t2.pipe(a2), i2[eI].body = n2, t2 = a2), t2;
}
function rI(i2) {
  return null === i2 ? null : "string" == typeof i2 ? "text/plain;charset=UTF-8" : tI(i2) ? "application/x-www-form-urlencoded;charset=UTF-8" : dI(i2) ? i2.type || null : Buffer.isBuffer(i2) || "[object ArrayBuffer]" === Object.prototype.toString.call(i2) || ArrayBuffer.isView(i2) ? null : "function" == typeof i2.getBoundary ? `multipart/form-data;boundary=${i2.getBoundary()}` : i2 instanceof import_stream.default ? null : "text/plain;charset=UTF-8";
}
function mI(e2) {
  const i2 = e2.body;
  return null === i2 ? 0 : dI(i2) ? i2.size : Buffer.isBuffer(i2) ? i2.length : i2 && "function" == typeof i2.getLengthSync && (i2._lengthRetrievers && 0 == i2._lengthRetrievers.length || i2.hasKnownLength && i2.hasKnownLength()) ? i2.getLengthSync() : null;
}
nI.prototype = { get body() {
  return this[eI].body;
}, get bodyUsed() {
  return this[eI].disturbed;
}, arrayBuffer() {
  return aI.call(this).then(function(e2) {
    return e2.buffer.slice(e2.byteOffset, e2.byteOffset + e2.byteLength);
  });
}, blob() {
  let e2 = this.headers && this.headers.get("content-type") || "";
  return aI.call(this).then(function(i2) {
    return Object.assign(new Yw([], { type: e2.toLowerCase() }), { [$w]: i2 });
  });
}, json() {
  var e2 = this;
  return aI.call(this).then(function(i2) {
    try {
      return JSON.parse(i2.toString());
    } catch (i3) {
      return nI.Promise.reject(new Qw(`invalid json response body at ${e2.url} reason: ${i3.message}`, "invalid-json"));
    }
  });
}, text() {
  return aI.call(this).then(function(e2) {
    return e2.toString();
  });
}, buffer() {
  return aI.call(this);
}, textConverted() {
  var e2 = this;
  return aI.call(this).then(function(i2) {
    return function(e3, i3) {
      if ("function" != typeof Xw)
        throw new Error("The package `encoding` must be installed to use the textConverted() function");
      const n2 = i3.get("content-type");
      let a2, t2, d2 = "utf-8";
      n2 && (a2 = /charset=([^;]*)/i.exec(n2));
      t2 = e3.slice(0, 1024).toString(), !a2 && t2 && (a2 = /<meta.+?charset=(['"])(.+?)\1/i.exec(t2));
      !a2 && t2 && (a2 = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(t2), a2 || (a2 = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(t2), a2 && a2.pop()), a2 && (a2 = /charset=(.*)/i.exec(a2.pop())));
      !a2 && t2 && (a2 = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(t2));
      a2 && (d2 = a2.pop(), "gb2312" !== d2 && "gbk" !== d2 || (d2 = "gb18030"));
      return Xw(e3, "UTF-8", d2).toString();
    }(i2, e2.headers);
  });
} }, Object.defineProperties(nI.prototype, { body: { enumerable: true }, bodyUsed: { enumerable: true }, arrayBuffer: { enumerable: true }, blob: { enumerable: true }, json: { enumerable: true }, text: { enumerable: true } }), nI.mixIn = function(e2) {
  for (const i2 of Object.getOwnPropertyNames(nI.prototype))
    if (!(i2 in e2)) {
      const n2 = Object.getOwnPropertyDescriptor(nI.prototype, i2);
      Object.defineProperty(e2, i2, n2);
    }
}, nI.Promise = global.Promise;
var oI = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
var sI = /[^\t\x20-\x7e\x80-\xff]/;
function uI(e2) {
  if (e2 = `${e2}`, oI.test(e2) || "" === e2)
    throw new TypeError(`${e2} is not a legal HTTP header name`);
}
function kI(e2) {
  if (e2 = `${e2}`, sI.test(e2))
    throw new TypeError(`${e2} is not a legal HTTP header value`);
}
function vI(e2, i2) {
  i2 = i2.toLowerCase();
  for (const n2 in e2)
    if (n2.toLowerCase() === i2)
      return n2;
}
var pI = Symbol("map");
var cI = class {
  constructor() {
    let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0;
    if (this[pI] = /* @__PURE__ */ Object.create(null), e2 instanceof cI) {
      const i2 = e2.raw(), n2 = Object.keys(i2);
      for (const e3 of n2)
        for (const n3 of i2[e3])
          this.append(e3, n3);
    } else if (null == e2)
      ;
    else {
      if ("object" != typeof e2)
        throw new TypeError("Provided initializer must be an object");
      {
        const i2 = e2[Symbol.iterator];
        if (null != i2) {
          if ("function" != typeof i2)
            throw new TypeError("Header pairs must be iterable");
          const n2 = [];
          for (const i3 of e2) {
            if ("object" != typeof i3 || "function" != typeof i3[Symbol.iterator])
              throw new TypeError("Each header pair must be iterable");
            n2.push(Array.from(i3));
          }
          for (const e3 of n2) {
            if (2 !== e3.length)
              throw new TypeError("Each header pair must be a name/value tuple");
            this.append(e3[0], e3[1]);
          }
        } else
          for (const i3 of Object.keys(e2)) {
            const n2 = e2[i3];
            this.append(i3, n2);
          }
      }
    }
  }
  get(e2) {
    uI(e2 = `${e2}`);
    const i2 = vI(this[pI], e2);
    return void 0 === i2 ? null : this[pI][i2].join(", ");
  }
  forEach(e2) {
    let i2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : void 0, n2 = NI(this), a2 = 0;
    for (; a2 < n2.length; ) {
      var t2 = n2[a2];
      const d2 = t2[0], l2 = t2[1];
      e2.call(i2, l2, d2, this), n2 = NI(this), a2++;
    }
  }
  set(e2, i2) {
    i2 = `${i2}`, uI(e2 = `${e2}`), kI(i2);
    const n2 = vI(this[pI], e2);
    this[pI][void 0 !== n2 ? n2 : e2] = [i2];
  }
  append(e2, i2) {
    i2 = `${i2}`, uI(e2 = `${e2}`), kI(i2);
    const n2 = vI(this[pI], e2);
    void 0 !== n2 ? this[pI][n2].push(i2) : this[pI][e2] = [i2];
  }
  has(e2) {
    return uI(e2 = `${e2}`), void 0 !== vI(this[pI], e2);
  }
  delete(e2) {
    uI(e2 = `${e2}`);
    const i2 = vI(this[pI], e2);
    void 0 !== i2 && delete this[pI][i2];
  }
  raw() {
    return this[pI];
  }
  keys() {
    return fI(this, "key");
  }
  values() {
    return fI(this, "value");
  }
  [Symbol.iterator]() {
    return fI(this, "key+value");
  }
};
function NI(e2) {
  let i2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "key+value";
  return Object.keys(e2[pI]).sort().map("key" === i2 ? function(e3) {
    return e3.toLowerCase();
  } : "value" === i2 ? function(i3) {
    return e2[pI][i3].join(", ");
  } : function(i3) {
    return [i3.toLowerCase(), e2[pI][i3].join(", ")];
  });
}
cI.prototype.entries = cI.prototype[Symbol.iterator], Object.defineProperty(cI.prototype, Symbol.toStringTag, { value: "Headers", writable: false, enumerable: false, configurable: true }), Object.defineProperties(cI.prototype, { get: { enumerable: true }, forEach: { enumerable: true }, set: { enumerable: true }, append: { enumerable: true }, has: { enumerable: true }, delete: { enumerable: true }, keys: { enumerable: true }, values: { enumerable: true }, entries: { enumerable: true } });
var hI = Symbol("internal");
function fI(e2, i2) {
  const n2 = Object.create(bI);
  return n2[hI] = { target: e2, kind: i2, index: 0 }, n2;
}
var bI = Object.setPrototypeOf({ next() {
  if (!this || Object.getPrototypeOf(this) !== bI)
    throw new TypeError("Value of `this` is not a HeadersIterator");
  var e2 = this[hI];
  const i2 = e2.target, n2 = e2.kind, a2 = e2.index, t2 = NI(i2, n2);
  return a2 >= t2.length ? { value: void 0, done: true } : (this[hI].index = a2 + 1, { value: t2[a2], done: false });
} }, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));
function SI(e2) {
  const i2 = Object.assign({ __proto__: null }, e2[pI]), n2 = vI(e2[pI], "Host");
  return void 0 !== n2 && (i2[n2] = i2[n2][0]), i2;
}
Object.defineProperty(bI, Symbol.toStringTag, { value: "HeadersIterator", writable: false, enumerable: false, configurable: true });
var yI = Symbol("Response internals");
var gI = import_http.default.STATUS_CODES;
var DI = class {
  constructor() {
    let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null, i2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    nI.call(this, e2, i2);
    const n2 = i2.status || 200, a2 = new cI(i2.headers);
    if (null != e2 && !a2.has("Content-Type")) {
      const i3 = rI(e2);
      i3 && a2.append("Content-Type", i3);
    }
    this[yI] = { url: i2.url, status: n2, statusText: i2.statusText || gI[n2], headers: a2, counter: i2.counter };
  }
  get url() {
    return this[yI].url || "";
  }
  get status() {
    return this[yI].status;
  }
  get ok() {
    return this[yI].status >= 200 && this[yI].status < 300;
  }
  get redirected() {
    return this[yI].counter > 0;
  }
  get statusText() {
    return this[yI].statusText;
  }
  get headers() {
    return this[yI].headers;
  }
  clone() {
    return new DI(lI(this), { url: this.url, status: this.status, statusText: this.statusText, headers: this.headers, ok: this.ok, redirected: this.redirected });
  }
};
nI.mixIn(DI.prototype), Object.defineProperties(DI.prototype, { url: { enumerable: true }, status: { enumerable: true }, ok: { enumerable: true }, redirected: { enumerable: true }, statusText: { enumerable: true }, headers: { enumerable: true }, clone: { enumerable: true } }), Object.defineProperty(DI.prototype, Symbol.toStringTag, { value: "Response", writable: false, enumerable: false, configurable: true });
var VI = Symbol("Request internals");
var _I = import_url.default.URL || Kw.URL;
var FI = import_url.default.parse;
var AI = import_url.default.format;
function TI(e2) {
  return /^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(e2) && (e2 = new _I(e2).toString()), FI(e2);
}
var wI = "destroy" in import_stream.default.Readable.prototype;
function II(e2) {
  return "object" == typeof e2 && "object" == typeof e2[VI];
}
var qI = class {
  constructor(e2) {
    let i2, n2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    II(e2) ? i2 = TI(e2.url) : (i2 = e2 && e2.href ? TI(e2.href) : TI(`${e2}`), e2 = {});
    let a2 = n2.method || e2.method || "GET";
    if (a2 = a2.toUpperCase(), (null != n2.body || II(e2) && null !== e2.body) && ("GET" === a2 || "HEAD" === a2))
      throw new TypeError("Request with GET/HEAD method cannot have body");
    let t2 = null != n2.body ? n2.body : II(e2) && null !== e2.body ? lI(e2) : null;
    nI.call(this, t2, { timeout: n2.timeout || e2.timeout || 0, size: n2.size || e2.size || 0 });
    const d2 = new cI(n2.headers || e2.headers || {});
    if (null != t2 && !d2.has("Content-Type")) {
      const e3 = rI(t2);
      e3 && d2.append("Content-Type", e3);
    }
    let l2 = II(e2) ? e2.signal : null;
    if ("signal" in n2 && (l2 = n2.signal), null != l2 && !function(e3) {
      const i3 = e3 && "object" == typeof e3 && Object.getPrototypeOf(e3);
      return !(!i3 || "AbortSignal" !== i3.constructor.name);
    }(l2))
      throw new TypeError("Expected signal to be an instanceof AbortSignal");
    this[VI] = { method: a2, redirect: n2.redirect || e2.redirect || "follow", headers: d2, parsedURL: i2, signal: l2 }, this.follow = void 0 !== n2.follow ? n2.follow : void 0 !== e2.follow ? e2.follow : 20, this.compress = void 0 !== n2.compress ? n2.compress : void 0 === e2.compress || e2.compress, this.counter = n2.counter || e2.counter || 0, this.agent = n2.agent || e2.agent;
  }
  get method() {
    return this[VI].method;
  }
  get url() {
    return AI(this[VI].parsedURL);
  }
  get headers() {
    return this[VI].headers;
  }
  get redirect() {
    return this[VI].redirect;
  }
  get signal() {
    return this[VI].signal;
  }
  clone() {
    return new qI(this);
  }
};
function CI(e2) {
  Error.call(this, e2), this.type = "aborted", this.message = e2, Error.captureStackTrace(this, this.constructor);
}
nI.mixIn(qI.prototype), Object.defineProperty(qI.prototype, Symbol.toStringTag, { value: "Request", writable: false, enumerable: false, configurable: true }), Object.defineProperties(qI.prototype, { method: { enumerable: true }, url: { enumerable: true }, headers: { enumerable: true }, redirect: { enumerable: true }, clone: { enumerable: true }, signal: { enumerable: true } }), CI.prototype = Object.create(Error.prototype), CI.prototype.constructor = CI, CI.prototype.name = "AbortError";
var PI = import_url.default.URL || Kw.URL;
var jI = import_stream.default.PassThrough;
function OI(n2, d2) {
  if (!OI.Promise)
    throw new Error("native promise missing, set fetch.Promise to your favorite alternative");
  return nI.Promise = OI.Promise, new OI.Promise(function(l2, r2) {
    const m2 = new qI(n2, d2), o2 = function(i2) {
      const n3 = i2[VI].parsedURL, a2 = new cI(i2[VI].headers);
      if (a2.has("Accept") || a2.set("Accept", "*/*"), !n3.protocol || !n3.hostname)
        throw new TypeError("Only absolute URLs are supported");
      if (!/^https?:$/.test(n3.protocol))
        throw new TypeError("Only HTTP(S) protocols are supported");
      if (i2.signal && i2.body instanceof import_stream.default.Readable && !wI)
        throw new Error("Cancellation of streamed requests with AbortSignal is not supported in node < 8");
      let t2 = null;
      if (null == i2.body && /^(POST|PUT)$/i.test(i2.method) && (t2 = "0"), null != i2.body) {
        const e2 = mI(i2);
        "number" == typeof e2 && (t2 = String(e2));
      }
      t2 && a2.set("Content-Length", t2), a2.has("User-Agent") || a2.set("User-Agent", "node-fetch/1.0 (+https://github.com/bitinn/node-fetch)"), i2.compress && !a2.has("Accept-Encoding") && a2.set("Accept-Encoding", "gzip,deflate");
      let d3 = i2.agent;
      return "function" == typeof d3 && (d3 = d3(n3)), Object.assign({}, n3, { method: i2.method, headers: SI(a2), agent: d3 });
    }(m2), s2 = ("https:" === o2.protocol ? import_https.default : import_http.default).request, u2 = m2.signal;
    let k2 = null;
    const v2 = function() {
      let i2 = new CI("The user aborted a request.");
      r2(i2), m2.body && m2.body instanceof import_stream.default.Readable && UI(m2.body, i2), k2 && k2.body && k2.body.emit("error", i2);
    };
    if (u2 && u2.aborted)
      return void v2();
    const p2 = function() {
      v2(), h2();
    }, c2 = s2(o2);
    let N2;
    function h2() {
      c2.abort(), u2 && u2.removeEventListener("abort", p2), clearTimeout(N2);
    }
    u2 && u2.addEventListener("abort", p2), m2.timeout && c2.once("socket", function(e2) {
      N2 = setTimeout(function() {
        r2(new Qw(`network timeout at: ${m2.url}`, "request-timeout")), h2();
      }, m2.timeout);
    }), c2.on("error", function(e2) {
      r2(new Qw(`request to ${m2.url} failed, reason: ${e2.message}`, "system", e2)), k2 && k2.body && UI(k2.body, e2), h2();
    }), function(e2, i2) {
      let n3;
      e2.on("socket", function(e3) {
        n3 = e3;
      }), e2.on("response", function(e3) {
        const a2 = e3.headers;
        "chunked" !== a2["transfer-encoding"] || a2["content-length"] || e3.once("close", function(e4) {
          if (n3 && n3.listenerCount("data") > 0 && !e4) {
            const e5 = new Error("Premature close");
            e5.code = "ERR_STREAM_PREMATURE_CLOSE", i2(e5);
          }
        });
      });
    }(c2, function(e2) {
      u2 && u2.aborted || k2 && k2.body && UI(k2.body, e2);
    }), parseInt(process.version.substring(1)) < 14 && c2.on("socket", function(e2) {
      e2.addListener("close", function(i2) {
        const n3 = e2.listenerCount("data") > 0;
        if (k2 && n3 && !i2 && (!u2 || !u2.aborted)) {
          const e3 = new Error("Premature close");
          e3.code = "ERR_STREAM_PREMATURE_CLOSE", k2.body.emit("error", e3);
        }
      });
    }), c2.on("response", function(e2) {
      clearTimeout(N2);
      const i2 = function(e3) {
        const i3 = new cI();
        for (const n4 of Object.keys(e3))
          if (!oI.test(n4))
            if (Array.isArray(e3[n4]))
              for (const a3 of e3[n4])
                sI.test(a3) || (void 0 === i3[pI][n4] ? i3[pI][n4] = [a3] : i3[pI][n4].push(a3));
            else
              sI.test(e3[n4]) || (i3[pI][n4] = [e3[n4]]);
        return i3;
      }(e2.headers);
      if (OI.isRedirect(e2.statusCode)) {
        const a3 = i2.get("Location");
        let t2 = null;
        try {
          t2 = null === a3 ? null : new PI(a3, m2.url).toString();
        } catch (e3) {
          if ("manual" !== m2.redirect)
            return r2(new Qw(`uri requested responds with an invalid redirect URL: ${a3}`, "invalid-redirect")), void h2();
        }
        switch (m2.redirect) {
          case "error":
            return r2(new Qw(`uri requested responds with a redirect, redirect mode is set to error: ${m2.url}`, "no-redirect")), void h2();
          case "manual":
            if (null !== t2)
              try {
                i2.set("Location", t2);
              } catch (e3) {
                r2(e3);
              }
            break;
          case "follow":
            if (null === t2)
              break;
            if (m2.counter >= m2.follow)
              return r2(new Qw(`maximum redirect reached at: ${m2.url}`, "max-redirect")), void h2();
            const a4 = { headers: new cI(m2.headers), follow: m2.follow, counter: m2.counter + 1, agent: m2.agent, compress: m2.compress, method: m2.method, body: m2.body, signal: m2.signal, timeout: m2.timeout, size: m2.size };
            if (!function(e3, i3) {
              const n4 = new PI(i3).hostname, a5 = new PI(e3).hostname;
              return n4 === a5 || "." === n4[n4.length - a5.length - 1] && n4.endsWith(a5);
            }(m2.url, t2) || (n3 = m2.url, new PI(t2).protocol !== new PI(n3).protocol))
              for (const e3 of ["authorization", "www-authenticate", "cookie", "cookie2"])
                a4.headers.delete(e3);
            return 303 !== e2.statusCode && m2.body && null === mI(m2) ? (r2(new Qw("Cannot follow redirect with body being a readable stream", "unsupported-redirect")), void h2()) : (303 !== e2.statusCode && (301 !== e2.statusCode && 302 !== e2.statusCode || "POST" !== m2.method) || (a4.method = "GET", a4.body = void 0, a4.headers.delete("content-length")), l2(OI(new qI(t2, a4))), void h2());
        }
      }
      var n3;
      e2.once("end", function() {
        u2 && u2.removeEventListener("abort", p2);
      });
      let a2 = e2.pipe(new jI());
      const d3 = { url: m2.url, status: e2.statusCode, statusText: e2.statusMessage, headers: i2, size: m2.size, timeout: m2.timeout, counter: m2.counter }, o3 = i2.get("Content-Encoding");
      if (!m2.compress || "HEAD" === m2.method || null === o3 || 204 === e2.statusCode || 304 === e2.statusCode)
        return k2 = new DI(a2, d3), void l2(k2);
      const s3 = { flush: import_zlib.default.Z_SYNC_FLUSH, finishFlush: import_zlib.default.Z_SYNC_FLUSH };
      if ("gzip" == o3 || "x-gzip" == o3)
        return a2 = a2.pipe(import_zlib.default.createGunzip(s3)), k2 = new DI(a2, d3), void l2(k2);
      if ("deflate" == o3 || "x-deflate" == o3) {
        const i3 = e2.pipe(new jI());
        return i3.once("data", function(e3) {
          a2 = 8 == (15 & e3[0]) ? a2.pipe(import_zlib.default.createInflate()) : a2.pipe(import_zlib.default.createInflateRaw()), k2 = new DI(a2, d3), l2(k2);
        }), void i3.on("end", function() {
          k2 || (k2 = new DI(a2, d3), l2(k2));
        });
      }
      if ("br" == o3 && "function" == typeof import_zlib.default.createBrotliDecompress)
        return a2 = a2.pipe(import_zlib.default.createBrotliDecompress()), k2 = new DI(a2, d3), void l2(k2);
      k2 = new DI(a2, d3), l2(k2);
    }), function(e2, i2) {
      const n3 = i2.body;
      null === n3 ? e2.end() : dI(n3) ? n3.stream().pipe(e2) : Buffer.isBuffer(n3) ? (e2.write(n3), e2.end()) : n3.pipe(e2);
    }(c2, m2);
  });
}
function UI(e2, i2) {
  e2.destroy ? e2.destroy(i2) : (e2.emit("error", i2), e2.end());
}
OI.isRedirect = function(e2) {
  return 301 === e2 || 302 === e2 || 303 === e2 || 307 === e2 || 308 === e2;
}, OI.Promise = global.Promise;
var xI = Object.freeze({ __proto__: null, default: OI, Headers: cI, Request: qI, Response: DI, FetchError: Qw, AbortError: CI });
var BI = sw(kw);
var RI = sw(xI);
function EI(e2) {
  return e2 && e2.default || e2;
}
var LI = ow.fetch = ow.fetch || ("undefined" == typeof process ? EI(BI) : function(e2, i2) {
  return EI(RI)(String(e2).replace(/^\/\//g, "https://"), i2);
});
var zI = class extends Error {
  constructor(e2, i2) {
    super(`${zI.extractMessage(e2)}: ${JSON.stringify({ response: e2, request: i2 })}`), Object.setPrototypeOf(this, zI.prototype), this.response = e2, this.request = i2, "function" == typeof Error.captureStackTrace && Error.captureStackTrace(this, zI);
  }
  static extractMessage(e2) {
    var i2, n2, a2;
    try {
      return null !== (a2 = null === (n2 = null === (i2 = e2.errors) || void 0 === i2 ? void 0 : i2[0]) || void 0 === n2 ? void 0 : n2.message) && void 0 !== a2 ? a2 : `GraphQL Error (Code: ${e2.status})`;
    } catch (i3) {
      return `GraphQL Error (Code: ${e2.status})`;
    }
  }
};
var MI = class {
  constructor(e2, i2) {
    this.url = e2, this.options = i2 || {};
  }
  rawRequest(e2, i2, n2) {
    return Zv(this, void 0, void 0, function* () {
      const a2 = this.options, { headers: t2 } = a2, d2 = $v(a2, ["headers"]), l2 = JSON.stringify({ query: e2, variables: i2 }), r2 = yield LI(this.url, Object.assign({ method: "POST", headers: Object.assign(Object.assign(Object.assign({}, "string" == typeof l2 ? { "Content-Type": "application/json" } : {}), WI(t2)), WI(n2)), body: l2 }, d2)), m2 = yield HI(r2);
      if ("string" != typeof m2 && r2.ok && !m2.errors && m2.data)
        return Object.assign(Object.assign({}, m2), { headers: r2.headers, status: r2.status });
      throw WT(new zI(Object.assign(Object.assign({}, "string" == typeof m2 ? { error: m2 } : m2), { status: r2.status, headers: r2.headers }), { query: e2, variables: i2 }));
    });
  }
  request(e2, i2, n2) {
    return Zv(this, void 0, void 0, function* () {
      const a2 = this.options, { headers: t2 } = a2, d2 = $v(a2, ["headers"]), l2 = "string" == typeof e2 ? e2 : ew(e2), r2 = JSON.stringify({ query: l2, variables: i2 }), m2 = yield LI(this.url, Object.assign({ method: "POST", headers: Object.assign(Object.assign(Object.assign({}, "string" == typeof r2 ? { "Content-Type": "application/json" } : {}), WI(t2)), WI(n2)), body: r2 }, d2)), o2 = yield HI(m2);
      if ("string" != typeof o2 && m2.ok && !o2.errors && o2.data)
        return o2.data;
      throw new zI(Object.assign(Object.assign({}, "string" == typeof o2 ? { error: o2 } : o2), { status: m2.status, headers: m2.headers }), { query: l2, variables: i2 });
    });
  }
  setHeaders(e2) {
    return this.options.headers = e2, this;
  }
  setHeader(e2, i2) {
    const { headers: n2 } = this.options;
    return n2 ? n2[e2] = i2 : this.options.headers = { [e2]: i2 }, this;
  }
};
function HI(e2) {
  const i2 = e2.headers.get("Content-Type");
  return i2 && i2.startsWith("application/json") ? e2.json() : e2.text();
}
function WI(e2) {
  let i2 = {};
  return e2 && ("undefined" != typeof Headers && e2 instanceof Headers ? i2 = function(e3) {
    const i3 = {};
    return e3.forEach((e4, n2) => {
      i3[n2] = e4;
    }), i3;
  }(e2) : Array.isArray(e2) ? e2.forEach(([e3, n2]) => {
    i2[e3] = n2;
  }) : i2 = e2), i2;
}
var GI = class extends DT {
  constructor(e2) {
    const i2 = function(e3) {
      var i3, n3, a2, { apiKey: t2, accessToken: d2, apiUrl: l2, headers: r2 } = e3, m2 = $v(e3, ["apiKey", "accessToken", "apiUrl", "headers"]);
      if (!d2 && !t2)
        throw new Error("No accessToken or apiKey provided to the LinearClient - create one here: https://linear.app/settings/account/security");
      return Object.assign({ headers: Object.assign(Object.assign({ Authorization: d2 ? d2.startsWith("Bearer ") ? d2 : `Bearer ${d2}` : null != t2 ? t2 : "" }, r2), { "User-Agent": (a2 = { [null !== (i3 = process.env.npm_package_name) && void 0 !== i3 ? i3 : "@linear/sdk"]: null !== (n3 = process.env.npm_package_version) && void 0 !== n3 ? n3 : "unknown" }, Object.entries(a2).reduce((e4, [i4, n4]) => {
        const a3 = `${i4}@${encodeURIComponent(n4)}`;
        return e4 ? `${e4} ${a3}` : a3;
      }, "")) }), apiUrl: null != l2 ? l2 : "https://api.linear.app/graphql" }, m2);
    }(e2), n2 = new MI(i2.apiUrl, i2);
    super((e3, i3) => this.client.request(e3, i3).catch((e4) => {
      throw WT(e4);
    })), this.options = i2, this.client = n2;
  }
};

// src/services/LinearService.ts
var import_obsidian2 = require("obsidian");
var LinearService = class {
  // 5 minutes in milliseconds
  constructor(settings) {
    this.settings = settings;
    this.client = null;
    this.teamCache = /* @__PURE__ */ new Map();
    // name -> id mapping
    this.workflowStatesCache = null;
    this.CACHE_TTL = 5 * 60 * 1e3;
    if (settings.apiKey) {
      this.client = new GI({ apiKey: settings.apiKey });
      this.log("Service initialized with API key");
    } else {
      this.log("Service initialized without API key");
    }
  }
  log(message, data, isError = false) {
    if (!this.settings.debugMode)
      return;
    const prefix = "\u{1F504} Linear Plugin: ";
    if (isError) {
      console.error(prefix + message, data);
    } else {
      console.log(prefix + message, data || "");
    }
  }
  async ensureClient() {
    if (!this.settings.apiKey) {
      throw new Error("Linear API key not configured");
    }
    if (!this.client) {
      this.client = new GI({ apiKey: this.settings.apiKey });
      this.log("Created new Linear client");
    }
    return this.client;
  }
  async getTeams() {
    try {
      this.log("Fetching teams...");
      const client = await this.ensureClient();
      const { nodes } = await client.teams();
      this.log("Teams fetched:", nodes.map((t2) => ({ id: t2.id, name: t2.name })));
      return nodes;
    } catch (error) {
      this.log("Failed to fetch teams - API error", error, true);
      throw new Error("Failed to fetch teams");
    }
  }
  async getTeamIdByName(teamName) {
    this.log(`Looking for team: "${teamName}"`);
    try {
      const teams = await this.getTeams();
      for (const team of teams) {
        const name = team.name.toLowerCase();
        this.teamCache.set(name, team.id);
        if (name === teamName.toLowerCase()) {
          this.log(`Found team "${teamName}" with ID: ${team.id}`);
          return team.id;
        }
      }
      this.log(`Team "${teamName}" not found`);
      return null;
    } catch (error) {
      this.log("Failed to find team - API error", error, true);
      return null;
    }
  }
  isCacheValid() {
    return !!(this.workflowStatesCache && Date.now() - this.workflowStatesCache.timestamp < this.CACHE_TTL);
  }
  async getWorkflowStates() {
    var _a2, _b2;
    try {
      if (this.isCacheValid()) {
        this.log("Using cached workflow states");
        return this.workflowStatesCache.states;
      }
      this.log("Fetching workflow states...");
      const client = await this.ensureClient();
      let allStates = [];
      let hasNextPage = true;
      let after = null;
      while (hasNextPage) {
        const response = await client.client.rawRequest(`
                    query WorkflowStates${after ? "($after: String!)" : ""} {
                        workflowStates(first: 100${after ? ", after: $after" : ""}) {
                            nodes {
                                id
                                name
                                type
                                team {
                                    id
                                    name
                                }
                            }
                            pageInfo {
                                hasNextPage
                                endCursor
                            }
                        }
                    }
                `, after ? { after } : void 0);
        if (!((_b2 = (_a2 = response == null ? void 0 : response.data) == null ? void 0 : _a2.workflowStates) == null ? void 0 : _b2.nodes)) {
          throw new Error("No workflow states returned from query");
        }
        const { nodes, pageInfo } = response.data.workflowStates;
        allStates = allStates.concat(nodes);
        hasNextPage = pageInfo.hasNextPage;
        after = pageInfo.endCursor;
        this.log(`Fetched ${nodes.length} workflow states${hasNextPage ? ", fetching more..." : ""}`);
      }
      this.workflowStatesCache = {
        timestamp: Date.now(),
        states: allStates
      };
      this.log("All workflow states fetched:", allStates.map((s2) => ({
        id: s2.id,
        name: s2.name,
        team: s2.team ? `${s2.team.name} (${s2.team.id})` : "no team"
      })));
      return allStates;
    } catch (error) {
      this.log("Error fetching workflow states", error);
      throw new Error("Failed to fetch workflow states");
    }
  }
  async getStatusByName(statusName, teamId) {
    this.log(`Looking for status: "${statusName}"${teamId ? ` in team ID: ${teamId}` : ""}`);
    try {
      const states = await this.getWorkflowStates();
      const normalizedSearchName = this.normalizeStateName(statusName);
      for (const state of states) {
        const normalizedStateName = this.normalizeStateName(state.name);
        this.log(`Checking state: "${state.name}" (${state.id})`, {
          matches: {
            name: normalizedStateName === normalizedSearchName,
            team: !teamId || !state.team || state.team.id === teamId
          },
          state: {
            name: state.name,
            normalizedName: normalizedStateName,
            id: state.id,
            team: state.team ? `${state.team.name} (${state.team.id})` : "no team"
          }
        });
        if (normalizedStateName === normalizedSearchName && (!teamId || !state.team || state.team.id === teamId)) {
          this.log(`Found matching state: "${state.name}"`);
          return state;
        }
      }
      this.log(`No matching state found for "${statusName}"`);
      return null;
    } catch (error) {
      this.log("Error finding status", error);
      return null;
    }
  }
  normalizeStateName(name) {
    return name.toLowerCase().replace(/[^a-z0-9]/g, "");
  }
  async getIssues(options) {
    var _a2;
    try {
      this.log("Getting issues with options:", options);
      const client = await this.ensureClient();
      let teamId = void 0;
      const filter = {};
      if (options == null ? void 0 : options.teamName) {
        const fetchedTeamId = await this.getTeamIdByName(options.teamName);
        if (!fetchedTeamId) {
          this.log(`Team "${options.teamName}" not found - skipping query`);
          new import_obsidian2.Notice(`Team "${options.teamName}" not found`);
          return [];
        }
        teamId = fetchedTeamId;
        filter.team = { id: { eq: teamId } };
        this.log(`Added team filter:`, filter.team);
      }
      if (options == null ? void 0 : options.status) {
        const state = await this.getStatusByName(options.status, teamId);
        if (!state) {
          const message = `Status "${options.status}" not found${teamId ? " for the specified team" : ""}`;
          this.log(message);
          new import_obsidian2.Notice(message);
          return [];
        }
        filter.state = { id: { eq: state.id } };
        this.log(`Added status filter:`, filter.state);
      }
      if (options == null ? void 0 : options.assigneeEmail) {
        filter.assignee = { email: { eq: options.assigneeEmail } };
        this.log(`Added assignee filter:`, filter.assignee);
      }
      this.log("Fetching issues with filter:", filter);
      let { nodes } = await client.issues({
        first: options == null ? void 0 : options.limit,
        filter: Object.keys(filter).length > 0 ? filter : void 0
      });
      if (((_a2 = options == null ? void 0 : options.sorting) == null ? void 0 : _a2.field) === "date") {
        this.log("Sorting issues by due date", {
          direction: options.sorting.direction,
          totalIssues: nodes.length,
          issuesWithDueDate: nodes.filter((n2) => n2.dueDate).length
        });
        nodes = nodes.sort((a2, b2) => {
          if (!a2.dueDate && !b2.dueDate)
            return 0;
          if (!a2.dueDate)
            return 1;
          if (!b2.dueDate)
            return -1;
          const dateA = new Date(a2.dueDate).getTime();
          const dateB = new Date(b2.dueDate).getTime();
          return options.sorting.direction === "asc" ? dateA - dateB : dateB - dateA;
        });
        this.log("Sorting complete", {
          firstIssue: nodes[0] ? {
            identifier: nodes[0].identifier,
            dueDate: nodes[0].dueDate
          } : "no issues",
          lastIssue: nodes[nodes.length - 1] ? {
            identifier: nodes[nodes.length - 1].identifier,
            dueDate: nodes[nodes.length - 1].dueDate
          } : "no issues"
        });
      }
      for (const issue of nodes) {
        const assignee = issue.assignee ? await issue.assignee : null;
        this.log(`Issue details:`, {
          id: issue.id,
          identifier: issue.identifier,
          title: issue.title,
          dueDate: issue.dueDate,
          formattedDueDate: issue.dueDate ? new Date(issue.dueDate).toLocaleDateString() : "No due date",
          assignee: assignee ? {
            id: assignee.id,
            name: assignee.name,
            email: assignee.email
          } : "Unassigned"
        });
      }
      this.log(`Found ${nodes.length} issues`);
      return nodes;
    } catch (error) {
      this.log("Failed to fetch Linear issues - API error", error, true);
      new import_obsidian2.Notice("Failed to fetch Linear issues");
      return [];
    }
  }
};

// src/processors/LinearProcessor.ts
var LinearProcessor = class extends import_obsidian3.Component {
  constructor(settings) {
    super();
    this.settings = settings;
    this.linearService = new LinearService(settings);
  }
  log(message, data, isError = false) {
    if (!this.settings.debugMode)
      return;
    const prefix = "\u{1F504} Linear Plugin: ";
    if (isError) {
      console.error(prefix + message, data);
    } else {
      console.log(prefix + message, data || "");
    }
  }
  parseOptions(source) {
    const options = {};
    try {
      const lines = source.trim().split("\n");
      this.log("Parsing options from lines:", lines);
      for (const line of lines) {
        const [key, value] = line.split(":").map((s2) => s2.trim());
        this.log("Processing option line:", { key, value });
        switch (key) {
          case "limit":
            const limitValue = parseInt(value);
            if (!isNaN(limitValue) && limitValue > 0) {
              options.limit = limitValue;
            }
            break;
          case "team":
            if (value) {
              options.teamName = value;
            }
            break;
          case "status":
            if (value) {
              options.status = value;
            }
            break;
          case "assignee":
            if (value) {
              options.assigneeEmail = value;
            }
            break;
          case "sorting":
            if (value) {
              const sortValue = value.toLowerCase();
              if (sortValue === "date" || sortValue === "datedescending") {
                options.sorting = {
                  field: "date",
                  direction: "desc"
                };
              } else if (sortValue === "dateascending") {
                options.sorting = {
                  field: "date",
                  direction: "asc"
                };
              }
            }
            break;
          case "hideDescription":
            this.log("Processing hideDescription option:", { value, lowercased: value == null ? void 0 : value.toLowerCase() });
            if (value && value.toLowerCase() === "true") {
              options.hideDescription = true;
              this.log("hideDescription set to true");
            } else {
              this.log("hideDescription not set to true", {
                reason: !value ? "no value" : 'value not "true"',
                valueProvided: value
              });
            }
            break;
        }
      }
      this.log("Final parsed options:", options);
    } catch (error) {
      this.log("Failed to parse Linear block options", error, true);
    }
    return options;
  }
  async renderIssue(container, issue, options, ctx) {
    var _a2;
    this.log("Rendering issue:", {
      id: issue.id,
      identifier: issue.identifier,
      title: issue.title,
      dueDate: issue.dueDate,
      formattedDueDate: issue.dueDate ? new Date(issue.dueDate).toLocaleDateString() : "No due date"
    });
    try {
      const issueEl = container.createDiv({ cls: "linear-issue" });
      const headerEl = issueEl.createDiv({ cls: "linear-issue-header" });
      const link = headerEl.createEl("a", {
        cls: "linear-issue-title",
        href: issue.url,
        text: `${issue.identifier}: ${issue.title}`
      });
      link.setAttribute("target", "_blank");
      const metadataEl = issueEl.createDiv({ cls: "linear-issue-metadata" });
      if (issue.dueDate) {
        this.log("Processing due date:", issue.dueDate);
        const dueDate = new Date(issue.dueDate);
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        const tomorrow = new Date(today);
        tomorrow.setDate(tomorrow.getDate() + 1);
        let dueDateText = "";
        let dueDateClass = "";
        if (dueDate.toDateString() === today.toDateString()) {
          dueDateText = "\u{1F4C5} Due Today";
          dueDateClass = "due-today";
        } else if (dueDate.toDateString() === tomorrow.toDateString()) {
          dueDateText = "\u{1F4C5} Due Tomorrow";
          dueDateClass = "due-tomorrow";
        } else if (dueDate < today) {
          dueDateText = `\u26A0\uFE0F Overdue: ${dueDate.toLocaleDateString()}`;
          dueDateClass = "overdue";
        } else {
          dueDateText = `\u{1F4C5} Due: ${dueDate.toLocaleDateString()}`;
          dueDateClass = "upcoming";
        }
        this.log("Creating due date element:", {
          text: dueDateText,
          class: dueDateClass,
          originalDate: issue.dueDate,
          parsedDate: dueDate
        });
        metadataEl.createSpan({
          cls: `linear-issue-due-date ${dueDateClass}`,
          text: dueDateText
        });
      } else {
        this.log("No due date for issue");
        metadataEl.createSpan({
          cls: "linear-issue-due-date no-date",
          text: "\u{1F4C5} No due date"
        });
      }
      if (issue.state) {
        const state = await issue.state;
        headerEl.createSpan({
          cls: `linear-issue-status linear-status-${state.name.toLowerCase()}`,
          text: state.name
        });
      }
      if (!options.hideDescription && issue.description) {
        this.log("Rendering description", {
          hideDescription: options.hideDescription,
          hasDescription: !!issue.description,
          descriptionLength: (_a2 = issue.description) == null ? void 0 : _a2.length
        });
        const descriptionEl = issueEl.createDiv({ cls: "linear-issue-description" });
        await import_obsidian3.MarkdownRenderer.renderMarkdown(
          issue.description,
          descriptionEl,
          ctx.sourcePath,
          this
        );
      } else {
        this.log("Skipping description", {
          hideDescription: options.hideDescription,
          hasDescription: !!issue.description,
          reason: !issue.description ? "no description" : "hideDescription is true"
        });
      }
    } catch (error) {
      this.log("Failed to render issue", error, true);
      container.createDiv({
        cls: "linear-error",
        text: `Failed to render issue ${issue.identifier}`
      });
    }
  }
  async process(source, el2, ctx) {
    this.log("Processing Linear block with source:", source);
    el2.empty();
    el2.createEl("p", { text: "Loading Linear issues..." });
    try {
      const options = this.parseOptions(source);
      this.log("Parsed options:", options);
      const issues = await this.linearService.getIssues(options);
      this.log("Fetched issues:", issues);
      el2.empty();
      if (!issues.length) {
        const messages = [];
        if (options.teamName)
          messages.push(`team "${options.teamName}"`);
        if (options.status)
          messages.push(`status "${options.status}"`);
        if (options.assigneeEmail)
          messages.push(`assignee "${options.assigneeEmail}"`);
        if (options.sorting)
          messages.push(`sorted by ${options.sorting.field} ${options.sorting.direction}`);
        const message = messages.length ? `No issues found for ${messages.join(" and ")}` : "No issues found";
        this.log("No matching issues:", message);
        el2.createEl("p", { text: message });
        return;
      }
      const container = el2.createDiv({ cls: "linear-issues-container" });
      for (const issue of issues) {
        await this.renderIssue(container, issue, options, ctx);
      }
    } catch (error) {
      this.log("Failed to process Linear block", error, true);
      el2.empty();
      el2.createDiv({
        cls: "linear-error",
        text: "Error loading Linear issues. Please check the console for details."
      });
    }
  }
};

// src/main.ts
var LinearPlugin = class extends import_obsidian4.Plugin {
  log(message, data, isError = false) {
    var _a2;
    if (!((_a2 = this.settings) == null ? void 0 : _a2.debugMode))
      return;
    const prefix = "\u{1F504} Linear Plugin: ";
    if (isError) {
      console.error(prefix + message, data);
    } else {
      console.log(prefix + message, data || "");
    }
  }
  async onload() {
    this.log("Loading plugin");
    await this.loadSettings();
    this.log("Settings loaded", this.settings);
    this.addSettingTab(new LinearSettingsTab(this.app, this));
    this.log("Settings tab added");
    this.registerMarkdownCodeBlockProcessor("linear", async (source, el2, ctx) => {
      this.log("Processing Linear code block", { source });
      if (!this.settings.apiKey) {
        this.log("No API key configured - cannot process block");
        const div = el2.createDiv();
        div.setText("Please configure your Linear API key in settings.");
        return;
      }
      if (!this.processor) {
        this.log("Creating new Linear processor");
        this.processor = new LinearProcessor(this.settings);
      }
      try {
        const div = el2.createDiv();
        await this.processor.process(source, div, ctx);
      } catch (error) {
        this.log("Failed to process Linear block", error, true);
        el2.createEl("div", {
          cls: "linear-error",
          text: "Error loading Linear issues. Please check the console for details."
        });
      }
    });
    this.log("Plugin loaded successfully");
  }
  onunload() {
    this.log("Plugin unloaded");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    this.log("Settings loaded", this.settings);
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.log("Settings saved", this.settings);
  }
};
